
C:\Users\jdaily\AppData\Local\Temp\arduino\sketches\430C6098DFDCE475CEE873245EC860D2/TMC_superTech_Flood.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
void doState0(){
  GREEN_LED_state = LOW;
  BLUE_LED_state = LOW;
}

void doState1(){
       0:	00 00 03 20 d1 01 00 00 d1 4d 00 00 8d 4d 00 00     ... .....M...M..
// Flood bus with zeros
  GREEN_LED_state = HIGH;
  BLUE_LED_state = HIGH;
  memset(&txmsg.buf[0],0,8);
  txmsg.id = 0;
  Can0.write(txmsg);
      10:	8d 4d 00 00 8d 4d 00 00 8d 4d 00 00 8d 4d 00 00     .M...M...M...M..
  Can1.write(txmsg);
      20:	8d 4d 00 00 8d 4d 00 00 8d 4d 00 00 d1 4d 00 00     .M...M...M...M..
}
      30:	d1 4d 00 00 8d 4d 00 00 a5 5f 00 00 a9 5f 00 00     .M...M..._..._..
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
      40:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
      50:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
  
  year = 0;  
  days = 0;
      60:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
      70:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
      80:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
      90:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
      a0:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
      b0:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
      c0:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
  time  -= days; // now it is days in this year, starting at 0
      d0:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
      e0:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
    if (month==1) { // february
      f0:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     100:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
     110:	d1 4d 00 00 ad 52 00 00 d1 4d 00 00 d1 4d 00 00     .M...R...M...M..
  days -= LEAP_YEAR(year) ? 366 : 365;
     120:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
     130:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
     140:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
  tm.Day = time + 1;     // day of month
     150:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
    if (time >= monthLength) {
     160:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
     170:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
     180:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
     190:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     1a0:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
     1b0:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..
     1c0:	d1 4d 00 00 d1 4d 00 00 d1 4d 00 00 d1 4d 00 00     .M...M...M...M..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	4b5f      	ldr	r3, [pc, #380]	; (350 <ResetHandler+0x180>)
     1d2:	f24c 5220 	movw	r2, #50464	; 0xc520
{
     1d6:	b510      	push	{r4, lr}
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	81da      	strh	r2, [r3, #14]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	f64d 1228 	movw	r2, #55592	; 0xd928
     1de:	81da      	strh	r2, [r3, #14]
	__asm__ volatile ("nop");
     1e0:	bf00      	nop
	__asm__ volatile ("nop");
     1e2:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	f004 fdf8 	bl	4dd8 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	4b5a      	ldr	r3, [pc, #360]	; (354 <ResetHandler+0x184>)
     1ea:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
     1ee:	631a      	str	r2, [r3, #48]	; 0x30
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	4a59      	ldr	r2, [pc, #356]	; (358 <ResetHandler+0x188>)
     1f2:	639a      	str	r2, [r3, #56]	; 0x38
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	4a59      	ldr	r2, [pc, #356]	; (35c <ResetHandler+0x18c>)
     1f6:	63da      	str	r2, [r3, #60]	; 0x3c
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     1fc:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
     200:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     204:	f503 23e8 	add.w	r3, r3, #475136	; 0x74000
     208:	4a55      	ldr	r2, [pc, #340]	; (360 <ResetHandler+0x190>)
     20a:	601a      	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     20c:	4b55      	ldr	r3, [pc, #340]	; (364 <ResetHandler+0x194>)
     20e:	789a      	ldrb	r2, [r3, #2]
     210:	0711      	lsls	r1, r2, #28
     212:	d503      	bpl.n	21c <ResetHandler+0x4c>
     214:	789a      	ldrb	r2, [r3, #2]
     216:	f042 0208 	orr.w	r2, r2, #8
     21a:	709a      	strb	r2, [r3, #2]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21c:	4b52      	ldr	r3, [pc, #328]	; (368 <ResetHandler+0x198>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     21e:	4853      	ldr	r0, [pc, #332]	; (36c <ResetHandler+0x19c>)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     220:	22aa      	movs	r2, #170	; 0xaa
     222:	701a      	strb	r2, [r3, #0]
	while (dest < &_edata) *dest++ = *src++;
     224:	4b52      	ldr	r3, [pc, #328]	; (370 <ResetHandler+0x1a0>)
     226:	1cda      	adds	r2, r3, #3
     228:	1a12      	subs	r2, r2, r0
     22a:	1ec1      	subs	r1, r0, #3
     22c:	f022 0203 	bic.w	r2, r2, #3
     230:	4299      	cmp	r1, r3
     232:	bf88      	it	hi
     234:	2200      	movhi	r2, #0
     236:	494f      	ldr	r1, [pc, #316]	; (374 <ResetHandler+0x1a4>)
     238:	f004 fcd4 	bl	4be4 <memcpy>
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     23c:	4b4e      	ldr	r3, [pc, #312]	; (378 <ResetHandler+0x1a8>)
     23e:	484f      	ldr	r0, [pc, #316]	; (37c <ResetHandler+0x1ac>)
     240:	1cda      	adds	r2, r3, #3
     242:	1a12      	subs	r2, r2, r0
     244:	1ec1      	subs	r1, r0, #3
     246:	f022 0203 	bic.w	r2, r2, #3
     24a:	4299      	cmp	r1, r3
     24c:	bf88      	it	hi
     24e:	2200      	movhi	r2, #0
     250:	2100      	movs	r1, #0
     252:	f007 fa73 	bl	773c <memset>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     256:	494a      	ldr	r1, [pc, #296]	; (380 <ResetHandler+0x1b0>)
     258:	484a      	ldr	r0, [pc, #296]	; (384 <ResetHandler+0x1b4>)
     25a:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
     25e:	f004 fcc1 	bl	4be4 <memcpy>
     262:	4b49      	ldr	r3, [pc, #292]	; (388 <ResetHandler+0x1b8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     264:	4a49      	ldr	r2, [pc, #292]	; (38c <ResetHandler+0x1bc>)
     266:	2180      	movs	r1, #128	; 0x80
     268:	f803 1b01 	strb.w	r1, [r3], #1
     26c:	4293      	cmp	r3, r2
     26e:	d1fb      	bne.n	268 <ResetHandler+0x98>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     270:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     274:	4a43      	ldr	r2, [pc, #268]	; (384 <ResetHandler+0x1b4>)
     276:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27a:	4b45      	ldr	r3, [pc, #276]	; (390 <ResetHandler+0x1c0>)
     27c:	228a      	movs	r2, #138	; 0x8a
     27e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     280:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     284:	2224      	movs	r2, #36	; 0x24
     286:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     288:	22a0      	movs	r2, #160	; 0xa0
     28a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28c:	799a      	ldrb	r2, [r3, #6]
     28e:	0792      	lsls	r2, r2, #30
     290:	d5fc      	bpl.n	28c <ResetHandler+0xbc>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     292:	799a      	ldrb	r2, [r3, #6]
     294:	06d4      	lsls	r4, r2, #27
     296:	d4fc      	bmi.n	292 <ResetHandler+0xc2>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     298:	4a3e      	ldr	r2, [pc, #248]	; (394 <ResetHandler+0x1c4>)
     29a:	7993      	ldrb	r3, [r2, #6]
     29c:	f003 030c 	and.w	r3, r3, #12
     2a0:	2b08      	cmp	r3, #8
     2a2:	d1fa      	bne.n	29a <ResetHandler+0xca>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a4:	4b30      	ldr	r3, [pc, #192]	; (368 <ResetHandler+0x198>)
     2a6:	2260      	movs	r2, #96	; 0x60
     2a8:	705a      	strb	r2, [r3, #1]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2aa:	78da      	ldrb	r2, [r3, #3]
     2ac:	2a80      	cmp	r2, #128	; 0x80
     2ae:	d1fc      	bne.n	2aa <ResetHandler+0xda>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b0:	4b38      	ldr	r3, [pc, #224]	; (394 <ResetHandler+0x1c4>)
     2b2:	2201      	movs	r2, #1
     2b4:	711a      	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2b6:	225d      	movs	r2, #93	; 0x5d
     2b8:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2ba:	799a      	ldrb	r2, [r3, #6]
     2bc:	0690      	lsls	r0, r2, #26
     2be:	d5fc      	bpl.n	2ba <ResetHandler+0xea>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c0:	799a      	ldrb	r2, [r3, #6]
     2c2:	0651      	lsls	r1, r2, #25
     2c4:	d5fc      	bpl.n	2c0 <ResetHandler+0xf0>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2c6:	4a23      	ldr	r2, [pc, #140]	; (354 <ResetHandler+0x184>)
     2c8:	4933      	ldr	r1, [pc, #204]	; (398 <ResetHandler+0x1c8>)
     2ca:	6451      	str	r1, [r2, #68]	; 0x44
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2cc:	2100      	movs	r1, #0
     2ce:	6491      	str	r1, [r2, #72]	; 0x48
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d0:	2120      	movs	r1, #32
     2d2:	7019      	strb	r1, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2d4:	492f      	ldr	r1, [pc, #188]	; (394 <ResetHandler+0x1c4>)
     2d6:	798b      	ldrb	r3, [r1, #6]
     2d8:	f003 030c 	and.w	r3, r3, #12
     2dc:	2b0c      	cmp	r3, #12
     2de:	d1fa      	bne.n	2d6 <ResetHandler+0x106>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e0:	4b2e      	ldr	r3, [pc, #184]	; (39c <ResetHandler+0x1cc>)
     2e2:	6053      	str	r3, [r2, #4]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2e4:	4a2e      	ldr	r2, [pc, #184]	; (3a0 <ResetHandler+0x1d0>)
     2e6:	6913      	ldr	r3, [r2, #16]
     2e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     2ec:	d103      	bne.n	2f6 <ResetHandler+0x126>
		RTC_SR = 0;
     2ee:	6153      	str	r3, [r2, #20]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     2f4:	6113      	str	r3, [r2, #16]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2fa:	4a2a      	ldr	r2, [pc, #168]	; (3a4 <ResetHandler+0x1d4>)
     2fc:	615a      	str	r2, [r3, #20]
	SYST_CVR = 0;
     2fe:	2200      	movs	r2, #0
     300:	619a      	str	r2, [r3, #24]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     302:	2207      	movs	r2, #7
     304:	611a      	str	r2, [r3, #16]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     306:	4a28      	ldr	r2, [pc, #160]	; (3a8 <ResetHandler+0x1d8>)
     308:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20

	//init_pins();
	__enable_irq();
     30c:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     30e:	f004 fdff 	bl	4f10 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     312:	4b23      	ldr	r3, [pc, #140]	; (3a0 <ResetHandler+0x1d0>)
     314:	695b      	ldr	r3, [r3, #20]
     316:	07da      	lsls	r2, r3, #31
     318:	d505      	bpl.n	326 <ResetHandler+0x156>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31a:	4824      	ldr	r0, [pc, #144]	; (3ac <ResetHandler+0x1dc>)
     31c:	f004 fdec 	bl	4ef8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     320:	4b23      	ldr	r3, [pc, #140]	; (3b0 <ResetHandler+0x1e0>)
     322:	4a24      	ldr	r2, [pc, #144]	; (3b4 <ResetHandler+0x1e4>)
     324:	61da      	str	r2, [r3, #28]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     326:	4b24      	ldr	r3, [pc, #144]	; (3b8 <ResetHandler+0x1e8>)
     328:	781b      	ldrb	r3, [r3, #0]
     32a:	065b      	lsls	r3, r3, #25
     32c:	d509      	bpl.n	342 <ResetHandler+0x172>
     32e:	4c20      	ldr	r4, [pc, #128]	; (3b0 <ResetHandler+0x1e0>)
     330:	4b20      	ldr	r3, [pc, #128]	; (3b4 <ResetHandler+0x1e4>)
     332:	69e2      	ldr	r2, [r4, #28]
     334:	429a      	cmp	r2, r3
     336:	d104      	bne.n	342 <ResetHandler+0x172>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     338:	481c      	ldr	r0, [pc, #112]	; (3ac <ResetHandler+0x1dc>)
     33a:	f004 fddd 	bl	4ef8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     33e:	2300      	movs	r3, #0
     340:	61e3      	str	r3, [r4, #28]
	}
#endif

	startup_late_hook();
     342:	f004 fd4f 	bl	4de4 <startup_late_hook>
	__libc_init_array();
     346:	f007 faef 	bl	7928 <__libc_init_array>

	main();
     34a:	f004 fc43 	bl	4bd4 <main>
	
	while (1) ;
     34e:	e7fe      	b.n	34e <ResetHandler+0x17e>
     350:	40052000 	.word	0x40052000
     354:	40048000 	.word	0x40048000
     358:	00043f82 	.word	0x00043f82
     35c:	2b000001 	.word	0x2b000001
     360:	85000003 	.word	0x85000003
     364:	4007d000 	.word	0x4007d000
     368:	4007e000 	.word	0x4007e000
     36c:	1fff0730 	.word	0x1fff0730
     370:	1fff0ee0 	.word	0x1fff0ee0
     374:	0000db48 	.word	0x0000db48
     378:	1fff66e0 	.word	0x1fff66e0
     37c:	1fff0ee0 	.word	0x1fff0ee0
     380:	00000000 	.word	0x00000000
     384:	1fff0200 	.word	0x1fff0200
     388:	e000e400 	.word	0xe000e400
     38c:	e000e464 	.word	0xe000e464
     390:	40065000 	.word	0x40065000
     394:	40064000 	.word	0x40064000
     398:	02060000 	.word	0x02060000
     39c:	000710c0 	.word	0x000710c0
     3a0:	4003d000 	.word	0x4003d000
     3a4:	0002bf1f 	.word	0x0002bf1f
     3a8:	20200000 	.word	0x20200000
     3ac:	64e4aa34 	.word	0x64e4aa34
     3b0:	4003e000 	.word	0x4003e000
     3b4:	5a94c3a5 	.word	0x5a94c3a5
     3b8:	4007f000 	.word	0x4007f000
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff0ee0 	.word	0x1fff0ee0
     42c:	1fff0ee0 	.word	0x1fff0ee0
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff0ee0 	.word	0x1fff0ee0
     454:	0000db48 	.word	0x0000db48

00000458 <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
#define SIZE_LISTENERS 4

class CANListener {
  public:
    CANListener () { callbacksActive = 0; }
    virtual bool frameHandler (CAN_message_t &frame, int mailbox, uint8_t controller) { return false; }
     458:	2000      	movs	r0, #0
     45a:	4770      	bx	lr

0000045c <flexcan_isr_can0()>:
  if ( _CAN0 ) _CAN0->flexcan_interrupt();
}
#endif
#if defined(__MK66FX1M0__)
static void flexcan_isr_can0() {
  if ( _CAN0 ) _CAN0->flexcan_interrupt();
     45c:	4b03      	ldr	r3, [pc, #12]	; (46c <flexcan_isr_can0()+0x10>)
     45e:	6818      	ldr	r0, [r3, #0]
     460:	b110      	cbz	r0, 468 <flexcan_isr_can0()+0xc>
     462:	6803      	ldr	r3, [r0, #0]
     464:	681b      	ldr	r3, [r3, #0]
     466:	4718      	bx	r3
}
     468:	4770      	bx	lr
     46a:	bf00      	nop
     46c:	1fff6168 	.word	0x1fff6168

00000470 <flexcan_isr_can1()>:
static void flexcan_isr_can1() {
  if ( _CAN1 ) _CAN1->flexcan_interrupt();
     470:	4b03      	ldr	r3, [pc, #12]	; (480 <flexcan_isr_can1()+0x10>)
     472:	6818      	ldr	r0, [r3, #0]
     474:	b110      	cbz	r0, 47c <flexcan_isr_can1()+0xc>
     476:	6803      	ldr	r3, [r0, #0]
     478:	681b      	ldr	r3, [r3, #0]
     47a:	4718      	bx	r3
}
     47c:	4770      	bx	lr
     47e:	bf00      	nop
     480:	1fff616c 	.word	0x1fff616c

00000484 <myClickFunction()>:
}

void myClickFunction(){
    GREEN_LED_state = HIGH;
    //digitalWrite(GREEN_LED, GREEN_LED_state);
    state+=1;
     484:	4a05      	ldr	r2, [pc, #20]	; (49c <myClickFunction()+0x18>)
    GREEN_LED_state = HIGH;
     486:	4906      	ldr	r1, [pc, #24]	; (4a0 <myClickFunction()+0x1c>)
    state+=1;
     488:	7813      	ldrb	r3, [r2, #0]
    GREEN_LED_state = HIGH;
     48a:	2001      	movs	r0, #1
    state+=1;
     48c:	4403      	add	r3, r0
     48e:	b2db      	uxtb	r3, r3
    //Serial.print(state);
    if (state >= NUM_STATES){
     490:	2b03      	cmp	r3, #3
       state = 0;
     492:	bf88      	it	hi
     494:	2300      	movhi	r3, #0
    GREEN_LED_state = HIGH;
     496:	7008      	strb	r0, [r1, #0]
       state = 0;
     498:	7013      	strb	r3, [r2, #0]
    }
}
     49a:	4770      	bx	lr
     49c:	1fff074c 	.word	0x1fff074c
     4a0:	1fff6144 	.word	0x1fff6144

000004a4 <myLongPressStartFunction()>:
  txmsg.len = 8;  
}


void myLongPressStartFunction(){
  BLUE_LED_state = HIGH;
     4a4:	4b01      	ldr	r3, [pc, #4]	; (4ac <myLongPressStartFunction()+0x8>)
     4a6:	2201      	movs	r2, #1
     4a8:	701a      	strb	r2, [r3, #0]
  //digitalWrite(BLUE_LED, BLUE_LED_state);
}
     4aa:	4770      	bx	lr
     4ac:	1fff0f04 	.word	0x1fff0f04

000004b0 <myLongPressStopFunction()>:

void myLongPressStopFunction(){
  BLUE_LED_state = LOW;
     4b0:	4b01      	ldr	r3, [pc, #4]	; (4b8 <myLongPressStopFunction()+0x8>)
     4b2:	2200      	movs	r2, #0
     4b4:	701a      	strb	r2, [r3, #0]
  //digitalWrite(BLUE_LED, BLUE_LED_state);
}
     4b6:	4770      	bx	lr
     4b8:	1fff0f04 	.word	0x1fff0f04

000004bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>:
  currentBitrate = baud;
     4bc:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4c4:	4696      	mov	lr, r2
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     4c6:	4a4a      	ldr	r2, [pc, #296]	; (5f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
  currentBitrate = baud;
     4c8:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     4cc:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     4ce:	6813      	ldr	r3, [r2, #0]
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     4d0:	4d48      	ldr	r5, [pc, #288]	; (5f4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
     4d2:	fbb5 f0f1 	udiv	r0, r5, r1
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     4d6:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     4da:	fbb5 f5f0 	udiv	r5, r5, r0
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     4de:	b090      	sub	sp, #64	; 0x40
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     4e0:	1b4d      	subs	r5, r1, r5
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     4e2:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     4e6:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     4e8:	6813      	ldr	r3, [r2, #0]
     4ea:	01de      	lsls	r6, r3, #7
     4ec:	d5fc      	bpl.n	4e8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x2c>
  while (result > 5) {
     4ee:	2805      	cmp	r0, #5
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     4f0:	f04f 0c00 	mov.w	ip, #0
  while (result > 5) {
     4f4:	d922      	bls.n	53c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x80>
      error = baud - (clockFreq / (result * (divisor + 1)));
     4f6:	4e3f      	ldr	r6, [pc, #252]	; (5f4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     4f8:	4663      	mov	r3, ip
    divisor++;
     4fa:	1c5a      	adds	r2, r3, #1
     4fc:	3302      	adds	r3, #2
    result = clockFreq / baud / (divisor + 1);
     4fe:	fbb0 f7f3 	udiv	r7, r0, r3
    if (result <= 25) {
     502:	2f19      	cmp	r7, #25
      error = baud - (clockFreq / (result * (divisor + 1)));
     504:	fb07 f303 	mul.w	r3, r7, r3
    if (result <= 25) {
     508:	d80f      	bhi.n	52a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
      error = baud - (clockFreq / (result * (divisor + 1)));
     50a:	fbb6 f3f3 	udiv	r3, r6, r3
     50e:	1acb      	subs	r3, r1, r3
     510:	2b00      	cmp	r3, #0
     512:	bfb8      	it	lt
     514:	425b      	neglt	r3, r3
      if (error < bestError) {
     516:	42ab      	cmp	r3, r5
     518:	da09      	bge.n	52e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x72>
     51a:	461d      	mov	r5, r3
        bestDivisor = divisor;
     51c:	4694      	mov	ip, r2
      if ((error == bestError) && (result > 11) && (result < 19)) {
     51e:	2f0b      	cmp	r7, #11
     520:	d906      	bls.n	530 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x74>
     522:	2f12      	cmp	r7, #18
     524:	bf9c      	itt	ls
     526:	461d      	movls	r5, r3
     528:	4694      	movls	ip, r2
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     52a:	4613      	mov	r3, r2
     52c:	e7e5      	b.n	4fa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x3e>
      if ((error == bestError) && (result > 11) && (result < 19)) {
     52e:	d0f6      	beq.n	51e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x62>
  while (result > 5) {
     530:	2f05      	cmp	r7, #5
     532:	d8fa      	bhi.n	52a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
  result = clockFreq / baud / (divisor + 1);
     534:	f10c 0301 	add.w	r3, ip, #1
     538:	fbb0 f0f3 	udiv	r0, r0, r3
  if ((result < 5) || (result > 25) || (bestError > 300)) {
     53c:	3805      	subs	r0, #5
     53e:	2814      	cmp	r0, #20
     540:	d848      	bhi.n	5d4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
     542:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
     546:	dc45      	bgt.n	5d4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     548:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  uint8_t bitTimingTable[21][3] = {
     54c:	4f2a      	ldr	r7, [pc, #168]	; (5f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x13c>)
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     54e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     552:	f100 0340 	add.w	r3, r0, #64	; 0x40
     556:	eb0d 0503 	add.w	r5, sp, r3
  uint8_t bitTimingTable[21][3] = {
     55a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     55c:	466e      	mov	r6, sp
     55e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     560:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     562:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     564:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     566:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     568:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     56c:	c607      	stmia	r6!, {r0, r1, r2}
     56e:	f826 3b02 	strh.w	r3, [r6], #2
     572:	0c1b      	lsrs	r3, r3, #16
     574:	7033      	strb	r3, [r6, #0]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     576:	f815 3c3f 	ldrb.w	r3, [r5, #-63]
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     57a:	f815 2c3e 	ldrb.w	r2, [r5, #-62]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     57e:	f815 1c40 	ldrb.w	r1, [r5, #-64]
     582:	04db      	lsls	r3, r3, #19
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     584:	0412      	lsls	r2, r2, #16
     586:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     58a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
     58e:	4313      	orrs	r3, r2
     590:	f001 0207 	and.w	r2, r1, #7
     594:	4313      	orrs	r3, r2
     596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     59a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
     59e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     5a2:	f8c8 3004 	str.w	r3, [r8, #4]
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     5a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
     5aa:	f1be 0f02 	cmp.w	lr, #2
     5ae:	bf14      	ite	ne
     5b0:	f023 0308 	bicne.w	r3, r3, #8
     5b4:	f043 0308 	orreq.w	r3, r3, #8
     5b8:	f8c8 3004 	str.w	r3, [r8, #4]
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     5bc:	b93c      	cbnz	r4, 5ce <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     5be:	4a0c      	ldr	r2, [pc, #48]	; (5f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     5c0:	6813      	ldr	r3, [r2, #0]
     5c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     5c6:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5c8:	6813      	ldr	r3, [r2, #0]
     5ca:	01db      	lsls	r3, r3, #7
     5cc:	d4fc      	bmi.n	5c8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x10c>
}
     5ce:	b010      	add	sp, #64	; 0x40
     5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     5d4:	2c00      	cmp	r4, #0
     5d6:	d1fa      	bne.n	5ce <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     5d8:	4a05      	ldr	r2, [pc, #20]	; (5f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     5da:	6813      	ldr	r3, [r2, #0]
     5dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     5e0:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5e2:	6813      	ldr	r3, [r2, #0]
     5e4:	01d9      	lsls	r1, r3, #7
     5e6:	d4fc      	bmi.n	5e2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x126>
}
     5e8:	b010      	add	sp, #64	; 0x40
     5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5ee:	bf00      	nop
     5f0:	400a4000 	.word	0x400a4000
     5f4:	00f42400 	.word	0x00f42400
     5f8:	0000d42c 	.word	0x0000d42c

000005fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>:
  currentBitrate = baud;
     5fc:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     604:	4696      	mov	lr, r2
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     606:	4a4a      	ldr	r2, [pc, #296]	; (730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
  currentBitrate = baud;
     608:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     60c:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     60e:	6813      	ldr	r3, [r2, #0]
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     610:	4d48      	ldr	r5, [pc, #288]	; (734 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
     612:	fbb5 f0f1 	udiv	r0, r5, r1
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     616:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     61a:	fbb5 f5f0 	udiv	r5, r5, r0
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     61e:	b090      	sub	sp, #64	; 0x40
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     620:	1b4d      	subs	r5, r1, r5
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     622:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     626:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     628:	6813      	ldr	r3, [r2, #0]
     62a:	01de      	lsls	r6, r3, #7
     62c:	d5fc      	bpl.n	628 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x2c>
  while (result > 5) {
     62e:	2805      	cmp	r0, #5
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     630:	f04f 0c00 	mov.w	ip, #0
  while (result > 5) {
     634:	d922      	bls.n	67c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x80>
      error = baud - (clockFreq / (result * (divisor + 1)));
     636:	4e3f      	ldr	r6, [pc, #252]	; (734 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     638:	4663      	mov	r3, ip
    divisor++;
     63a:	1c5a      	adds	r2, r3, #1
     63c:	3302      	adds	r3, #2
    result = clockFreq / baud / (divisor + 1);
     63e:	fbb0 f7f3 	udiv	r7, r0, r3
    if (result <= 25) {
     642:	2f19      	cmp	r7, #25
      error = baud - (clockFreq / (result * (divisor + 1)));
     644:	fb07 f303 	mul.w	r3, r7, r3
    if (result <= 25) {
     648:	d80f      	bhi.n	66a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
      error = baud - (clockFreq / (result * (divisor + 1)));
     64a:	fbb6 f3f3 	udiv	r3, r6, r3
     64e:	1acb      	subs	r3, r1, r3
     650:	2b00      	cmp	r3, #0
     652:	bfb8      	it	lt
     654:	425b      	neglt	r3, r3
      if (error < bestError) {
     656:	42ab      	cmp	r3, r5
     658:	da09      	bge.n	66e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x72>
     65a:	461d      	mov	r5, r3
        bestDivisor = divisor;
     65c:	4694      	mov	ip, r2
      if ((error == bestError) && (result > 11) && (result < 19)) {
     65e:	2f0b      	cmp	r7, #11
     660:	d906      	bls.n	670 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x74>
     662:	2f12      	cmp	r7, #18
     664:	bf9c      	itt	ls
     666:	461d      	movls	r5, r3
     668:	4694      	movls	ip, r2
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     66a:	4613      	mov	r3, r2
     66c:	e7e5      	b.n	63a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x3e>
      if ((error == bestError) && (result > 11) && (result < 19)) {
     66e:	d0f6      	beq.n	65e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x62>
  while (result > 5) {
     670:	2f05      	cmp	r7, #5
     672:	d8fa      	bhi.n	66a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
  result = clockFreq / baud / (divisor + 1);
     674:	f10c 0301 	add.w	r3, ip, #1
     678:	fbb0 f0f3 	udiv	r0, r0, r3
  if ((result < 5) || (result > 25) || (bestError > 300)) {
     67c:	3805      	subs	r0, #5
     67e:	2814      	cmp	r0, #20
     680:	d848      	bhi.n	714 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
     682:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
     686:	dc45      	bgt.n	714 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     688:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  uint8_t bitTimingTable[21][3] = {
     68c:	4f2a      	ldr	r7, [pc, #168]	; (738 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x13c>)
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     68e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     692:	f100 0340 	add.w	r3, r0, #64	; 0x40
     696:	eb0d 0503 	add.w	r5, sp, r3
  uint8_t bitTimingTable[21][3] = {
     69a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     69c:	466e      	mov	r6, sp
     69e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     6a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     6a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     6a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     6a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     6a8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     6ac:	c607      	stmia	r6!, {r0, r1, r2}
     6ae:	f826 3b02 	strh.w	r3, [r6], #2
     6b2:	0c1b      	lsrs	r3, r3, #16
     6b4:	7033      	strb	r3, [r6, #0]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     6b6:	f815 3c3f 	ldrb.w	r3, [r5, #-63]
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     6ba:	f815 2c3e 	ldrb.w	r2, [r5, #-62]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     6be:	f815 1c40 	ldrb.w	r1, [r5, #-64]
     6c2:	04db      	lsls	r3, r3, #19
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     6c4:	0412      	lsls	r2, r2, #16
     6c6:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     6ca:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
     6ce:	4313      	orrs	r3, r2
     6d0:	f001 0207 	and.w	r2, r1, #7
     6d4:	4313      	orrs	r3, r2
     6d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     6da:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
     6de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     6e2:	f8c8 3004 	str.w	r3, [r8, #4]
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     6e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
     6ea:	f1be 0f02 	cmp.w	lr, #2
     6ee:	bf14      	ite	ne
     6f0:	f023 0308 	bicne.w	r3, r3, #8
     6f4:	f043 0308 	orreq.w	r3, r3, #8
     6f8:	f8c8 3004 	str.w	r3, [r8, #4]
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     6fc:	b93c      	cbnz	r4, 70e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     6fe:	4a0c      	ldr	r2, [pc, #48]	; (730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     700:	6813      	ldr	r3, [r2, #0]
     702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     706:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     708:	6813      	ldr	r3, [r2, #0]
     70a:	01db      	lsls	r3, r3, #7
     70c:	d4fc      	bmi.n	708 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x10c>
}
     70e:	b010      	add	sp, #64	; 0x40
     710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     714:	2c00      	cmp	r4, #0
     716:	d1fa      	bne.n	70e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     718:	4a05      	ldr	r2, [pc, #20]	; (730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     71a:	6813      	ldr	r3, [r2, #0]
     71c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     720:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     722:	6813      	ldr	r3, [r2, #0]
     724:	01d9      	lsls	r1, r3, #7
     726:	d4fc      	bmi.n	722 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x126>
}
     728:	b010      	add	sp, #64	; 0x40
     72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     72e:	bf00      	nop
     730:	40024000 	.word	0x40024000
     734:	00f42400 	.word	0x00f42400
     738:	0000d42c 	.word	0x0000d42c

0000073c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CANFD_message_t const&)>:
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3); /* input 3 ID's to be filtered */
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4); /* input 4 ID's to be filtered */
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4, uint32_t id5); /* input 5 ID's to be filtered */
    bool setMBFilterRange(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2); /* filter a range of ids */
    int write(const CAN_message_t &msg); /* use any available mailbox for transmitting */
    int write(const CANFD_message_t &msg) { return 0; } /* to satisfy base class for external pointers */
     73c:	2000      	movs	r0, #0
     73e:	4770      	bx	lr

00000740 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::isFD()>:
    bool isFD() { return 0; }
     740:	2000      	movs	r0, #0
     742:	4770      	bx	lr

00000744 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBoxSize()>:
#endif
    void enhanceFilter(FLEXCAN_MAILBOX mb_num);
    void distribute(bool state = 1) { distribution = state; }
    void enableDMA(bool state = 1);
    void disableDMA() { enableDMA(0); }
    uint8_t getFirstTxBoxSize(){ return 8; }
     744:	2008      	movs	r0, #8
     746:	4770      	bx	lr

00000748 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CANFD_message_t const&)>:
    int write(const CANFD_message_t &msg) { return 0; } /* to satisfy base class for external pointers */
     748:	2000      	movs	r0, #0
     74a:	4770      	bx	lr

0000074c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::isFD()>:
    bool isFD() { return 0; }
     74c:	2000      	movs	r0, #0
     74e:	4770      	bx	lr

00000750 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBoxSize()>:
    uint8_t getFirstTxBoxSize(){ return 8; }
     750:	2008      	movs	r0, #8
     752:	4770      	bx	lr

00000754 <getTeensy3Time()>:
time_t getTeensy3Time(){
     754:	b500      	push	{lr}
     756:	b083      	sub	sp, #12
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
     758:	f004 fcca 	bl	50f0 <micros>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     75c:	4b06      	ldr	r3, [pc, #24]	; (778 <getTeensy3Time()+0x24>)
  return millis()/1000;
     75e:	4a07      	ldr	r2, [pc, #28]	; (77c <getTeensy3Time()+0x28>)
     760:	681b      	ldr	r3, [r3, #0]
     762:	9301      	str	r3, [sp, #4]
	return ret;
     764:	9b01      	ldr	r3, [sp, #4]
     766:	4906      	ldr	r1, [pc, #24]	; (780 <getTeensy3Time()+0x2c>)
     768:	fba2 2303 	umull	r2, r3, r2, r3
     76c:	6008      	str	r0, [r1, #0]
}
     76e:	0998      	lsrs	r0, r3, #6
     770:	2100      	movs	r1, #0
     772:	b003      	add	sp, #12
     774:	f85d fb04 	ldr.w	pc, [sp], #4
     778:	1fff628c 	.word	0x1fff628c
     77c:	10624dd3 	.word	0x10624dd3
     780:	1fff61f4 	.word	0x1fff61f4

00000784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>:
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     784:	4910      	ldr	r1, [pc, #64]	; (7c8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     786:	680b      	ldr	r3, [r1, #0]
     788:	6b48      	ldr	r0, [r1, #52]	; 0x34
  if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
     78a:	680a      	ldr	r2, [r1, #0]
     78c:	6b49      	ldr	r1, [r1, #52]	; 0x34
     78e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     792:	f3c1 6103 	ubfx	r1, r1, #24, #4
     796:	3201      	adds	r2, #1
     798:	3104      	adds	r1, #4
     79a:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
     79e:	d310      	bcc.n	7c2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x3e>
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     7a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     7a4:	f3c0 6003 	ubfx	r0, r0, #24, #4
     7a8:	3b05      	subs	r3, #5
     7aa:	3001      	adds	r0, #1
     7ac:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  return (FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes); /* otherwise return offset MB position after FIFO area */
     7b0:	b2db      	uxtb	r3, r3
     7b2:	4a05      	ldr	r2, [pc, #20]	; (7c8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     7b4:	6810      	ldr	r0, [r2, #0]
     7b6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     7ba:	3001      	adds	r0, #1
     7bc:	1ac0      	subs	r0, r0, r3
}
     7be:	b2c0      	uxtb	r0, r0
     7c0:	4770      	bx	lr
     7c2:	2300      	movs	r3, #0
     7c4:	e7f5      	b.n	7b2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x2e>
     7c6:	bf00      	nop
     7c8:	40024000 	.word	0x40024000

000007cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>:
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     7cc:	4910      	ldr	r1, [pc, #64]	; (810 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     7ce:	680b      	ldr	r3, [r1, #0]
     7d0:	6b48      	ldr	r0, [r1, #52]	; 0x34
  if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
     7d2:	680a      	ldr	r2, [r1, #0]
     7d4:	6b49      	ldr	r1, [r1, #52]	; 0x34
     7d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     7da:	f3c1 6103 	ubfx	r1, r1, #24, #4
     7de:	3201      	adds	r2, #1
     7e0:	3104      	adds	r1, #4
     7e2:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
     7e6:	d310      	bcc.n	80a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x3e>
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     7ec:	f3c0 6003 	ubfx	r0, r0, #24, #4
     7f0:	3b05      	subs	r3, #5
     7f2:	3001      	adds	r0, #1
     7f4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  return (FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes); /* otherwise return offset MB position after FIFO area */
     7f8:	b2db      	uxtb	r3, r3
     7fa:	4a05      	ldr	r2, [pc, #20]	; (810 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     7fc:	6810      	ldr	r0, [r2, #0]
     7fe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     802:	3001      	adds	r0, #1
     804:	1ac0      	subs	r0, r0, r3
}
     806:	b2c0      	uxtb	r0, r0
     808:	4770      	bx	lr
     80a:	2300      	movs	r3, #0
     80c:	e7f5      	b.n	7fa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x2e>
     80e:	bf00      	nop
     810:	400a4000 	.word	0x400a4000

00000814 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>:
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     814:	4a62      	ldr	r2, [pc, #392]	; (9a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
     816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     81a:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     81c:	6813      	ldr	r3, [r2, #0]
     81e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     822:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     826:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     828:	6813      	ldr	r3, [r2, #0]
     82a:	01dd      	lsls	r5, r3, #7
     82c:	d5fc      	bpl.n	828 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x14>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     82e:	6811      	ldr	r1, [r2, #0]
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     830:	f8df c174 	ldr.w	ip, [pc, #372]	; 9a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     834:	4f5b      	ldr	r7, [pc, #364]	; (9a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     836:	4e5a      	ldr	r6, [pc, #360]	; (9a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
  FLEXCANb_IMASK1(_bus) = value;
     838:	2300      	movs	r3, #0
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     83a:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
     83e:	6011      	str	r1, [r2, #0]
  FLEXCANb_IMASK1(_bus) = value;
     840:	6293      	str	r3, [r2, #40]	; 0x28
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     842:	6812      	ldr	r2, [r2, #0]
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     844:	4619      	mov	r1, r3
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     846:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     84a:	19dd      	adds	r5, r3, r7
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     84c:	0112      	lsls	r2, r2, #4
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     84e:	00ad      	lsls	r5, r5, #2
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     850:	60d1      	str	r1, [r2, #12]
     852:	6091      	str	r1, [r2, #8]
     854:	6051      	str	r1, [r2, #4]
     856:	6011      	str	r1, [r2, #0]
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     858:	6029      	str	r1, [r5, #0]
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     85a:	6832      	ldr	r2, [r6, #0]
     85c:	3301      	adds	r3, #1
     85e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     862:	b2db      	uxtb	r3, r3
     864:	3201      	adds	r2, #1
     866:	4293      	cmp	r3, r2
     868:	d3ed      	bcc.n	846 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x32>
  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
     86a:	64b1      	str	r1, [r6, #72]	; 0x48
     86c:	6131      	str	r1, [r6, #16]
  return FLEXCANb_IFLAG1(_bus);
     86e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
     870:	6333      	str	r3, [r6, #48]	; 0x30
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     872:	6833      	ldr	r3, [r6, #0]
  if ( status ) {
     874:	2800      	cmp	r0, #0
     876:	d14b      	bne.n	910 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xfc>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     878:	f8df 812c 	ldr.w	r8, [pc, #300]	; 9a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     87c:	4e48      	ldr	r6, [pc, #288]	; (9a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     87e:	4f49      	ldr	r7, [pc, #292]	; (9a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     880:	4605      	mov	r5, r0
     882:	e019      	b.n	8b8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xa4>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
     884:	6833      	ldr	r3, [r6, #0]
     886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     88a:	3301      	adds	r3, #1
     88c:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
     890:	bf34      	ite	cc
     892:	f04f 6380 	movcc.w	r3, #67108864	; 0x4000000
     896:	f04f 638c 	movcs.w	r3, #73400320	; 0x4600000
     89a:	6013      	str	r3, [r2, #0]
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     89c:	6b73      	ldr	r3, [r6, #52]	; 0x34
     89e:	f3c3 4300 	ubfx	r3, r3, #16, #1
     8a2:	079b      	lsls	r3, r3, #30
     8a4:	600b      	str	r3, [r1, #0]
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     8a6:	6833      	ldr	r3, [r6, #0]
     8a8:	3501      	adds	r5, #1
     8aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     8ae:	b2ed      	uxtb	r5, r5
     8b0:	3301      	adds	r3, #1
     8b2:	429d      	cmp	r5, r3
     8b4:	4628      	mov	r0, r5
     8b6:	d220      	bcs.n	8fa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     8b8:	6833      	ldr	r3, [r6, #0]
     8ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     8be:	3301      	adds	r3, #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     8c0:	19e9      	adds	r1, r5, r7
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     8c2:	eb05 0208 	add.w	r2, r5, r8
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     8c6:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     8ca:	ea4f 0181 	mov.w	r1, r1, lsl #2
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     8ce:	ea4f 1202 	mov.w	r2, r2, lsl #4
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     8d2:	d3d7      	bcc.n	884 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x70>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     8d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     8d8:	6013      	str	r3, [r2, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     8da:	6833      	ldr	r3, [r6, #0]
     8dc:	009a      	lsls	r2, r3, #2
     8de:	d503      	bpl.n	8e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xd4>
     8e0:	f7ff ff50 	bl	784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     8e4:	42a8      	cmp	r0, r5
     8e6:	d8de      	bhi.n	8a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     8e8:	2301      	movs	r3, #1
     8ea:	2d1f      	cmp	r5, #31
     8ec:	fa03 f305 	lsl.w	r3, r3, r5
     8f0:	d84c      	bhi.n	98c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x178>
     8f2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     8f4:	4313      	orrs	r3, r2
     8f6:	62b3      	str	r3, [r6, #40]	; 0x28
     8f8:	e7d5      	b.n	8a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     8fa:	b93c      	cbnz	r4, 90c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf8>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     8fc:	4a28      	ldr	r2, [pc, #160]	; (9a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
     8fe:	6813      	ldr	r3, [r2, #0]
     900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     904:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     906:	6813      	ldr	r3, [r2, #0]
     908:	01db      	lsls	r3, r3, #7
     90a:	d4fc      	bmi.n	906 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf2>
}
     90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     910:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     914:	6033      	str	r3, [r6, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     916:	6835      	ldr	r5, [r6, #0]
     918:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
     91c:	d03e      	beq.n	99c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x188>
     91e:	f7ff ff31 	bl	784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     922:	6833      	ldr	r3, [r6, #0]
     924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     928:	3301      	adds	r3, #1
     92a:	4283      	cmp	r3, r0
     92c:	4605      	mov	r5, r0
     92e:	d9e4      	bls.n	8fa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     930:	4f1d      	ldr	r7, [pc, #116]	; (9a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>)
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     932:	f8df 806c 	ldr.w	r8, [pc, #108]	; 9a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     936:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
     93a:	e00d      	b.n	958 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x144>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     93c:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     940:	4313      	orrs	r3, r2
     942:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     946:	f8d8 3000 	ldr.w	r3, [r8]
     94a:	3501      	adds	r5, #1
     94c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     950:	b2ed      	uxtb	r5, r5
     952:	3301      	adds	r3, #1
     954:	429d      	cmp	r5, r3
     956:	d2d0      	bcs.n	8fa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     958:	19eb      	adds	r3, r5, r7
     95a:	011b      	lsls	r3, r3, #4
     95c:	601e      	str	r6, [r3, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     95e:	f8d8 3000 	ldr.w	r3, [r8]
     962:	0099      	lsls	r1, r3, #2
     964:	d503      	bpl.n	96e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x15a>
     966:	f7ff ff0d 	bl	784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     96a:	4285      	cmp	r5, r0
     96c:	d3eb      	bcc.n	946 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     96e:	2301      	movs	r3, #1
     970:	2d1f      	cmp	r5, #31
     972:	fa03 f305 	lsl.w	r3, r3, r5
     976:	d9e1      	bls.n	93c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x128>
  else (( set ) ? FLEXCANb_IMASK2(_bus) |= (1UL << (mb_num - 32)) : FLEXCANb_IMASK2(_bus) &= ~(1UL << (mb_num - 32)));
     978:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
     97c:	2301      	movs	r3, #1
     97e:	f1a5 0120 	sub.w	r1, r5, #32
     982:	408b      	lsls	r3, r1
     984:	4313      	orrs	r3, r2
     986:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
     98a:	e7dc      	b.n	946 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
     98c:	6a72      	ldr	r2, [r6, #36]	; 0x24
     98e:	f1a5 0120 	sub.w	r1, r5, #32
     992:	2301      	movs	r3, #1
     994:	408b      	lsls	r3, r1
     996:	4313      	orrs	r3, r2
     998:	6273      	str	r3, [r6, #36]	; 0x24
     99a:	e784      	b.n	8a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     99c:	6833      	ldr	r3, [r6, #0]
     99e:	e7c7      	b.n	930 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x11c>
     9a0:	40024000 	.word	0x40024000
     9a4:	10009220 	.word	0x10009220
     9a8:	04002408 	.word	0x04002408

000009ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>:
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     9ac:	4a62      	ldr	r2, [pc, #392]	; (b38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
     9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     9b2:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     9b4:	6813      	ldr	r3, [r2, #0]
     9b6:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     9ba:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     9be:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     9c0:	6813      	ldr	r3, [r2, #0]
     9c2:	01dd      	lsls	r5, r3, #7
     9c4:	d5fc      	bpl.n	9c0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x14>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     9c6:	6811      	ldr	r1, [r2, #0]
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     9c8:	f8df c174 	ldr.w	ip, [pc, #372]	; b40 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     9cc:	4f5b      	ldr	r7, [pc, #364]	; (b3c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     9ce:	4e5a      	ldr	r6, [pc, #360]	; (b38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
  FLEXCANb_IMASK1(_bus) = value;
     9d0:	2300      	movs	r3, #0
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     9d2:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
     9d6:	6011      	str	r1, [r2, #0]
  FLEXCANb_IMASK1(_bus) = value;
     9d8:	6293      	str	r3, [r2, #40]	; 0x28
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     9da:	6812      	ldr	r2, [r2, #0]
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     9dc:	4619      	mov	r1, r3
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     9de:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     9e2:	19dd      	adds	r5, r3, r7
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     9e4:	0112      	lsls	r2, r2, #4
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     9e6:	00ad      	lsls	r5, r5, #2
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     9e8:	60d1      	str	r1, [r2, #12]
     9ea:	6091      	str	r1, [r2, #8]
     9ec:	6051      	str	r1, [r2, #4]
     9ee:	6011      	str	r1, [r2, #0]
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     9f0:	6029      	str	r1, [r5, #0]
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     9f2:	6832      	ldr	r2, [r6, #0]
     9f4:	3301      	adds	r3, #1
     9f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     9fa:	b2db      	uxtb	r3, r3
     9fc:	3201      	adds	r2, #1
     9fe:	4293      	cmp	r3, r2
     a00:	d3ed      	bcc.n	9de <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x32>
  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
     a02:	64b1      	str	r1, [r6, #72]	; 0x48
     a04:	6131      	str	r1, [r6, #16]
  return FLEXCANb_IFLAG1(_bus);
     a06:	6b33      	ldr	r3, [r6, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
     a08:	6333      	str	r3, [r6, #48]	; 0x30
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     a0a:	6833      	ldr	r3, [r6, #0]
  if ( status ) {
     a0c:	2800      	cmp	r0, #0
     a0e:	d14b      	bne.n	aa8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xfc>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     a10:	f8df 812c 	ldr.w	r8, [pc, #300]	; b40 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a14:	4e48      	ldr	r6, [pc, #288]	; (b38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     a16:	4f49      	ldr	r7, [pc, #292]	; (b3c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     a18:	4605      	mov	r5, r0
     a1a:	e019      	b.n	a50 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xa4>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
     a1c:	6833      	ldr	r3, [r6, #0]
     a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a22:	3301      	adds	r3, #1
     a24:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
     a28:	bf34      	ite	cc
     a2a:	f04f 6380 	movcc.w	r3, #67108864	; 0x4000000
     a2e:	f04f 638c 	movcs.w	r3, #73400320	; 0x4600000
     a32:	6013      	str	r3, [r2, #0]
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     a34:	6b73      	ldr	r3, [r6, #52]	; 0x34
     a36:	f3c3 4300 	ubfx	r3, r3, #16, #1
     a3a:	079b      	lsls	r3, r3, #30
     a3c:	600b      	str	r3, [r1, #0]
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     a3e:	6833      	ldr	r3, [r6, #0]
     a40:	3501      	adds	r5, #1
     a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a46:	b2ed      	uxtb	r5, r5
     a48:	3301      	adds	r3, #1
     a4a:	429d      	cmp	r5, r3
     a4c:	4628      	mov	r0, r5
     a4e:	d220      	bcs.n	a92 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a50:	6833      	ldr	r3, [r6, #0]
     a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a56:	3301      	adds	r3, #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     a58:	19e9      	adds	r1, r5, r7
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     a5a:	eb05 0208 	add.w	r2, r5, r8
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a5e:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     a62:	ea4f 0181 	mov.w	r1, r1, lsl #2
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     a66:	ea4f 1202 	mov.w	r2, r2, lsl #4
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a6a:	d3d7      	bcc.n	a1c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x70>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     a70:	6013      	str	r3, [r2, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     a72:	6833      	ldr	r3, [r6, #0]
     a74:	009a      	lsls	r2, r3, #2
     a76:	d503      	bpl.n	a80 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xd4>
     a78:	f7ff fea8 	bl	7cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     a7c:	42a8      	cmp	r0, r5
     a7e:	d8de      	bhi.n	a3e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     a80:	2301      	movs	r3, #1
     a82:	2d1f      	cmp	r5, #31
     a84:	fa03 f305 	lsl.w	r3, r3, r5
     a88:	d84c      	bhi.n	b24 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x178>
     a8a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     a8c:	4313      	orrs	r3, r2
     a8e:	62b3      	str	r3, [r6, #40]	; 0x28
     a90:	e7d5      	b.n	a3e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     a92:	b93c      	cbnz	r4, aa4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf8>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     a94:	4a28      	ldr	r2, [pc, #160]	; (b38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
     a96:	6813      	ldr	r3, [r2, #0]
     a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     a9c:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     a9e:	6813      	ldr	r3, [r2, #0]
     aa0:	01db      	lsls	r3, r3, #7
     aa2:	d4fc      	bmi.n	a9e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf2>
}
     aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     aa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     aac:	6033      	str	r3, [r6, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     aae:	6835      	ldr	r5, [r6, #0]
     ab0:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
     ab4:	d03e      	beq.n	b34 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x188>
     ab6:	f7ff fe89 	bl	7cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     aba:	6833      	ldr	r3, [r6, #0]
     abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     ac0:	3301      	adds	r3, #1
     ac2:	4283      	cmp	r3, r0
     ac4:	4605      	mov	r5, r0
     ac6:	d9e4      	bls.n	a92 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     ac8:	4f1d      	ldr	r7, [pc, #116]	; (b40 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>)
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     aca:	f8df 806c 	ldr.w	r8, [pc, #108]	; b38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     ace:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
     ad2:	e00d      	b.n	af0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x144>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     ad4:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     ad8:	4313      	orrs	r3, r2
     ada:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     ade:	f8d8 3000 	ldr.w	r3, [r8]
     ae2:	3501      	adds	r5, #1
     ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     ae8:	b2ed      	uxtb	r5, r5
     aea:	3301      	adds	r3, #1
     aec:	429d      	cmp	r5, r3
     aee:	d2d0      	bcs.n	a92 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     af0:	19eb      	adds	r3, r5, r7
     af2:	011b      	lsls	r3, r3, #4
     af4:	601e      	str	r6, [r3, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     af6:	f8d8 3000 	ldr.w	r3, [r8]
     afa:	0099      	lsls	r1, r3, #2
     afc:	d503      	bpl.n	b06 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x15a>
     afe:	f7ff fe65 	bl	7cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     b02:	4285      	cmp	r5, r0
     b04:	d3eb      	bcc.n	ade <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     b06:	2301      	movs	r3, #1
     b08:	2d1f      	cmp	r5, #31
     b0a:	fa03 f305 	lsl.w	r3, r3, r5
     b0e:	d9e1      	bls.n	ad4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x128>
  else (( set ) ? FLEXCANb_IMASK2(_bus) |= (1UL << (mb_num - 32)) : FLEXCANb_IMASK2(_bus) &= ~(1UL << (mb_num - 32)));
     b10:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
     b14:	2301      	movs	r3, #1
     b16:	f1a5 0120 	sub.w	r1, r5, #32
     b1a:	408b      	lsls	r3, r1
     b1c:	4313      	orrs	r3, r2
     b1e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
     b22:	e7dc      	b.n	ade <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
     b24:	6a72      	ldr	r2, [r6, #36]	; 0x24
     b26:	f1a5 0120 	sub.w	r1, r5, #32
     b2a:	2301      	movs	r3, #1
     b2c:	408b      	lsls	r3, r1
     b2e:	4313      	orrs	r3, r2
     b30:	6273      	str	r3, [r6, #36]	; 0x24
     b32:	e784      	b.n	a3e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     b34:	6833      	ldr	r3, [r6, #0]
     b36:	e7c7      	b.n	ac8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x11c>
     b38:	400a4000 	.word	0x400a4000
     b3c:	10029220 	.word	0x10029220
     b40:	0400a408 	.word	0x0400a408
     b44:	ffffffff 	.word	0xffffffff

00000b48 <printCAN(CAN_message_t const&, unsigned char)>:
  YELLOW_LED_state = !YELLOW_LED_state;
  //digitalWrite(YELLOW_LED,YELLOW_LED_state);
  printCAN(msg,1);
}

void printCAN(const CAN_message_t &msg,uint8_t channel){
     b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  char channel_string[5] = {'c','a','n',' ',0};
     b4c:	4b2c      	ldr	r3, [pc, #176]	; (c00 <printCAN(CAN_message_t const&, unsigned char)+0xb8>)
void printCAN(const CAN_message_t &msg,uint8_t channel){
     b4e:	4605      	mov	r5, r0
     b50:	460c      	mov	r4, r1
  char channel_string[5] = {'c','a','n',' ',0};
     b52:	e893 0003 	ldmia.w	r3, {r0, r1}
void printCAN(const CAN_message_t &msg,uint8_t channel){
     b56:	b086      	sub	sp, #24
  char channel_string[5] = {'c','a','n',' ',0};
     b58:	9004      	str	r0, [sp, #16]
     b5a:	f88d 1014 	strb.w	r1, [sp, #20]
  double timestamp = double(now()) + double(microsecondsPerSecond)/1000000.0;
     b5e:	f003 fe67 	bl	4830 <now()>
     b62:	4607      	mov	r7, r0
     b64:	4688      	mov	r8, r1
	operator unsigned long () const { return micros() - us; }
     b66:	f004 fac3 	bl	50f0 <micros>
     b6a:	4b26      	ldr	r3, [pc, #152]	; (c04 <printCAN(CAN_message_t const&, unsigned char)+0xbc>)
     b6c:	681b      	ldr	r3, [r3, #0]
     b6e:	1ac0      	subs	r0, r0, r3
     b70:	f005 fc06 	bl	6380 <__aeabi_ui2d>
     b74:	a320      	add	r3, pc, #128	; (adr r3, bf8 <printCAN(CAN_message_t const&, unsigned char)+0xb0>)
     b76:	e9d3 2300 	ldrd	r2, r3, [r3]
     b7a:	f005 fda5 	bl	66c8 <__aeabi_ddiv>
     b7e:	4602      	mov	r2, r0
     b80:	4638      	mov	r0, r7
     b82:	460f      	mov	r7, r1
     b84:	4641      	mov	r1, r8
     b86:	4616      	mov	r6, r2
     b88:	f005 fc46 	bl	6418 <__aeabi_l2d>
     b8c:	4602      	mov	r2, r0
     b8e:	460b      	mov	r3, r1
     b90:	4630      	mov	r0, r6
     b92:	4639      	mov	r1, r7
     b94:	f005 fab8 	bl	6108 <__adddf3>
     b98:	4602      	mov	r2, r0
     b9a:	460b      	mov	r3, r1
  if (channel == 0) channel_string[3] = '0';
     b9c:	bb1c      	cbnz	r4, be6 <printCAN(CAN_message_t const&, unsigned char)+0x9e>
     b9e:	2130      	movs	r1, #48	; 0x30
     ba0:	f88d 1013 	strb.w	r1, [sp, #19]
  else if (channel == 1) channel_string[3] = '1';
  Serial.printf("(%0.6f) %s %08X [%d]",timestamp,channel_string,msg.id,msg.len); 
     ba4:	7ae8      	ldrb	r0, [r5, #11]
     ba6:	6829      	ldr	r1, [r5, #0]
     ba8:	9002      	str	r0, [sp, #8]
     baa:	a804      	add	r0, sp, #16
     bac:	9101      	str	r1, [sp, #4]
     bae:	9000      	str	r0, [sp, #0]
     bb0:	4915      	ldr	r1, [pc, #84]	; (c08 <printCAN(CAN_message_t const&, unsigned char)+0xc0>)
     bb2:	4816      	ldr	r0, [pc, #88]	; (c0c <printCAN(CAN_message_t const&, unsigned char)+0xc4>)
     bb4:	f003 fff6 	bl	4ba4 <Print::printf(char const*, ...)>
  for ( uint8_t i = 0; i < msg.len; i++ ) {
     bb8:	7aeb      	ldrb	r3, [r5, #11]
     bba:	b173      	cbz	r3, bda <printCAN(CAN_message_t const&, unsigned char)+0x92>
     bbc:	2400      	movs	r4, #0
    Serial.printf(" %02X",msg.buf[i]); 
     bbe:	4f14      	ldr	r7, [pc, #80]	; (c10 <printCAN(CAN_message_t const&, unsigned char)+0xc8>)
     bc0:	4e12      	ldr	r6, [pc, #72]	; (c0c <printCAN(CAN_message_t const&, unsigned char)+0xc4>)
     bc2:	4623      	mov	r3, r4
     bc4:	442b      	add	r3, r5
     bc6:	4639      	mov	r1, r7
     bc8:	7b1a      	ldrb	r2, [r3, #12]
     bca:	4630      	mov	r0, r6
     bcc:	f003 ffea 	bl	4ba4 <Print::printf(char const*, ...)>
  for ( uint8_t i = 0; i < msg.len; i++ ) {
     bd0:	3401      	adds	r4, #1
     bd2:	7aea      	ldrb	r2, [r5, #11]
     bd4:	b2e3      	uxtb	r3, r4
     bd6:	429a      	cmp	r2, r3
     bd8:	d8f4      	bhi.n	bc4 <printCAN(CAN_message_t const&, unsigned char)+0x7c>
  } 
  Serial.println();
     bda:	480c      	ldr	r0, [pc, #48]	; (c0c <printCAN(CAN_message_t const&, unsigned char)+0xc4>)
     bdc:	f003 ffca 	bl	4b74 <Print::println()>
}
     be0:	b006      	add	sp, #24
     be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (channel == 1) channel_string[3] = '1';
     be6:	2c01      	cmp	r4, #1
     be8:	bf04      	itt	eq
     bea:	2131      	moveq	r1, #49	; 0x31
     bec:	f88d 1013 	strbeq.w	r1, [sp, #19]
     bf0:	e7d8      	b.n	ba4 <printCAN(CAN_message_t const&, unsigned char)+0x5c>
     bf2:	bf00      	nop
     bf4:	f3af 8000 	nop.w
     bf8:	00000000 	.word	0x00000000
     bfc:	412e8480 	.word	0x412e8480
     c00:	0000d05c 	.word	0x0000d05c
     c04:	1fff61f4 	.word	0x1fff61f4
     c08:	0000d03c 	.word	0x0000d03c
     c0c:	1fff0770 	.word	0x1fff0770
     c10:	0000d054 	.word	0x0000d054

00000c14 <processCan0(CAN_message_t const&)>:
void processCan0(const CAN_message_t &msg) {
     c14:	b410      	push	{r4}
  RXCount0++;
     c16:	490b      	ldr	r1, [pc, #44]	; (c44 <processCan0(CAN_message_t const&)+0x30>)
  RED_LED_state = !RED_LED_state;
     c18:	4a0b      	ldr	r2, [pc, #44]	; (c48 <processCan0(CAN_message_t const&)+0x34>)
  RXCount0++;
     c1a:	680b      	ldr	r3, [r1, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c1c:	4c0b      	ldr	r4, [pc, #44]	; (c4c <processCan0(CAN_message_t const&)+0x38>)
     c1e:	3301      	adds	r3, #1
void processCan0(const CAN_message_t &msg) {
     c20:	b083      	sub	sp, #12
  RXCount0++;
     c22:	600b      	str	r3, [r1, #0]
  RED_LED_state = !RED_LED_state;
     c24:	7813      	ldrb	r3, [r2, #0]
     c26:	6824      	ldr	r4, [r4, #0]
     c28:	9401      	str	r4, [sp, #4]
     c2a:	f083 0301 	eor.w	r3, r3, #1
	return ret;
     c2e:	9c01      	ldr	r4, [sp, #4]
     c30:	7013      	strb	r3, [r2, #0]
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
     c32:	4b07      	ldr	r3, [pc, #28]	; (c50 <processCan0(CAN_message_t const&)+0x3c>)
  printCAN(msg,0);
     c34:	2100      	movs	r1, #0
     c36:	601c      	str	r4, [r3, #0]
}
     c38:	b003      	add	sp, #12
     c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
  printCAN(msg,0);
     c3e:	f7ff bf83 	b.w	b48 <printCAN(CAN_message_t const&, unsigned char)>
     c42:	bf00      	nop
     c44:	1fff6150 	.word	0x1fff6150
     c48:	1fff614c 	.word	0x1fff614c
     c4c:	1fff628c 	.word	0x1fff628c
     c50:	1fff6158 	.word	0x1fff6158

00000c54 <processCan1(CAN_message_t const&)>:
void processCan1(const CAN_message_t &msg) {
     c54:	b410      	push	{r4}
  RXCount1++;
     c56:	490a      	ldr	r1, [pc, #40]	; (c80 <processCan1(CAN_message_t const&)+0x2c>)
  YELLOW_LED_state = !YELLOW_LED_state;
     c58:	4a0a      	ldr	r2, [pc, #40]	; (c84 <processCan1(CAN_message_t const&)+0x30>)
  RXCount1++;
     c5a:	680b      	ldr	r3, [r1, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c5c:	4c0a      	ldr	r4, [pc, #40]	; (c88 <processCan1(CAN_message_t const&)+0x34>)
     c5e:	3301      	adds	r3, #1
void processCan1(const CAN_message_t &msg) {
     c60:	b083      	sub	sp, #12
  RXCount1++;
     c62:	600b      	str	r3, [r1, #0]
  YELLOW_LED_state = !YELLOW_LED_state;
     c64:	7813      	ldrb	r3, [r2, #0]
     c66:	6824      	ldr	r4, [r4, #0]
     c68:	9401      	str	r4, [sp, #4]
  printCAN(msg,1);
     c6a:	2101      	movs	r1, #1
  YELLOW_LED_state = !YELLOW_LED_state;
     c6c:	404b      	eors	r3, r1
	return ret;
     c6e:	9c01      	ldr	r4, [sp, #4]
     c70:	7013      	strb	r3, [r2, #0]
     c72:	4b06      	ldr	r3, [pc, #24]	; (c8c <processCan1(CAN_message_t const&)+0x38>)
     c74:	601c      	str	r4, [r3, #0]
}
     c76:	b003      	add	sp, #12
     c78:	f85d 4b04 	ldr.w	r4, [sp], #4
  printCAN(msg,1);
     c7c:	f7ff bf64 	b.w	b48 <printCAN(CAN_message_t const&, unsigned char)>
     c80:	1fff6154 	.word	0x1fff6154
     c84:	1fff6164 	.word	0x1fff6164
     c88:	1fff628c 	.word	0x1fff628c
     c8c:	1fff615c 	.word	0x1fff615c

00000c90 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>:
FCTP_FUNC void FCTP_OPT::begin() {
     c90:	b538      	push	{r3, r4, r5, lr}
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     c92:	2300      	movs	r3, #0
    nvicIrq = IRQ_CAN1_MESSAGE;
     c94:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     c98:	6043      	str	r3, [r0, #4]
     c9a:	6083      	str	r3, [r0, #8]
     c9c:	60c3      	str	r3, [r0, #12]
     c9e:	6103      	str	r3, [r0, #16]
  OSC0_CR |= OSC_ERCLKEN;
     ca0:	4a41      	ldr	r2, [pc, #260]	; (da8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x118>)
    nvicIrq = IRQ_CAN1_MESSAGE;
     ca2:	215e      	movs	r1, #94	; 0x5e
    busNumber = 1;
     ca4:	2301      	movs	r3, #1
    nvicIrq = IRQ_CAN1_MESSAGE;
     ca6:	f8c5 190c 	str.w	r1, [r5, #2316]	; 0x90c
    busNumber = 1;
     caa:	f885 3915 	strb.w	r3, [r5, #2325]	; 0x915
  OSC0_CR |= OSC_ERCLKEN;
     cae:	7813      	ldrb	r3, [r2, #0]
  else if ( _bus == CAN1 ) SIM_SCGC3 |= SIM_SCGC3_FLEXCAN1;
     cb0:	493e      	ldr	r1, [pc, #248]	; (dac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x11c>)
  OSC0_CR |= OSC_ERCLKEN;
     cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     cb6:	7013      	strb	r3, [r2, #0]
  else if ( _bus == CAN1 ) SIM_SCGC3 |= SIM_SCGC3_FLEXCAN1;
     cb8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     cba:	4b3d      	ldr	r3, [pc, #244]	; (db0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  else if ( _bus == CAN1 ) SIM_SCGC3 |= SIM_SCGC3_FLEXCAN1;
     cbc:	f042 0210 	orr.w	r2, r2, #16
     cc0:	630a      	str	r2, [r1, #48]	; 0x30
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     cc2:	685a      	ldr	r2, [r3, #4]
    CORE_PIN33_CONFIG = PORT_PCR_MUX(2);
     cc4:	f501 41a0 	add.w	r1, r1, #20480	; 0x5000
     cc8:	f44f 7000 	mov.w	r0, #512	; 0x200
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
     cd0:	605a      	str	r2, [r3, #4]
    CORE_PIN33_CONFIG = PORT_PCR_MUX(2);
     cd2:	6608      	str	r0, [r1, #96]	; 0x60
    CORE_PIN34_CONFIG = PORT_PCR_MUX(2);
     cd4:	6648      	str	r0, [r1, #100]	; 0x64
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     cd6:	681a      	ldr	r2, [r3, #0]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can1;
     cd8:	4936      	ldr	r1, [pc, #216]	; (db4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x124>)
     cda:	4837      	ldr	r0, [pc, #220]	; (db8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x128>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     cdc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
     ce0:	601a      	str	r2, [r3, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     ce2:	681a      	ldr	r2, [r3, #0]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can1;
     ce4:	f8c1 01b8 	str.w	r0, [r1, #440]	; 0x1b8
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     ce8:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
     cec:	601a      	str	r2, [r3, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     cee:	681a      	ldr	r2, [r3, #0]
     cf0:	01d2      	lsls	r2, r2, #7
     cf2:	d5fc      	bpl.n	cee <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x5e>
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     cf4:	6859      	ldr	r1, [r3, #4]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     cf6:	4a2e      	ldr	r2, [pc, #184]	; (db0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     cf8:	f041 0108 	orr.w	r1, r1, #8
     cfc:	6059      	str	r1, [r3, #4]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
     cfe:	6819      	ldr	r1, [r3, #0]
     d00:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
     d04:	6019      	str	r1, [r3, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     d06:	6813      	ldr	r3, [r2, #0]
     d08:	02dc      	lsls	r4, r3, #11
     d0a:	d4fc      	bmi.n	d06 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x76>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     d0c:	6813      	ldr	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     d0e:	4928      	ldr	r1, [pc, #160]	; (db0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     d10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     d14:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     d16:	680b      	ldr	r3, [r1, #0]
     d18:	0198      	lsls	r0, r3, #6
     d1a:	d4fc      	bmi.n	d16 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x86>
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     d1c:	4c24      	ldr	r4, [pc, #144]	; (db0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
     d1e:	6823      	ldr	r3, [r4, #0]
     d20:	01da      	lsls	r2, r3, #7
     d22:	d5fc      	bpl.n	d1e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x8e>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SRX_DIS; /* Disable self-reception */
     d24:	6823      	ldr	r3, [r4, #0]
     d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     d2a:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_IRMQ; // individual mailbox masking
     d2c:	6823      	ldr	r3, [r4, #0]
     d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     d32:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_AEN; // TX ABORT FEATURE
     d34:	6823      	ldr	r3, [r4, #0]
     d36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     d3a:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_LPRIO_EN; // TX PRIORITY FEATURE
     d3c:	6823      	ldr	r3, [r4, #0]
     d3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     d42:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SLF_WAK; // SELF-WAKE UP FEATURE	
     d44:	6823      	ldr	r3, [r4, #0]
     d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     d4a:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_SRC; // WAKE-UP LOW-PASS FILTER
     d4c:	6823      	ldr	r3, [r4, #0]
     d4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
     d52:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) &= ~0x8800; // disable DMA and FD (valid bits are reserved in legacy controllers)
     d54:	6823      	ldr	r3, [r4, #0]
     d56:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
     d5a:	6023      	str	r3, [r4, #0]
  FLEXCANb_CTRL2(_bus) |= FLEXCAN_CTRL2_RRS | // store remote frames
     d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
     d5e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
     d62:	6363      	str	r3, [r4, #52]	; 0x34
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WRN_EN;
     d64:	6823      	ldr	r3, [r4, #0]
     d66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     d6a:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_MSK;
     d6c:	6823      	ldr	r3, [r4, #0]
     d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     d72:	6023      	str	r3, [r4, #0]
    void disableFIFO() { enableFIFO(0); }
     d74:	2000      	movs	r0, #0
     d76:	f7ff fe19 	bl	9ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     d7a:	6823      	ldr	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     d7c:	4a0c      	ldr	r2, [pc, #48]	; (db0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     d82:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     d84:	6813      	ldr	r3, [r2, #0]
     d86:	01db      	lsls	r3, r3, #7
     d88:	d4fc      	bmi.n	d84 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xf4>
  NVIC_ENABLE_IRQ(nvicIrq);
     d8a:	f8d5 290c 	ldr.w	r2, [r5, #2316]	; 0x90c
     d8e:	0953      	lsrs	r3, r2, #5
     d90:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
     d94:	3340      	adds	r3, #64	; 0x40
     d96:	2101      	movs	r1, #1
     d98:	009b      	lsls	r3, r3, #2
     d9a:	f002 021f 	and.w	r2, r2, #31
     d9e:	fa01 f202 	lsl.w	r2, r1, r2
     da2:	601a      	str	r2, [r3, #0]
}
     da4:	bd38      	pop	{r3, r4, r5, pc}
     da6:	bf00      	nop
     da8:	40065000 	.word	0x40065000
     dac:	40048000 	.word	0x40048000
     db0:	400a4000 	.word	0x400a4000
     db4:	1fff0200 	.word	0x1fff0200
     db8:	00000471 	.word	0x00000471

00000dbc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>:
FCTP_FUNC void FCTP_OPT::begin() {
     dbc:	b538      	push	{r3, r4, r5, lr}
    nvicIrq = IRQ_CAN0_MESSAGE;
     dbe:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     dc2:	2300      	movs	r3, #0
  OSC0_CR |= OSC_ERCLKEN;
     dc4:	4961      	ldr	r1, [pc, #388]	; (f4c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     dc6:	6043      	str	r3, [r0, #4]
    nvicIrq = IRQ_CAN0_MESSAGE;
     dc8:	224b      	movs	r2, #75	; 0x4b
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     dca:	6083      	str	r3, [r0, #8]
     dcc:	60c3      	str	r3, [r0, #12]
     dce:	6103      	str	r3, [r0, #16]
    nvicIrq = IRQ_CAN0_MESSAGE;
     dd0:	f8c5 290c 	str.w	r2, [r5, #2316]	; 0x90c
    busNumber = 0;
     dd4:	f885 3915 	strb.w	r3, [r5, #2325]	; 0x915
  OSC0_CR |= OSC_ERCLKEN;
     dd8:	780a      	ldrb	r2, [r1, #0]
  if ( _bus == CAN0 ) SIM_SCGC6 |= SIM_SCGC6_FLEXCAN0;
     dda:	485d      	ldr	r0, [pc, #372]	; (f50 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x194>)
  OSC0_CR |= OSC_ERCLKEN;
     ddc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     de0:	700a      	strb	r2, [r1, #0]
  if ( _bus == CAN0 ) SIM_SCGC6 |= SIM_SCGC6_FLEXCAN0;
     de2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     de4:	f5a1 2182 	sub.w	r1, r1, #266240	; 0x41000
  if ( _bus == CAN0 ) SIM_SCGC6 |= SIM_SCGC6_FLEXCAN0;
     de8:	f042 0210 	orr.w	r2, r2, #16
     dec:	63c2      	str	r2, [r0, #60]	; 0x3c
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     dee:	684a      	ldr	r2, [r1, #4]
    if ( init_pins ) {
     df0:	4858      	ldr	r0, [pc, #352]	; (f54 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x198>)
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
     df6:	604a      	str	r2, [r1, #4]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can0;
     df8:	4a57      	ldr	r2, [pc, #348]	; (f58 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x19c>)
     dfa:	4958      	ldr	r1, [pc, #352]	; (f5c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a0>)
     dfc:	f8c2 116c 	str.w	r1, [r2, #364]	; 0x16c
    if ( init_pins ) {
     e00:	7802      	ldrb	r2, [r0, #0]
     e02:	2a00      	cmp	r2, #0
     e04:	f040 8084 	bne.w	f10 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x154>
      if ( CORE_PIN29_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN29_CONFIG = 0;
     e08:	4b55      	ldr	r3, [pc, #340]	; (f60 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
     e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
     e0c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     e10:	bf04      	itt	eq
     e12:	2200      	moveq	r2, #0
     e14:	649a      	streq	r2, [r3, #72]	; 0x48
      CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
     e16:	4b53      	ldr	r3, [pc, #332]	; (f64 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     e18:	f44f 7200 	mov.w	r2, #512	; 0x200
     e1c:	631a      	str	r2, [r3, #48]	; 0x30
    if ( init_pins ) {
     e1e:	4b52      	ldr	r3, [pc, #328]	; (f68 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1ac>)
     e20:	781a      	ldrb	r2, [r3, #0]
     e22:	2a00      	cmp	r2, #0
     e24:	f000 8085 	beq.w	f32 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x176>
      pin = ( !CORE_PIN4_CONFIG ) ? DEF : ALT; 
     e28:	4a4e      	ldr	r2, [pc, #312]	; (f64 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     e2a:	6b51      	ldr	r1, [r2, #52]	; 0x34
     e2c:	2900      	cmp	r1, #0
     e2e:	d07f      	beq.n	f30 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x174>
      init_pins = 0;
     e30:	2100      	movs	r1, #0
     e32:	7019      	strb	r1, [r3, #0]
      if ( CORE_PIN4_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN4_CONFIG = 0;
     e34:	6b53      	ldr	r3, [r2, #52]	; 0x34
     e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
      CORE_PIN30_CONFIG = PORT_PCR_MUX(2);
     e3a:	4b49      	ldr	r3, [pc, #292]	; (f60 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
      if ( CORE_PIN4_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN4_CONFIG = 0;
     e3c:	bf08      	it	eq
     e3e:	6351      	streq	r1, [r2, #52]	; 0x34
      CORE_PIN30_CONFIG = PORT_PCR_MUX(2);
     e40:	f44f 7200 	mov.w	r2, #512	; 0x200
     e44:	64da      	str	r2, [r3, #76]	; 0x4c
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     e46:	4a49      	ldr	r2, [pc, #292]	; (f6c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
     e48:	6813      	ldr	r3, [r2, #0]
     e4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     e4e:	6013      	str	r3, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     e50:	6813      	ldr	r3, [r2, #0]
     e52:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     e56:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     e58:	6813      	ldr	r3, [r2, #0]
     e5a:	01dc      	lsls	r4, r3, #7
     e5c:	d5fc      	bpl.n	e58 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x9c>
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     e5e:	6853      	ldr	r3, [r2, #4]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     e60:	4942      	ldr	r1, [pc, #264]	; (f6c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     e62:	f043 0308 	orr.w	r3, r3, #8
     e66:	6053      	str	r3, [r2, #4]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
     e68:	6813      	ldr	r3, [r2, #0]
     e6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     e6e:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     e70:	680b      	ldr	r3, [r1, #0]
     e72:	02d8      	lsls	r0, r3, #11
     e74:	d4fc      	bmi.n	e70 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xb4>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     e76:	680b      	ldr	r3, [r1, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     e78:	4a3c      	ldr	r2, [pc, #240]	; (f6c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     e7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     e7e:	600b      	str	r3, [r1, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     e80:	6813      	ldr	r3, [r2, #0]
     e82:	0199      	lsls	r1, r3, #6
     e84:	d4fc      	bmi.n	e80 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xc4>
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     e86:	4c39      	ldr	r4, [pc, #228]	; (f6c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
     e88:	6823      	ldr	r3, [r4, #0]
     e8a:	01da      	lsls	r2, r3, #7
     e8c:	d5fc      	bpl.n	e88 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xcc>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SRX_DIS; /* Disable self-reception */
     e8e:	6823      	ldr	r3, [r4, #0]
     e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     e94:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_IRMQ; // individual mailbox masking
     e96:	6823      	ldr	r3, [r4, #0]
     e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     e9c:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_AEN; // TX ABORT FEATURE
     e9e:	6823      	ldr	r3, [r4, #0]
     ea0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     ea4:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_LPRIO_EN; // TX PRIORITY FEATURE
     ea6:	6823      	ldr	r3, [r4, #0]
     ea8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     eac:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SLF_WAK; // SELF-WAKE UP FEATURE	
     eae:	6823      	ldr	r3, [r4, #0]
     eb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     eb4:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_SRC; // WAKE-UP LOW-PASS FILTER
     eb6:	6823      	ldr	r3, [r4, #0]
     eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
     ebc:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) &= ~0x8800; // disable DMA and FD (valid bits are reserved in legacy controllers)
     ebe:	6823      	ldr	r3, [r4, #0]
     ec0:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
     ec4:	6023      	str	r3, [r4, #0]
  FLEXCANb_CTRL2(_bus) |= FLEXCAN_CTRL2_RRS | // store remote frames
     ec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
     ec8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
     ecc:	6363      	str	r3, [r4, #52]	; 0x34
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WRN_EN;
     ece:	6823      	ldr	r3, [r4, #0]
     ed0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     ed4:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_MSK;
     ed6:	6823      	ldr	r3, [r4, #0]
     ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     edc:	6023      	str	r3, [r4, #0]
     ede:	2000      	movs	r0, #0
     ee0:	f7ff fc98 	bl	814 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     ee4:	6823      	ldr	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     ee6:	4a21      	ldr	r2, [pc, #132]	; (f6c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     eec:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     eee:	6813      	ldr	r3, [r2, #0]
     ef0:	01db      	lsls	r3, r3, #7
     ef2:	d4fc      	bmi.n	eee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x132>
  NVIC_ENABLE_IRQ(nvicIrq);
     ef4:	f8d5 290c 	ldr.w	r2, [r5, #2316]	; 0x90c
     ef8:	0953      	lsrs	r3, r2, #5
     efa:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
     efe:	3340      	adds	r3, #64	; 0x40
     f00:	2101      	movs	r1, #1
     f02:	009b      	lsls	r3, r3, #2
     f04:	f002 021f 	and.w	r2, r2, #31
     f08:	fa01 f202 	lsl.w	r2, r1, r2
     f0c:	601a      	str	r2, [r3, #0]
}
     f0e:	bd38      	pop	{r3, r4, r5, pc}
      pin = ( !CORE_PIN3_CONFIG ) ? DEF : ALT; 
     f10:	4a14      	ldr	r2, [pc, #80]	; (f64 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     f12:	6b11      	ldr	r1, [r2, #48]	; 0x30
     f14:	b909      	cbnz	r1, f1a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x15e>
      init_pins = 0;
     f16:	7001      	strb	r1, [r0, #0]
     f18:	e776      	b.n	e08 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x4c>
      if ( CORE_PIN3_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN3_CONFIG = 0;
     f1a:	6b11      	ldr	r1, [r2, #48]	; 0x30
      init_pins = 0;
     f1c:	7003      	strb	r3, [r0, #0]
      if ( CORE_PIN3_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN3_CONFIG = 0;
     f1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     f22:	bf08      	it	eq
     f24:	6313      	streq	r3, [r2, #48]	; 0x30
      CORE_PIN29_CONFIG = PORT_PCR_MUX(2);
     f26:	4b0e      	ldr	r3, [pc, #56]	; (f60 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
     f28:	f44f 7200 	mov.w	r2, #512	; 0x200
     f2c:	649a      	str	r2, [r3, #72]	; 0x48
     f2e:	e776      	b.n	e1e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x62>
      init_pins = 0;
     f30:	7019      	strb	r1, [r3, #0]
      if ( CORE_PIN30_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN30_CONFIG = 0;
     f32:	4b0b      	ldr	r3, [pc, #44]	; (f60 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
     f34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     f36:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     f3a:	bf04      	itt	eq
     f3c:	2200      	moveq	r2, #0
     f3e:	64da      	streq	r2, [r3, #76]	; 0x4c
      CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
     f40:	4b08      	ldr	r3, [pc, #32]	; (f64 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     f42:	f44f 7200 	mov.w	r2, #512	; 0x200
     f46:	635a      	str	r2, [r3, #52]	; 0x34
}
     f48:	e77d      	b.n	e46 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x8a>
     f4a:	bf00      	nop
     f4c:	40065000 	.word	0x40065000
     f50:	40048000 	.word	0x40048000
     f54:	1fff0731 	.word	0x1fff0731
     f58:	1fff0200 	.word	0x1fff0200
     f5c:	0000045d 	.word	0x0000045d
     f60:	4004a000 	.word	0x4004a000
     f64:	40049000 	.word	0x40049000
     f68:	1fff0730 	.word	0x1fff0730
     f6c:	40024000 	.word	0x40024000

00000f70 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)>:
        T readBytes(T *buffer, uint16_t length);
        void flush() { clear(); }
        void clear() { head = tail = _available = 0; }
        void print(const char *p);
        void println(const char *p);
        uint16_t size() { return _available; }
     f70:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
     f74:	f8bc 3cd4 	ldrh.w	r3, [ip, #3284]	; 0xcd4
     f78:	b29b      	uxth	r3, r3

  asm volatile ("dsb");	
}

FCTP_FUNC bool FCTP_OPT::error(CAN_error_t &error, bool printDetails) {
  if ( !busESR1.size() ) return 0;
     f7a:	b90b      	cbnz	r3, f80 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x10>
     f7c:	4618      	mov	r0, r3
  error.TX_ERR_COUNTER = (uint8_t)error.ECR;

  if ( printDetails ) printErrors(error);
  NVIC_ENABLE_IRQ(nvicIrq);
  return 1;
}
     f7e:	4770      	bx	lr
FCTP_FUNC bool FCTP_OPT::error(CAN_error_t &error, bool printDetails) {
     f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  NVIC_DISABLE_IRQ(nvicIrq);
     f84:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
     f88:	4616      	mov	r6, r2
     f8a:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
     f8e:	0953      	lsrs	r3, r2, #5
     f90:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
     f94:	3360      	adds	r3, #96	; 0x60
     f96:	009b      	lsls	r3, r3, #2
     f98:	460c      	mov	r4, r1
     f9a:	f002 021f 	and.w	r2, r2, #31
     f9e:	2101      	movs	r1, #1
     fa0:	fa01 f202 	lsl.w	r2, r1, r2
     fa4:	601a      	str	r2, [r3, #0]
  if ( multi ) {
    head = ((head + 1)&(2*_size-1));
    if ( _available ) _available--;
    return 0;
  }
  if ( _available ) _available--;
     fa6:	f8bc 3cd4 	ldrh.w	r3, [ip, #3284]	; 0xcd4
     faa:	b29b      	uxth	r3, r3
     fac:	b12b      	cbz	r3, fba <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x4a>
     fae:	f8bc 3cd4 	ldrh.w	r3, [ip, #3284]	; 0xcd4
     fb2:	3b01      	subs	r3, #1
     fb4:	b29b      	uxth	r3, r3
     fb6:	f8ac 3cd4 	strh.w	r3, [ip, #3284]	; 0xcd4
  T value = _cbuf[((head)&(_size-1))];
     fba:	f8bc 3cd0 	ldrh.w	r3, [ip, #3280]	; 0xcd0
     fbe:	f003 030f 	and.w	r3, r3, #15
     fc2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
     fc6:	f8d3 5cd8 	ldr.w	r5, [r3, #3288]	; 0xcd8
  head = ((head + 1)&(2*_size-1));
     fca:	f8bc 3cd0 	ldrh.w	r3, [ip, #3280]	; 0xcd0
     fce:	3301      	adds	r3, #1
     fd0:	f003 031f 	and.w	r3, r3, #31
     fd4:	f8ac 3cd0 	strh.w	r3, [ip, #3280]	; 0xcd0
  if ( _available ) _available--;
     fd8:	f8bc 3d9c 	ldrh.w	r3, [ip, #3484]	; 0xd9c
  error.ESR1 = busESR1.read();
     fdc:	63a5      	str	r5, [r4, #56]	; 0x38
     fde:	b29b      	uxth	r3, r3
     fe0:	b12b      	cbz	r3, fee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x7e>
     fe2:	f8bc 3d9c 	ldrh.w	r3, [ip, #3484]	; 0xd9c
     fe6:	3b01      	subs	r3, #1
     fe8:	b29b      	uxth	r3, r3
     fea:	f8ac 3d9c 	strh.w	r3, [ip, #3484]	; 0xd9c
  T value = _cbuf[((head)&(_size-1))];
     fee:	f8bc 3d98 	ldrh.w	r3, [ip, #3480]	; 0xd98
     ff2:	f003 030f 	and.w	r3, r3, #15
     ff6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
     ffa:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
     ffe:	f641 519e 	movw	r1, #7582	; 0x1d9e
    1002:	f8b3 2d9e 	ldrh.w	r2, [r3, #3486]	; 0xd9e
  head = ((head + 1)&(2*_size-1));
    1006:	f8bc 3d98 	ldrh.w	r3, [ip, #3480]	; 0xd98
    100a:	f830 8001 	ldrh.w	r8, [r0, r1]
    100e:	3301      	adds	r3, #1
    1010:	f003 031f 	and.w	r3, r3, #31
    1014:	f8ac 3d98 	strh.w	r3, [ip, #3480]	; 0xd98
  if ( (error.ESR1 & 0x400C8) == 0x40080 ) strncpy((char*)error.state, "Idle", (sizeof(error.state) - 1));
    1018:	4b61      	ldr	r3, [pc, #388]	; (11a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x230>)
  error.ECR = busECR.read();
    101a:	87a2      	strh	r2, [r4, #60]	; 0x3c
  if ( (error.ESR1 & 0x400C8) == 0x40080 ) strncpy((char*)error.state, "Idle", (sizeof(error.state) - 1));
    101c:	4a61      	ldr	r2, [pc, #388]	; (11a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x234>)
    101e:	402b      	ands	r3, r5
    1020:	4293      	cmp	r3, r2
    1022:	fa98 f898 	rev16.w	r8, r8
    1026:	d07c      	beq.n	1122 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1b2>
  else if ( (error.ESR1 & 0x400C8) == 0x0 ) strncpy((char*)error.state, "Not synchronized to CAN bus", (sizeof(error.state) - 1));
    1028:	2b00      	cmp	r3, #0
    102a:	d074      	beq.n	1116 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1a6>
  else if ( (error.ESR1 & 0x400C8) == 0x40040 ) strncpy((char*)error.state, "Transmitting", (sizeof(error.state) - 1));
    102c:	4a5e      	ldr	r2, [pc, #376]	; (11a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x238>)
    102e:	4293      	cmp	r3, r2
    1030:	f000 80a9 	beq.w	1186 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x216>
  else if ( (error.ESR1 & 0x400C8) == 0x40008 ) strncpy((char*)error.state, "Receiving", (sizeof(error.state) - 1));
    1034:	4a5d      	ldr	r2, [pc, #372]	; (11ac <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x23c>)
    1036:	4293      	cmp	r3, r2
    1038:	f000 80ab 	beq.w	1192 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x222>
  error.BIT1_ERR = (error.ESR1 & (1UL << 15)) ? 1 : 0;
    103c:	f3c5 33c0 	ubfx	r3, r5, #15, #1
    1040:	77a3      	strb	r3, [r4, #30]
  error.BIT0_ERR = (error.ESR1 & (1UL << 14)) ? 1 : 0;
    1042:	f3c5 3380 	ubfx	r3, r5, #14, #1
    1046:	77e3      	strb	r3, [r4, #31]
  error.ACK_ERR = (error.ESR1 & (1UL << 13)) ? 1 : 0;
    1048:	f3c5 3340 	ubfx	r3, r5, #13, #1
    104c:	f884 3020 	strb.w	r3, [r4, #32]
  error.CRC_ERR = (error.ESR1 & (1UL << 12)) ? 1 : 0;
    1050:	f3c5 3300 	ubfx	r3, r5, #12, #1
    1054:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  error.FRM_ERR = (error.ESR1 & (1UL << 11)) ? 1 : 0;
    1058:	f3c5 23c0 	ubfx	r3, r5, #11, #1
    105c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  error.STF_ERR = (error.ESR1 & (1UL << 10)) ? 1 : 0;
    1060:	f3c5 2380 	ubfx	r3, r5, #10, #1
    1064:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  error.TX_WRN = (error.ESR1 & (1UL << 9)) ? 1 : 0;
    1068:	f3c5 2340 	ubfx	r3, r5, #9, #1
    106c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if ( (error.ESR1 & 0x30) == 0x0 ) strncpy((char*)error.FLT_CONF, "Error Active", (sizeof(error.FLT_CONF) - 1));
    1070:	f015 0f30 	tst.w	r5, #48	; 0x30
  error.RX_WRN = (error.ESR1 & (1UL << 8)) ? 1 : 0;
    1074:	f3c5 2300 	ubfx	r3, r5, #8, #1
    1078:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  if ( (error.ESR1 & 0x30) == 0x0 ) strncpy((char*)error.FLT_CONF, "Error Active", (sizeof(error.FLT_CONF) - 1));
    107c:	f104 0526 	add.w	r5, r4, #38	; 0x26
    1080:	d116      	bne.n	10b0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x140>
    1082:	494b      	ldr	r1, [pc, #300]	; (11b0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x240>)
    1084:	220d      	movs	r2, #13
    1086:	4628      	mov	r0, r5
    1088:	f003 fdac 	bl	4be4 <memcpy>
  error.RX_ERR_COUNTER = (uint8_t)(error.ECR >> 8);
    108c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if ( printDetails ) printErrors(error);
    1090:	b9be      	cbnz	r6, 10c2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x152>
  NVIC_ENABLE_IRQ(nvicIrq);
    1092:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    1096:	0953      	lsrs	r3, r2, #5
    1098:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    109c:	3340      	adds	r3, #64	; 0x40
    109e:	2001      	movs	r0, #1
    10a0:	009b      	lsls	r3, r3, #2
    10a2:	f002 021f 	and.w	r2, r2, #31
    10a6:	fa00 f202 	lsl.w	r2, r0, r2
    10aa:	601a      	str	r2, [r3, #0]
}
    10ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else strncpy((char*)error.FLT_CONF, "Bus off", (sizeof(error.FLT_CONF) - 1));
    10b0:	4940      	ldr	r1, [pc, #256]	; (11b4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x244>)
    10b2:	220d      	movs	r2, #13
    10b4:	4628      	mov	r0, r5
    10b6:	f006 fb93 	bl	77e0 <strncpy>
  error.RX_ERR_COUNTER = (uint8_t)(error.ECR >> 8);
    10ba:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if ( printDetails ) printErrors(error);
    10be:	2e00      	cmp	r6, #0
    10c0:	d0e7      	beq.n	1092 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x122>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    10c2:	210f      	movs	r1, #15
    10c4:	483c      	ldr	r0, [pc, #240]	; (11b8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x248>)
    10c6:	f004 fdcb 	bl	5c60 <usb_serial_write>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
    10ca:	4620      	mov	r0, r4
    10cc:	f006 fc58 	bl	7980 <strlen>
    10d0:	4601      	mov	r1, r0
    10d2:	4620      	mov	r0, r4
    10d4:	f004 fdc4 	bl	5c60 <usb_serial_write>

FCTP_FUNC void FCTP_OPT::printErrors(const CAN_error_t &error) {
  Serial.print("FlexCAN State: "); Serial.print((char*)error.state);
  if ( error.BIT1_ERR ) Serial.print(", BIT1_ERR");
    10d8:	7fa3      	ldrb	r3, [r4, #30]
    10da:	2b00      	cmp	r3, #0
    10dc:	d14e      	bne.n	117c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x20c>
  if ( error.BIT0_ERR ) Serial.print(", BIT0_ERR");
    10de:	7fe3      	ldrb	r3, [r4, #31]
    10e0:	2b00      	cmp	r3, #0
    10e2:	d146      	bne.n	1172 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x202>
  if ( error.ACK_ERR ) Serial.print(", ACK_ERR");
    10e4:	f894 3020 	ldrb.w	r3, [r4, #32]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d13d      	bne.n	1168 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1f8>
  if ( error.CRC_ERR ) Serial.print(", CRC_ERR");
    10ec:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    10f0:	bbab      	cbnz	r3, 115e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1ee>
  if ( error.FRM_ERR ) Serial.print(", FRM_ERR");
    10f2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    10f6:	bb6b      	cbnz	r3, 1154 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1e4>
  if ( error.STF_ERR ) Serial.print(", STF_ERR");
    10f8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    10fc:	bb2b      	cbnz	r3, 114a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1da>
  if ( error.RX_WRN ) Serial.printf(", RX_WRN: %d", error.RX_ERR_COUNTER);
    10fe:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    1102:	b9db      	cbnz	r3, 113c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1cc>
  if ( error.TX_WRN ) Serial.printf(", TX_WRN: %d", error.TX_ERR_COUNTER);
    1104:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    1108:	b98b      	cbnz	r3, 112e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1be>
  Serial.printf(", FLT_CONF: %s\n", (char*)error.FLT_CONF);
    110a:	492c      	ldr	r1, [pc, #176]	; (11bc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x24c>)
    110c:	482c      	ldr	r0, [pc, #176]	; (11c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x250>)
    110e:	462a      	mov	r2, r5
    1110:	f003 fd48 	bl	4ba4 <Print::printf(char const*, ...)>
}
    1114:	e7bd      	b.n	1092 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x122>
  else if ( (error.ESR1 & 0x400C8) == 0x0 ) strncpy((char*)error.state, "Not synchronized to CAN bus", (sizeof(error.state) - 1));
    1116:	492b      	ldr	r1, [pc, #172]	; (11c4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x254>)
    1118:	221d      	movs	r2, #29
    111a:	4620      	mov	r0, r4
    111c:	f006 fb60 	bl	77e0 <strncpy>
    1120:	e78c      	b.n	103c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
  if ( (error.ESR1 & 0x400C8) == 0x40080 ) strncpy((char*)error.state, "Idle", (sizeof(error.state) - 1));
    1122:	4929      	ldr	r1, [pc, #164]	; (11c8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x258>)
    1124:	221d      	movs	r2, #29
    1126:	4620      	mov	r0, r4
    1128:	f006 fb5a 	bl	77e0 <strncpy>
    112c:	e786      	b.n	103c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
  if ( error.TX_WRN ) Serial.printf(", TX_WRN: %d", error.TX_ERR_COUNTER);
    112e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    1132:	4926      	ldr	r1, [pc, #152]	; (11cc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x25c>)
    1134:	4822      	ldr	r0, [pc, #136]	; (11c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x250>)
    1136:	f003 fd35 	bl	4ba4 <Print::printf(char const*, ...)>
    113a:	e7e6      	b.n	110a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x19a>
  if ( error.RX_WRN ) Serial.printf(", RX_WRN: %d", error.RX_ERR_COUNTER);
    113c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    1140:	4923      	ldr	r1, [pc, #140]	; (11d0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x260>)
    1142:	481f      	ldr	r0, [pc, #124]	; (11c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x250>)
    1144:	f003 fd2e 	bl	4ba4 <Print::printf(char const*, ...)>
    1148:	e7dc      	b.n	1104 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x194>
    114a:	2109      	movs	r1, #9
    114c:	4821      	ldr	r0, [pc, #132]	; (11d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x264>)
    114e:	f004 fd87 	bl	5c60 <usb_serial_write>
    1152:	e7d4      	b.n	10fe <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x18e>
    1154:	2109      	movs	r1, #9
    1156:	4820      	ldr	r0, [pc, #128]	; (11d8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x268>)
    1158:	f004 fd82 	bl	5c60 <usb_serial_write>
    115c:	e7cc      	b.n	10f8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x188>
    115e:	2109      	movs	r1, #9
    1160:	481e      	ldr	r0, [pc, #120]	; (11dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x26c>)
    1162:	f004 fd7d 	bl	5c60 <usb_serial_write>
    1166:	e7c4      	b.n	10f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x182>
    1168:	2109      	movs	r1, #9
    116a:	481d      	ldr	r0, [pc, #116]	; (11e0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x270>)
    116c:	f004 fd78 	bl	5c60 <usb_serial_write>
    1170:	e7bc      	b.n	10ec <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x17c>
    1172:	210a      	movs	r1, #10
    1174:	481b      	ldr	r0, [pc, #108]	; (11e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x274>)
    1176:	f004 fd73 	bl	5c60 <usb_serial_write>
    117a:	e7b3      	b.n	10e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x174>
    117c:	210a      	movs	r1, #10
    117e:	481a      	ldr	r0, [pc, #104]	; (11e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x278>)
    1180:	f004 fd6e 	bl	5c60 <usb_serial_write>
    1184:	e7ab      	b.n	10de <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x16e>
  else if ( (error.ESR1 & 0x400C8) == 0x40040 ) strncpy((char*)error.state, "Transmitting", (sizeof(error.state) - 1));
    1186:	4919      	ldr	r1, [pc, #100]	; (11ec <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x27c>)
    1188:	221d      	movs	r2, #29
    118a:	4620      	mov	r0, r4
    118c:	f006 fb28 	bl	77e0 <strncpy>
    1190:	e754      	b.n	103c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
  else if ( (error.ESR1 & 0x400C8) == 0x40008 ) strncpy((char*)error.state, "Receiving", (sizeof(error.state) - 1));
    1192:	4917      	ldr	r1, [pc, #92]	; (11f0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x280>)
    1194:	221d      	movs	r2, #29
    1196:	4620      	mov	r0, r4
    1198:	f006 fb22 	bl	77e0 <strncpy>
    119c:	e74e      	b.n	103c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
    119e:	bf00      	nop
    11a0:	000400c8 	.word	0x000400c8
    11a4:	00040080 	.word	0x00040080
    11a8:	00040040 	.word	0x00040040
    11ac:	00040008 	.word	0x00040008
    11b0:	0000d0a4 	.word	0x0000d0a4
    11b4:	0000d0b4 	.word	0x0000d0b4
    11b8:	0000d134 	.word	0x0000d134
    11bc:	0000d124 	.word	0x0000d124
    11c0:	1fff0770 	.word	0x1fff0770
    11c4:	0000d06c 	.word	0x0000d06c
    11c8:	0000d064 	.word	0x0000d064
    11cc:	0000d114 	.word	0x0000d114
    11d0:	0000d104 	.word	0x0000d104
    11d4:	0000d0f8 	.word	0x0000d0f8
    11d8:	0000d0ec 	.word	0x0000d0ec
    11dc:	0000d0e0 	.word	0x0000d0e0
    11e0:	0000d0d4 	.word	0x0000d0d4
    11e4:	0000d0c8 	.word	0x0000d0c8
    11e8:	0000d0bc 	.word	0x0000d0bc
    11ec:	0000d088 	.word	0x0000d088
    11f0:	0000d098 	.word	0x0000d098

000011f4 <autoBaud0()>:
void autoBaud0(){
    11f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_error_t error_message;  
    11f8:	f8df e12c 	ldr.w	lr, [pc, #300]	; 1328 <autoBaud0()+0x134>
    11fc:	f8df 812c 	ldr.w	r8, [pc, #300]	; 132c <autoBaud0()+0x138>
    1200:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1330 <autoBaud0()+0x13c>
    1204:	4c3f      	ldr	r4, [pc, #252]	; (1304 <autoBaud0()+0x110>)
    1206:	4e40      	ldr	r6, [pc, #256]	; (1308 <autoBaud0()+0x114>)
    Can0.setBaudRate(Can0_bitrate);
    1208:	4d40      	ldr	r5, [pc, #256]	; (130c <autoBaud0()+0x118>)
    120a:	f8df b128 	ldr.w	fp, [pc, #296]	; 1334 <autoBaud0()+0x140>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    120e:	f8df a110 	ldr.w	sl, [pc, #272]	; 1320 <autoBaud0()+0x12c>
      if (RXCount0 > 0) {
    1212:	4f3f      	ldr	r7, [pc, #252]	; (1310 <autoBaud0()+0x11c>)
  CAN_error_t error_message;  
    1214:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
void autoBaud0(){
    1218:	b095      	sub	sp, #84	; 0x54
  CAN_error_t error_message;  
    121a:	f10d 0c10 	add.w	ip, sp, #16
    121e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1222:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1226:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    122a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    122e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1232:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    1236:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    Can0_bitrate = baud_rates[i];
    123a:	f858 1b04 	ldr.w	r1, [r8], #4
    123e:	f8c9 1000 	str.w	r1, [r9]
    Can0.setBaudRate(Can0_bitrate);
    1242:	2200      	movs	r2, #0
    1244:	4628      	mov	r0, r5
    1246:	f7ff f9d9 	bl	5fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
    124a:	2120      	movs	r1, #32
    124c:	4658      	mov	r0, fp
    124e:	f004 fd07 	bl	5c60 <usb_serial_write>
    1252:	2300      	movs	r3, #0
    1254:	220a      	movs	r2, #10
    1256:	f8d9 1000 	ldr.w	r1, [r9]
    125a:	4650      	mov	r0, sl
    125c:	f003 fcb0 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1260:	2105      	movs	r1, #5
    1262:	482c      	ldr	r0, [pc, #176]	; (1314 <autoBaud0()+0x120>)
    1264:	f004 fcfc 	bl	5c60 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1268:	4650      	mov	r0, sl
    126a:	f003 fc83 	bl	4b74 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    126e:	6823      	ldr	r3, [r4, #0]
    1270:	9301      	str	r3, [sp, #4]
	return ret;
    1272:	9b01      	ldr	r3, [sp, #4]
    1274:	4619      	mov	r1, r3
    1276:	6031      	str	r1, [r6, #0]
    1278:	e006      	b.n	1288 <autoBaud0()+0x94>
      if (RXCount0 > 0) {
    127a:	683b      	ldr	r3, [r7, #0]
    127c:	bb3b      	cbnz	r3, 12ce <autoBaud0()+0xda>
      if (Can0.error(error_message,true)){
    127e:	f7ff fe77 	bl	f70 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)>
    1282:	2800      	cmp	r0, #0
    1284:	d138      	bne.n	12f8 <autoBaud0()+0x104>
	operator unsigned long () const { return millis() - ms; }
    1286:	6831      	ldr	r1, [r6, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1288:	6823      	ldr	r3, [r4, #0]
    128a:	9303      	str	r3, [sp, #12]
	return ret;
    128c:	9b03      	ldr	r3, [sp, #12]
    128e:	1a5b      	subs	r3, r3, r1
    while (routine_time < AUTOBAUD_TIMEOUT)
    1290:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
      if (Can0.error(error_message,true)){
    1294:	f04f 0201 	mov.w	r2, #1
    1298:	a904      	add	r1, sp, #16
    129a:	4628      	mov	r0, r5
    while (routine_time < AUTOBAUD_TIMEOUT)
    129c:	d3ed      	bcc.n	127a <autoBaud0()+0x86>
  for (uint8_t i = 0; i<NUM_BAUD_RATES;  i++ ){
    129e:	4b1e      	ldr	r3, [pc, #120]	; (1318 <autoBaud0()+0x124>)
    12a0:	4598      	cmp	r8, r3
    12a2:	d1ca      	bne.n	123a <autoBaud0()+0x46>
    12a4:	2121      	movs	r1, #33	; 0x21
    12a6:	481d      	ldr	r0, [pc, #116]	; (131c <autoBaud0()+0x128>)
    12a8:	f004 fcda 	bl	5c60 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    12ac:	2300      	movs	r3, #0
    12ae:	220a      	movs	r2, #10
    12b0:	f8d9 1000 	ldr.w	r1, [r9]
    12b4:	481a      	ldr	r0, [pc, #104]	; (1320 <autoBaud0()+0x12c>)
    12b6:	f003 fc83 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    12ba:	2105      	movs	r1, #5
    12bc:	4815      	ldr	r0, [pc, #84]	; (1314 <autoBaud0()+0x120>)
    12be:	f004 fccf 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    12c2:	4817      	ldr	r0, [pc, #92]	; (1320 <autoBaud0()+0x12c>)
    12c4:	f003 fc56 	bl	4b74 <Print::println()>
}
    12c8:	b015      	add	sp, #84	; 0x54
    12ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12ce:	2126      	movs	r1, #38	; 0x26
    12d0:	4814      	ldr	r0, [pc, #80]	; (1324 <autoBaud0()+0x130>)
    12d2:	f004 fcc5 	bl	5c60 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    12d6:	2300      	movs	r3, #0
    12d8:	220a      	movs	r2, #10
    12da:	f8d9 1000 	ldr.w	r1, [r9]
    12de:	4810      	ldr	r0, [pc, #64]	; (1320 <autoBaud0()+0x12c>)
    12e0:	f003 fc6e 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    12e4:	2105      	movs	r1, #5
    12e6:	480b      	ldr	r0, [pc, #44]	; (1314 <autoBaud0()+0x120>)
    12e8:	f004 fcba 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    12ec:	480c      	ldr	r0, [pc, #48]	; (1320 <autoBaud0()+0x12c>)
    12ee:	f003 fc41 	bl	4b74 <Print::println()>
    12f2:	b015      	add	sp, #84	; 0x54
    12f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12f8:	6823      	ldr	r3, [r4, #0]
    12fa:	9302      	str	r3, [sp, #8]
	return ret;
    12fc:	9902      	ldr	r1, [sp, #8]
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    12fe:	f5a1 71c8 	sub.w	r1, r1, #400	; 0x190
    1302:	e7b8      	b.n	1276 <autoBaud0()+0x82>
    1304:	1fff628c 	.word	0x1fff628c
    1308:	1fff6274 	.word	0x1fff6274
    130c:	1fff0f08 	.word	0x1fff0f08
    1310:	1fff6150 	.word	0x1fff6150
    1314:	0000d168 	.word	0x0000d168
    1318:	1fff074c 	.word	0x1fff074c
    131c:	0000d198 	.word	0x0000d198
    1320:	1fff0770 	.word	0x1fff0770
    1324:	0000d170 	.word	0x0000d170
    1328:	0000d46c 	.word	0x0000d46c
    132c:	1fff0734 	.word	0x1fff0734
    1330:	1fff3820 	.word	0x1fff3820
    1334:	0000d144 	.word	0x0000d144

00001338 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)>:
        uint16_t size() { return _available; }
    1338:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
    133c:	f8bc 3cd4 	ldrh.w	r3, [ip, #3284]	; 0xcd4
    1340:	b29b      	uxth	r3, r3
  if ( !busESR1.size() ) return 0;
    1342:	b90b      	cbnz	r3, 1348 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x10>
    1344:	4618      	mov	r0, r3
}
    1346:	4770      	bx	lr
FCTP_FUNC bool FCTP_OPT::error(CAN_error_t &error, bool printDetails) {
    1348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  NVIC_DISABLE_IRQ(nvicIrq);
    134c:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
    1350:	4616      	mov	r6, r2
    1352:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    1356:	0953      	lsrs	r3, r2, #5
    1358:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    135c:	3360      	adds	r3, #96	; 0x60
    135e:	009b      	lsls	r3, r3, #2
    1360:	460c      	mov	r4, r1
    1362:	f002 021f 	and.w	r2, r2, #31
    1366:	2101      	movs	r1, #1
    1368:	fa01 f202 	lsl.w	r2, r1, r2
    136c:	601a      	str	r2, [r3, #0]
  if ( _available ) _available--;
    136e:	f8bc 3cd4 	ldrh.w	r3, [ip, #3284]	; 0xcd4
    1372:	b29b      	uxth	r3, r3
    1374:	b12b      	cbz	r3, 1382 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x4a>
    1376:	f8bc 3cd4 	ldrh.w	r3, [ip, #3284]	; 0xcd4
    137a:	3b01      	subs	r3, #1
    137c:	b29b      	uxth	r3, r3
    137e:	f8ac 3cd4 	strh.w	r3, [ip, #3284]	; 0xcd4
  T value = _cbuf[((head)&(_size-1))];
    1382:	f8bc 3cd0 	ldrh.w	r3, [ip, #3280]	; 0xcd0
    1386:	f003 030f 	and.w	r3, r3, #15
    138a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
    138e:	f8d3 5cd8 	ldr.w	r5, [r3, #3288]	; 0xcd8
  head = ((head + 1)&(2*_size-1));
    1392:	f8bc 3cd0 	ldrh.w	r3, [ip, #3280]	; 0xcd0
    1396:	3301      	adds	r3, #1
    1398:	f003 031f 	and.w	r3, r3, #31
    139c:	f8ac 3cd0 	strh.w	r3, [ip, #3280]	; 0xcd0
  if ( _available ) _available--;
    13a0:	f8bc 3d9c 	ldrh.w	r3, [ip, #3484]	; 0xd9c
  error.ESR1 = busESR1.read();
    13a4:	63a5      	str	r5, [r4, #56]	; 0x38
    13a6:	b29b      	uxth	r3, r3
    13a8:	b12b      	cbz	r3, 13b6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x7e>
    13aa:	f8bc 3d9c 	ldrh.w	r3, [ip, #3484]	; 0xd9c
    13ae:	3b01      	subs	r3, #1
    13b0:	b29b      	uxth	r3, r3
    13b2:	f8ac 3d9c 	strh.w	r3, [ip, #3484]	; 0xd9c
  T value = _cbuf[((head)&(_size-1))];
    13b6:	f8bc 3d98 	ldrh.w	r3, [ip, #3480]	; 0xd98
    13ba:	f003 030f 	and.w	r3, r3, #15
    13be:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    13c2:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
    13c6:	f641 519e 	movw	r1, #7582	; 0x1d9e
    13ca:	f8b3 2d9e 	ldrh.w	r2, [r3, #3486]	; 0xd9e
  head = ((head + 1)&(2*_size-1));
    13ce:	f8bc 3d98 	ldrh.w	r3, [ip, #3480]	; 0xd98
    13d2:	f830 8001 	ldrh.w	r8, [r0, r1]
    13d6:	3301      	adds	r3, #1
    13d8:	f003 031f 	and.w	r3, r3, #31
    13dc:	f8ac 3d98 	strh.w	r3, [ip, #3480]	; 0xd98
  if ( (error.ESR1 & 0x400C8) == 0x40080 ) strncpy((char*)error.state, "Idle", (sizeof(error.state) - 1));
    13e0:	4b61      	ldr	r3, [pc, #388]	; (1568 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x230>)
  error.ECR = busECR.read();
    13e2:	87a2      	strh	r2, [r4, #60]	; 0x3c
  if ( (error.ESR1 & 0x400C8) == 0x40080 ) strncpy((char*)error.state, "Idle", (sizeof(error.state) - 1));
    13e4:	4a61      	ldr	r2, [pc, #388]	; (156c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x234>)
    13e6:	402b      	ands	r3, r5
    13e8:	4293      	cmp	r3, r2
    13ea:	fa98 f898 	rev16.w	r8, r8
    13ee:	d07c      	beq.n	14ea <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1b2>
  else if ( (error.ESR1 & 0x400C8) == 0x0 ) strncpy((char*)error.state, "Not synchronized to CAN bus", (sizeof(error.state) - 1));
    13f0:	2b00      	cmp	r3, #0
    13f2:	d074      	beq.n	14de <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1a6>
  else if ( (error.ESR1 & 0x400C8) == 0x40040 ) strncpy((char*)error.state, "Transmitting", (sizeof(error.state) - 1));
    13f4:	4a5e      	ldr	r2, [pc, #376]	; (1570 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x238>)
    13f6:	4293      	cmp	r3, r2
    13f8:	f000 80a9 	beq.w	154e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x216>
  else if ( (error.ESR1 & 0x400C8) == 0x40008 ) strncpy((char*)error.state, "Receiving", (sizeof(error.state) - 1));
    13fc:	4a5d      	ldr	r2, [pc, #372]	; (1574 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x23c>)
    13fe:	4293      	cmp	r3, r2
    1400:	f000 80ab 	beq.w	155a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x222>
  error.BIT1_ERR = (error.ESR1 & (1UL << 15)) ? 1 : 0;
    1404:	f3c5 33c0 	ubfx	r3, r5, #15, #1
    1408:	77a3      	strb	r3, [r4, #30]
  error.BIT0_ERR = (error.ESR1 & (1UL << 14)) ? 1 : 0;
    140a:	f3c5 3380 	ubfx	r3, r5, #14, #1
    140e:	77e3      	strb	r3, [r4, #31]
  error.ACK_ERR = (error.ESR1 & (1UL << 13)) ? 1 : 0;
    1410:	f3c5 3340 	ubfx	r3, r5, #13, #1
    1414:	f884 3020 	strb.w	r3, [r4, #32]
  error.CRC_ERR = (error.ESR1 & (1UL << 12)) ? 1 : 0;
    1418:	f3c5 3300 	ubfx	r3, r5, #12, #1
    141c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  error.FRM_ERR = (error.ESR1 & (1UL << 11)) ? 1 : 0;
    1420:	f3c5 23c0 	ubfx	r3, r5, #11, #1
    1424:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  error.STF_ERR = (error.ESR1 & (1UL << 10)) ? 1 : 0;
    1428:	f3c5 2380 	ubfx	r3, r5, #10, #1
    142c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  error.TX_WRN = (error.ESR1 & (1UL << 9)) ? 1 : 0;
    1430:	f3c5 2340 	ubfx	r3, r5, #9, #1
    1434:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if ( (error.ESR1 & 0x30) == 0x0 ) strncpy((char*)error.FLT_CONF, "Error Active", (sizeof(error.FLT_CONF) - 1));
    1438:	f015 0f30 	tst.w	r5, #48	; 0x30
  error.RX_WRN = (error.ESR1 & (1UL << 8)) ? 1 : 0;
    143c:	f3c5 2300 	ubfx	r3, r5, #8, #1
    1440:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  if ( (error.ESR1 & 0x30) == 0x0 ) strncpy((char*)error.FLT_CONF, "Error Active", (sizeof(error.FLT_CONF) - 1));
    1444:	f104 0526 	add.w	r5, r4, #38	; 0x26
    1448:	d116      	bne.n	1478 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x140>
    144a:	494b      	ldr	r1, [pc, #300]	; (1578 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x240>)
    144c:	220d      	movs	r2, #13
    144e:	4628      	mov	r0, r5
    1450:	f003 fbc8 	bl	4be4 <memcpy>
  error.RX_ERR_COUNTER = (uint8_t)(error.ECR >> 8);
    1454:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if ( printDetails ) printErrors(error);
    1458:	b9be      	cbnz	r6, 148a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x152>
  NVIC_ENABLE_IRQ(nvicIrq);
    145a:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    145e:	0953      	lsrs	r3, r2, #5
    1460:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    1464:	3340      	adds	r3, #64	; 0x40
    1466:	2001      	movs	r0, #1
    1468:	009b      	lsls	r3, r3, #2
    146a:	f002 021f 	and.w	r2, r2, #31
    146e:	fa00 f202 	lsl.w	r2, r0, r2
    1472:	601a      	str	r2, [r3, #0]
}
    1474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else strncpy((char*)error.FLT_CONF, "Bus off", (sizeof(error.FLT_CONF) - 1));
    1478:	4940      	ldr	r1, [pc, #256]	; (157c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x244>)
    147a:	220d      	movs	r2, #13
    147c:	4628      	mov	r0, r5
    147e:	f006 f9af 	bl	77e0 <strncpy>
  error.RX_ERR_COUNTER = (uint8_t)(error.ECR >> 8);
    1482:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if ( printDetails ) printErrors(error);
    1486:	2e00      	cmp	r6, #0
    1488:	d0e7      	beq.n	145a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x122>
    148a:	210f      	movs	r1, #15
    148c:	483c      	ldr	r0, [pc, #240]	; (1580 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x248>)
    148e:	f004 fbe7 	bl	5c60 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    1492:	4620      	mov	r0, r4
    1494:	f006 fa74 	bl	7980 <strlen>
    1498:	4601      	mov	r1, r0
    149a:	4620      	mov	r0, r4
    149c:	f004 fbe0 	bl	5c60 <usb_serial_write>
  if ( error.BIT1_ERR ) Serial.print(", BIT1_ERR");
    14a0:	7fa3      	ldrb	r3, [r4, #30]
    14a2:	2b00      	cmp	r3, #0
    14a4:	d14e      	bne.n	1544 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x20c>
  if ( error.BIT0_ERR ) Serial.print(", BIT0_ERR");
    14a6:	7fe3      	ldrb	r3, [r4, #31]
    14a8:	2b00      	cmp	r3, #0
    14aa:	d146      	bne.n	153a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x202>
  if ( error.ACK_ERR ) Serial.print(", ACK_ERR");
    14ac:	f894 3020 	ldrb.w	r3, [r4, #32]
    14b0:	2b00      	cmp	r3, #0
    14b2:	d13d      	bne.n	1530 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1f8>
  if ( error.CRC_ERR ) Serial.print(", CRC_ERR");
    14b4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    14b8:	bbab      	cbnz	r3, 1526 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1ee>
  if ( error.FRM_ERR ) Serial.print(", FRM_ERR");
    14ba:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    14be:	bb6b      	cbnz	r3, 151c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1e4>
  if ( error.STF_ERR ) Serial.print(", STF_ERR");
    14c0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    14c4:	bb2b      	cbnz	r3, 1512 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1da>
  if ( error.RX_WRN ) Serial.printf(", RX_WRN: %d", error.RX_ERR_COUNTER);
    14c6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    14ca:	b9db      	cbnz	r3, 1504 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1cc>
  if ( error.TX_WRN ) Serial.printf(", TX_WRN: %d", error.TX_ERR_COUNTER);
    14cc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    14d0:	b98b      	cbnz	r3, 14f6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1be>
  Serial.printf(", FLT_CONF: %s\n", (char*)error.FLT_CONF);
    14d2:	492c      	ldr	r1, [pc, #176]	; (1584 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x24c>)
    14d4:	482c      	ldr	r0, [pc, #176]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x250>)
    14d6:	462a      	mov	r2, r5
    14d8:	f003 fb64 	bl	4ba4 <Print::printf(char const*, ...)>
}
    14dc:	e7bd      	b.n	145a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x122>
  else if ( (error.ESR1 & 0x400C8) == 0x0 ) strncpy((char*)error.state, "Not synchronized to CAN bus", (sizeof(error.state) - 1));
    14de:	492b      	ldr	r1, [pc, #172]	; (158c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x254>)
    14e0:	221d      	movs	r2, #29
    14e2:	4620      	mov	r0, r4
    14e4:	f006 f97c 	bl	77e0 <strncpy>
    14e8:	e78c      	b.n	1404 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
  if ( (error.ESR1 & 0x400C8) == 0x40080 ) strncpy((char*)error.state, "Idle", (sizeof(error.state) - 1));
    14ea:	4929      	ldr	r1, [pc, #164]	; (1590 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x258>)
    14ec:	221d      	movs	r2, #29
    14ee:	4620      	mov	r0, r4
    14f0:	f006 f976 	bl	77e0 <strncpy>
    14f4:	e786      	b.n	1404 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
  if ( error.TX_WRN ) Serial.printf(", TX_WRN: %d", error.TX_ERR_COUNTER);
    14f6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    14fa:	4926      	ldr	r1, [pc, #152]	; (1594 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x25c>)
    14fc:	4822      	ldr	r0, [pc, #136]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x250>)
    14fe:	f003 fb51 	bl	4ba4 <Print::printf(char const*, ...)>
    1502:	e7e6      	b.n	14d2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x19a>
  if ( error.RX_WRN ) Serial.printf(", RX_WRN: %d", error.RX_ERR_COUNTER);
    1504:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    1508:	4923      	ldr	r1, [pc, #140]	; (1598 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x260>)
    150a:	481f      	ldr	r0, [pc, #124]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x250>)
    150c:	f003 fb4a 	bl	4ba4 <Print::printf(char const*, ...)>
    1510:	e7dc      	b.n	14cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x194>
    1512:	2109      	movs	r1, #9
    1514:	4821      	ldr	r0, [pc, #132]	; (159c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x264>)
    1516:	f004 fba3 	bl	5c60 <usb_serial_write>
    151a:	e7d4      	b.n	14c6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x18e>
    151c:	2109      	movs	r1, #9
    151e:	4820      	ldr	r0, [pc, #128]	; (15a0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x268>)
    1520:	f004 fb9e 	bl	5c60 <usb_serial_write>
    1524:	e7cc      	b.n	14c0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x188>
    1526:	2109      	movs	r1, #9
    1528:	481e      	ldr	r0, [pc, #120]	; (15a4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x26c>)
    152a:	f004 fb99 	bl	5c60 <usb_serial_write>
    152e:	e7c4      	b.n	14ba <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x182>
    1530:	2109      	movs	r1, #9
    1532:	481d      	ldr	r0, [pc, #116]	; (15a8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x270>)
    1534:	f004 fb94 	bl	5c60 <usb_serial_write>
    1538:	e7bc      	b.n	14b4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x17c>
    153a:	210a      	movs	r1, #10
    153c:	481b      	ldr	r0, [pc, #108]	; (15ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x274>)
    153e:	f004 fb8f 	bl	5c60 <usb_serial_write>
    1542:	e7b3      	b.n	14ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x174>
    1544:	210a      	movs	r1, #10
    1546:	481a      	ldr	r0, [pc, #104]	; (15b0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x278>)
    1548:	f004 fb8a 	bl	5c60 <usb_serial_write>
    154c:	e7ab      	b.n	14a6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x16e>
  else if ( (error.ESR1 & 0x400C8) == 0x40040 ) strncpy((char*)error.state, "Transmitting", (sizeof(error.state) - 1));
    154e:	4919      	ldr	r1, [pc, #100]	; (15b4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x27c>)
    1550:	221d      	movs	r2, #29
    1552:	4620      	mov	r0, r4
    1554:	f006 f944 	bl	77e0 <strncpy>
    1558:	e754      	b.n	1404 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
  else if ( (error.ESR1 & 0x400C8) == 0x40008 ) strncpy((char*)error.state, "Receiving", (sizeof(error.state) - 1));
    155a:	4917      	ldr	r1, [pc, #92]	; (15b8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x280>)
    155c:	221d      	movs	r2, #29
    155e:	4620      	mov	r0, r4
    1560:	f006 f93e 	bl	77e0 <strncpy>
    1564:	e74e      	b.n	1404 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
    1566:	bf00      	nop
    1568:	000400c8 	.word	0x000400c8
    156c:	00040080 	.word	0x00040080
    1570:	00040040 	.word	0x00040040
    1574:	00040008 	.word	0x00040008
    1578:	0000d0a4 	.word	0x0000d0a4
    157c:	0000d0b4 	.word	0x0000d0b4
    1580:	0000d134 	.word	0x0000d134
    1584:	0000d124 	.word	0x0000d124
    1588:	1fff0770 	.word	0x1fff0770
    158c:	0000d06c 	.word	0x0000d06c
    1590:	0000d064 	.word	0x0000d064
    1594:	0000d114 	.word	0x0000d114
    1598:	0000d104 	.word	0x0000d104
    159c:	0000d0f8 	.word	0x0000d0f8
    15a0:	0000d0ec 	.word	0x0000d0ec
    15a4:	0000d0e0 	.word	0x0000d0e0
    15a8:	0000d0d4 	.word	0x0000d0d4
    15ac:	0000d0c8 	.word	0x0000d0c8
    15b0:	0000d0bc 	.word	0x0000d0bc
    15b4:	0000d088 	.word	0x0000d088
    15b8:	0000d098 	.word	0x0000d098

000015bc <autoBaud1()>:
void autoBaud1(){
    15bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_error_t error_message;
    15c0:	f8df e12c 	ldr.w	lr, [pc, #300]	; 16f0 <autoBaud1()+0x134>
    15c4:	f8df 812c 	ldr.w	r8, [pc, #300]	; 16f4 <autoBaud1()+0x138>
    15c8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 16f8 <autoBaud1()+0x13c>
    15cc:	4c3f      	ldr	r4, [pc, #252]	; (16cc <autoBaud1()+0x110>)
    15ce:	4e40      	ldr	r6, [pc, #256]	; (16d0 <autoBaud1()+0x114>)
    Can1.setBaudRate(Can1_bitrate);
    15d0:	4d40      	ldr	r5, [pc, #256]	; (16d4 <autoBaud1()+0x118>)
    15d2:	f8df b128 	ldr.w	fp, [pc, #296]	; 16fc <autoBaud1()+0x140>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    15d6:	f8df a110 	ldr.w	sl, [pc, #272]	; 16e8 <autoBaud1()+0x12c>
      if (RXCount1 > 0) {
    15da:	4f3f      	ldr	r7, [pc, #252]	; (16d8 <autoBaud1()+0x11c>)
  CAN_error_t error_message;
    15dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
void autoBaud1(){
    15e0:	b095      	sub	sp, #84	; 0x54
  CAN_error_t error_message;
    15e2:	f10d 0c10 	add.w	ip, sp, #16
    15e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    15ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    15ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    15f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    15f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    15fa:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    15fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    Can1_bitrate = baud_rates[i];
    1602:	f858 1b04 	ldr.w	r1, [r8], #4
    1606:	f8c9 1000 	str.w	r1, [r9]
    Can1.setBaudRate(Can1_bitrate);
    160a:	2200      	movs	r2, #0
    160c:	4628      	mov	r0, r5
    160e:	f7fe ff55 	bl	4bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
    1612:	2120      	movs	r1, #32
    1614:	4658      	mov	r0, fp
    1616:	f004 fb23 	bl	5c60 <usb_serial_write>
    161a:	2300      	movs	r3, #0
    161c:	220a      	movs	r2, #10
    161e:	f8d9 1000 	ldr.w	r1, [r9]
    1622:	4650      	mov	r0, sl
    1624:	f003 facc 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1628:	2105      	movs	r1, #5
    162a:	482c      	ldr	r0, [pc, #176]	; (16dc <autoBaud1()+0x120>)
    162c:	f004 fb18 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1630:	4650      	mov	r0, sl
    1632:	f003 fa9f 	bl	4b74 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1636:	6823      	ldr	r3, [r4, #0]
    1638:	9301      	str	r3, [sp, #4]
	return ret;
    163a:	9b01      	ldr	r3, [sp, #4]
    163c:	4619      	mov	r1, r3
    163e:	6031      	str	r1, [r6, #0]
    1640:	e006      	b.n	1650 <autoBaud1()+0x94>
      if (RXCount1 > 0) {
    1642:	683b      	ldr	r3, [r7, #0]
    1644:	bb3b      	cbnz	r3, 1696 <autoBaud1()+0xda>
      if (Can1.error(error_message,true)){
    1646:	f7ff fe77 	bl	1338 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)>
    164a:	2800      	cmp	r0, #0
    164c:	d138      	bne.n	16c0 <autoBaud1()+0x104>
	operator unsigned long () const { return millis() - ms; }
    164e:	6831      	ldr	r1, [r6, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1650:	6823      	ldr	r3, [r4, #0]
    1652:	9303      	str	r3, [sp, #12]
	return ret;
    1654:	9b03      	ldr	r3, [sp, #12]
    1656:	1a5b      	subs	r3, r3, r1
    while (routine_time < AUTOBAUD_TIMEOUT)
    1658:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
      if (Can1.error(error_message,true)){
    165c:	f04f 0201 	mov.w	r2, #1
    1660:	a904      	add	r1, sp, #16
    1662:	4628      	mov	r0, r5
    while (routine_time < AUTOBAUD_TIMEOUT)
    1664:	d3ed      	bcc.n	1642 <autoBaud1()+0x86>
  for (uint8_t i = 0; i<NUM_BAUD_RATES;  i++ ){
    1666:	4b1e      	ldr	r3, [pc, #120]	; (16e0 <autoBaud1()+0x124>)
    1668:	4598      	cmp	r8, r3
    166a:	d1ca      	bne.n	1602 <autoBaud1()+0x46>
    166c:	2121      	movs	r1, #33	; 0x21
    166e:	481d      	ldr	r0, [pc, #116]	; (16e4 <autoBaud1()+0x128>)
    1670:	f004 faf6 	bl	5c60 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1674:	2300      	movs	r3, #0
    1676:	220a      	movs	r2, #10
    1678:	f8d9 1000 	ldr.w	r1, [r9]
    167c:	481a      	ldr	r0, [pc, #104]	; (16e8 <autoBaud1()+0x12c>)
    167e:	f003 fa9f 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1682:	2105      	movs	r1, #5
    1684:	4815      	ldr	r0, [pc, #84]	; (16dc <autoBaud1()+0x120>)
    1686:	f004 faeb 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    168a:	4817      	ldr	r0, [pc, #92]	; (16e8 <autoBaud1()+0x12c>)
    168c:	f003 fa72 	bl	4b74 <Print::println()>
}
    1690:	b015      	add	sp, #84	; 0x54
    1692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1696:	2126      	movs	r1, #38	; 0x26
    1698:	4814      	ldr	r0, [pc, #80]	; (16ec <autoBaud1()+0x130>)
    169a:	f004 fae1 	bl	5c60 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    169e:	2300      	movs	r3, #0
    16a0:	220a      	movs	r2, #10
    16a2:	f8d9 1000 	ldr.w	r1, [r9]
    16a6:	4810      	ldr	r0, [pc, #64]	; (16e8 <autoBaud1()+0x12c>)
    16a8:	f003 fa8a 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    16ac:	2105      	movs	r1, #5
    16ae:	480b      	ldr	r0, [pc, #44]	; (16dc <autoBaud1()+0x120>)
    16b0:	f004 fad6 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    16b4:	480c      	ldr	r0, [pc, #48]	; (16e8 <autoBaud1()+0x12c>)
    16b6:	f003 fa5d 	bl	4b74 <Print::println()>
    16ba:	b015      	add	sp, #84	; 0x54
    16bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16c0:	6823      	ldr	r3, [r4, #0]
    16c2:	9302      	str	r3, [sp, #8]
	return ret;
    16c4:	9902      	ldr	r1, [sp, #8]
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    16c6:	f5a1 71c8 	sub.w	r1, r1, #400	; 0x190
    16ca:	e7b8      	b.n	163e <autoBaud1()+0x82>
    16cc:	1fff628c 	.word	0x1fff628c
    16d0:	1fff6274 	.word	0x1fff6274
    16d4:	1fff3824 	.word	0x1fff3824
    16d8:	1fff6154 	.word	0x1fff6154
    16dc:	0000d168 	.word	0x0000d168
    16e0:	1fff074c 	.word	0x1fff074c
    16e4:	0000d208 	.word	0x0000d208
    16e8:	1fff0770 	.word	0x1fff0770
    16ec:	0000d1e0 	.word	0x0000d1e0
    16f0:	0000d46c 	.word	0x0000d46c
    16f4:	1fff0734 	.word	0x1fff0734
    16f8:	1fff613c 	.word	0x1fff613c
    16fc:	0000d1bc 	.word	0x0000d1bc

00001700 <setup>:
void setup() {
    1700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  setSyncProvider(getTeensy3Time);
    1704:	4862      	ldr	r0, [pc, #392]	; (1890 <setup+0x190>)
  RED_LED_state = HIGH;
    1706:	4e63      	ldr	r6, [pc, #396]	; (1894 <setup+0x194>)
  YELLOW_LED_state = HIGH;
    1708:	4f63      	ldr	r7, [pc, #396]	; (1898 <setup+0x198>)
  BLUE_LED_state = LOW;
    170a:	4d64      	ldr	r5, [pc, #400]	; (189c <setup+0x19c>)
  setSyncProvider(getTeensy3Time);
    170c:	f003 f8e6 	bl	48dc <setSyncProvider(long long (*)())>
  setSyncInterval(1);
    1710:	2001      	movs	r0, #1
    1712:	2100      	movs	r1, #0
    1714:	f003 f8f0 	bl	48f8 <setSyncInterval(long long)>
  pinMode(SILENT_0,OUTPUT);
    1718:	2101      	movs	r1, #1
    171a:	202a      	movs	r0, #42	; 0x2a
    171c:	f003 fcac 	bl	5078 <pinMode>
  pinMode(SILENT_1,OUTPUT);
    1720:	2101      	movs	r1, #1
    1722:	2029      	movs	r0, #41	; 0x29
    1724:	f003 fca8 	bl	5078 <pinMode>
  pinMode(SILENT_2,OUTPUT);
    1728:	2101      	movs	r1, #1
    172a:	2028      	movs	r0, #40	; 0x28
    172c:	f003 fca4 	bl	5078 <pinMode>
  digitalWrite(SILENT_0,LOW); 
    1730:	2100      	movs	r1, #0
    1732:	202a      	movs	r0, #42	; 0x2a
    1734:	f003 fc68 	bl	5008 <digitalWrite>
  digitalWrite(SILENT_1,LOW);
    1738:	2100      	movs	r1, #0
    173a:	2029      	movs	r0, #41	; 0x29
    173c:	f003 fc64 	bl	5008 <digitalWrite>
  digitalWrite(SILENT_2,LOW);
    1740:	2100      	movs	r1, #0
    1742:	2028      	movs	r0, #40	; 0x28
    1744:	f003 fc60 	bl	5008 <digitalWrite>
  pinMode(GREEN_LED, OUTPUT);
    1748:	2101      	movs	r1, #1
    174a:	2006      	movs	r0, #6
    174c:	f003 fc94 	bl	5078 <pinMode>
  pinMode(YELLOW_LED, OUTPUT);
    1750:	2101      	movs	r1, #1
    1752:	2005      	movs	r0, #5
    1754:	f003 fc90 	bl	5078 <pinMode>
  pinMode(RED_LED, OUTPUT);
    1758:	2101      	movs	r1, #1
    175a:	200e      	movs	r0, #14
    175c:	f003 fc8c 	bl	5078 <pinMode>
  pinMode(BLUE_LED, OUTPUT);
    1760:	2101      	movs	r1, #1
    1762:	2027      	movs	r0, #39	; 0x27
    1764:	f003 fc88 	bl	5078 <pinMode>
  GREEN_LED_state = HIGH;
    1768:	4b4d      	ldr	r3, [pc, #308]	; (18a0 <setup+0x1a0>)
    176a:	2101      	movs	r1, #1
  BLUE_LED_state = LOW;
    176c:	2400      	movs	r4, #0
  digitalWrite(GREEN_LED,GREEN_LED_state);
    176e:	2006      	movs	r0, #6
  GREEN_LED_state = HIGH;
    1770:	7019      	strb	r1, [r3, #0]
  RED_LED_state = HIGH;
    1772:	7031      	strb	r1, [r6, #0]
  YELLOW_LED_state = HIGH;
    1774:	7039      	strb	r1, [r7, #0]
  BLUE_LED_state = LOW;
    1776:	702c      	strb	r4, [r5, #0]
  digitalWrite(GREEN_LED,GREEN_LED_state);
    1778:	f003 fc46 	bl	5008 <digitalWrite>
  digitalWrite(YELLOW_LED,YELLOW_LED_state);
    177c:	7839      	ldrb	r1, [r7, #0]
    177e:	2005      	movs	r0, #5
    1780:	f003 fc42 	bl	5008 <digitalWrite>
  digitalWrite(RED_LED,RED_LED_state);
    1784:	7831      	ldrb	r1, [r6, #0]
  Can1_bitrate = baud_rates[0];
    1786:	4e47      	ldr	r6, [pc, #284]	; (18a4 <setup+0x1a4>)
  digitalWrite(RED_LED,RED_LED_state);
    1788:	200e      	movs	r0, #14
    178a:	f003 fc3d 	bl	5008 <digitalWrite>
  digitalWrite(BLUE_LED,BLUE_LED_state);
    178e:	7829      	ldrb	r1, [r5, #0]
    1790:	2027      	movs	r0, #39	; 0x27
    1792:	f003 fc39 	bl	5008 <digitalWrite>
  pinMode(BUTTON_PIN,INPUT_PULLUP);
    1796:	2102      	movs	r1, #2
    1798:	201c      	movs	r0, #28
    179a:	f003 fc6d 	bl	5078 <pinMode>
  button.attachClick(myClickFunction);
    179e:	4942      	ldr	r1, [pc, #264]	; (18a8 <setup+0x1a8>)
    17a0:	4842      	ldr	r0, [pc, #264]	; (18ac <setup+0x1ac>)
    17a2:	f003 f8f1 	bl	4988 <OneButton::attachClick(void (*)())>
  button.attachLongPressStart(myLongPressStartFunction);
    17a6:	4942      	ldr	r1, [pc, #264]	; (18b0 <setup+0x1b0>)
    17a8:	4840      	ldr	r0, [pc, #256]	; (18ac <setup+0x1ac>)
    17aa:	f003 f8ef 	bl	498c <OneButton::attachLongPressStart(void (*)())>
  button.attachLongPressStop(myLongPressStopFunction);
    17ae:	4941      	ldr	r1, [pc, #260]	; (18b4 <setup+0x1b4>)
    17b0:	483e      	ldr	r0, [pc, #248]	; (18ac <setup+0x1ac>)
    17b2:	f003 f8ed 	bl	4990 <OneButton::attachLongPressStop(void (*)())>
  Can1.begin();
    17b6:	4840      	ldr	r0, [pc, #256]	; (18b8 <setup+0x1b8>)
    17b8:	f7ff fa6a 	bl	c90 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
  Can1_bitrate = baud_rates[0];
    17bc:	4b3f      	ldr	r3, [pc, #252]	; (18bc <setup+0x1bc>)
    17be:	6831      	ldr	r1, [r6, #0]
  Can1.setBaudRate(Can1_bitrate);
    17c0:	483d      	ldr	r0, [pc, #244]	; (18b8 <setup+0x1b8>)
  Can1_bitrate = baud_rates[0];
    17c2:	6019      	str	r1, [r3, #0]
  Can1.setBaudRate(Can1_bitrate);
    17c4:	4622      	mov	r2, r4
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
    17c6:	4c3e      	ldr	r4, [pc, #248]	; (18c0 <setup+0x1c0>)
    17c8:	f7fe fe78 	bl	4bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
    17cc:	6823      	ldr	r3, [r4, #0]
    17ce:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    17d2:	6023      	str	r3, [r4, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
    17d4:	6823      	ldr	r3, [r4, #0]
    17d6:	01da      	lsls	r2, r3, #7
    17d8:	d5fc      	bpl.n	17d4 <setup+0xd4>
    17da:	2000      	movs	r0, #0
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
    17dc:	6825      	ldr	r5, [r4, #0]
    17de:	f7ff f8e5 	bl	9ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  return FLEXCANb_IFLAG1(_bus);
    17e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
    17e4:	6323      	str	r3, [r4, #48]	; 0x30
  FLEXCANb_MCR(_bus) &= ~0x7F; // clear current value
    17e6:	6823      	ldr	r3, [r4, #0]
    17e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    17ec:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
    17ee:	6823      	ldr	r3, [r4, #0]
    17f0:	f043 030f 	orr.w	r3, r3, #15
    17f4:	6023      	str	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
    17f6:	00ab      	lsls	r3, r5, #2
    17f8:	f100 84f1 	bmi.w	21de <setup+0xade>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
    17fc:	4c30      	ldr	r4, [pc, #192]	; (18c0 <setup+0x1c0>)
    17fe:	6823      	ldr	r3, [r4, #0]
    1800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    1804:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
    1806:	6823      	ldr	r3, [r4, #0]
    1808:	01df      	lsls	r7, r3, #7
    180a:	d4fc      	bmi.n	1806 <setup+0x106>
  Can1.enableFIFO();
    180c:	2001      	movs	r0, #1
    180e:	f7ff f8cd 	bl	9ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
    1812:	6823      	ldr	r3, [r4, #0]
    1814:	009d      	lsls	r5, r3, #2
    1816:	d50a      	bpl.n	182e <setup+0x12e>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
    1818:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    181a:	0698      	lsls	r0, r3, #26
    181c:	d407      	bmi.n	182e <setup+0x12e>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
    181e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1820:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1824:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
    1826:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1828:	f043 0320 	orr.w	r3, r3, #32
    182c:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    182e:	4c24      	ldr	r4, [pc, #144]	; (18c0 <setup+0x1c0>)
  _mainHandler = handler;
    1830:	4a24      	ldr	r2, [pc, #144]	; (18c4 <setup+0x1c4>)
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    1832:	6823      	ldr	r3, [r4, #0]
  _mainHandler = handler;
    1834:	4924      	ldr	r1, [pc, #144]	; (18c8 <setup+0x1c8>)
    1836:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    183a:	f013 5a00 	ands.w	sl, r3, #536870912	; 0x20000000
    183e:	f040 8443 	bne.w	20c8 <setup+0x9c8>
    1842:	4822      	ldr	r0, [pc, #136]	; (18cc <setup+0x1cc>)
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    1844:	4d22      	ldr	r5, [pc, #136]	; (18d0 <setup+0x1d0>)
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    1846:	4f23      	ldr	r7, [pc, #140]	; (18d4 <setup+0x1d4>)
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1848:	f8df 808c 	ldr.w	r8, [pc, #140]	; 18d8 <setup+0x1d8>
    184c:	211a      	movs	r1, #26
    184e:	f004 fa07 	bl	5c60 <usb_serial_write>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    1852:	6823      	ldr	r3, [r4, #0]
    1854:	4654      	mov	r4, sl
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    1856:	eb04 0905 	add.w	r9, r4, r5
    185a:	ea4f 1909 	mov.w	r9, r9, lsl #4
    185e:	f8d9 3000 	ldr.w	r3, [r9]
    1862:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1866:	2b0e      	cmp	r3, #14
    1868:	f200 80c6 	bhi.w	19f8 <setup+0x2f8>
    186c:	e8df f013 	tbh	[pc, r3, lsl #1]
    1870:	0288029a 	.word	0x0288029a
    1874:	00c40276 	.word	0x00c40276
    1878:	00c4025b 	.word	0x00c4025b
    187c:	00c40249 	.word	0x00c40249
    1880:	02250237 	.word	0x02250237
    1884:	00c40213 	.word	0x00c40213
    1888:	00c40036 	.word	0x00c40036
    188c:	0201      	.short	0x0201
    188e:	bf00      	nop
    1890:	00000755 	.word	0x00000755
    1894:	1fff614c 	.word	0x1fff614c
    1898:	1fff6164 	.word	0x1fff6164
    189c:	1fff0f04 	.word	0x1fff0f04
    18a0:	1fff6144 	.word	0x1fff6144
    18a4:	1fff0734 	.word	0x1fff0734
    18a8:	00000485 	.word	0x00000485
    18ac:	1fff6170 	.word	0x1fff6170
    18b0:	000004a5 	.word	0x000004a5
    18b4:	000004b1 	.word	0x000004b1
    18b8:	1fff3824 	.word	0x1fff3824
    18bc:	1fff613c 	.word	0x1fff613c
    18c0:	400a4000 	.word	0x400a4000
    18c4:	1fff5824 	.word	0x1fff5824
    18c8:	00000c55 	.word	0x00000c55
    18cc:	0000d3c8 	.word	0x0000d3c8
    18d0:	0400a408 	.word	0x0400a408
    18d4:	400a408c 	.word	0x400a408c
    18d8:	bff5bf80 	.word	0xbff5bf80
    18dc:	2104      	movs	r1, #4
    18de:	4881      	ldr	r0, [pc, #516]	; (1ae4 <setup+0x3e4>)
    18e0:	f004 f9be 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    18e4:	2300      	movs	r3, #0
    18e6:	4651      	mov	r1, sl
    18e8:	220a      	movs	r2, #10
    18ea:	487f      	ldr	r0, [pc, #508]	; (1ae8 <setup+0x3e8>)
    18ec:	f003 f968 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    18f0:	211d      	movs	r1, #29
    18f2:	487e      	ldr	r0, [pc, #504]	; (1aec <setup+0x3ec>)
    18f4:	f004 f9b4 	bl	5c60 <usb_serial_write>
          uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    18f8:	f8d9 3000 	ldr.w	r3, [r9]
          (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    18fc:	0299      	lsls	r1, r3, #10
    18fe:	f140 847f 	bpl.w	2200 <setup+0xb00>
    1902:	487b      	ldr	r0, [pc, #492]	; (1af0 <setup+0x3f0>)
    1904:	2110      	movs	r1, #16
    1906:	f004 f9ab 	bl	5c60 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    190a:	f8d9 a008 	ldr.w	sl, [r9, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    190e:	f8d9 3004 	ldr.w	r3, [r9, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1912:	eb09 0b08 	add.w	fp, r9, r8
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1916:	f023 4960 	bic.w	r9, r3, #3758096384	; 0xe0000000
    191a:	2107      	movs	r1, #7
    191c:	4875      	ldr	r0, [pc, #468]	; (1af4 <setup+0x3f4>)
    191e:	f004 f99f 	bl	5c60 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    1922:	2300      	movs	r3, #0
    1924:	2210      	movs	r2, #16
    1926:	4649      	mov	r1, r9
    1928:	486f      	ldr	r0, [pc, #444]	; (1ae8 <setup+0x3e8>)
    192a:	f003 f949 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    192e:	2101      	movs	r1, #1
    1930:	4871      	ldr	r0, [pc, #452]	; (1af8 <setup+0x3f8>)
    1932:	f004 f995 	bl	5c60 <usb_serial_write>
    1936:	210a      	movs	r1, #10
    1938:	4870      	ldr	r0, [pc, #448]	; (1afc <setup+0x3fc>)
    193a:	f004 f991 	bl	5c60 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    193e:	2300      	movs	r3, #0
    1940:	2210      	movs	r2, #16
    1942:	ea4f 611a 	mov.w	r1, sl, lsr #24
    1946:	4868      	ldr	r0, [pc, #416]	; (1ae8 <setup+0x3e8>)
    1948:	f003 f93a 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    194c:	2101      	movs	r1, #1
    194e:	486c      	ldr	r0, [pc, #432]	; (1b00 <setup+0x400>)
    1950:	f004 f986 	bl	5c60 <usb_serial_write>
    1954:	2300      	movs	r3, #0
    1956:	2210      	movs	r2, #16
    1958:	f3ca 4107 	ubfx	r1, sl, #16, #8
    195c:	4862      	ldr	r0, [pc, #392]	; (1ae8 <setup+0x3e8>)
    195e:	f003 f92f 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1962:	2101      	movs	r1, #1
    1964:	4866      	ldr	r0, [pc, #408]	; (1b00 <setup+0x400>)
    1966:	f004 f97b 	bl	5c60 <usb_serial_write>
    196a:	2300      	movs	r3, #0
    196c:	2210      	movs	r2, #16
    196e:	f3ca 2107 	ubfx	r1, sl, #8, #8
    1972:	485d      	ldr	r0, [pc, #372]	; (1ae8 <setup+0x3e8>)
    1974:	f003 f924 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1978:	2101      	movs	r1, #1
    197a:	4861      	ldr	r0, [pc, #388]	; (1b00 <setup+0x400>)
    197c:	f004 f970 	bl	5c60 <usb_serial_write>
    1980:	2300      	movs	r3, #0
    1982:	2210      	movs	r2, #16
    1984:	fa5f f18a 	uxtb.w	r1, sl
    1988:	4857      	ldr	r0, [pc, #348]	; (1ae8 <setup+0x3e8>)
    198a:	f003 f919 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    198e:	f85b 9007 	ldr.w	r9, [fp, r7]
    1992:	485b      	ldr	r0, [pc, #364]	; (1b00 <setup+0x400>)
    1994:	2101      	movs	r1, #1
    1996:	f004 f963 	bl	5c60 <usb_serial_write>
    199a:	2300      	movs	r3, #0
    199c:	2210      	movs	r2, #16
    199e:	ea4f 6119 	mov.w	r1, r9, lsr #24
    19a2:	4851      	ldr	r0, [pc, #324]	; (1ae8 <setup+0x3e8>)
    19a4:	f003 f90c 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    19a8:	2101      	movs	r1, #1
    19aa:	4855      	ldr	r0, [pc, #340]	; (1b00 <setup+0x400>)
    19ac:	f004 f958 	bl	5c60 <usb_serial_write>
    19b0:	2300      	movs	r3, #0
    19b2:	2210      	movs	r2, #16
    19b4:	f3c9 4107 	ubfx	r1, r9, #16, #8
    19b8:	484b      	ldr	r0, [pc, #300]	; (1ae8 <setup+0x3e8>)
    19ba:	f003 f901 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    19be:	2101      	movs	r1, #1
    19c0:	484f      	ldr	r0, [pc, #316]	; (1b00 <setup+0x400>)
    19c2:	f004 f94d 	bl	5c60 <usb_serial_write>
    19c6:	2300      	movs	r3, #0
    19c8:	2210      	movs	r2, #16
    19ca:	f3c9 2107 	ubfx	r1, r9, #8, #8
    19ce:	4846      	ldr	r0, [pc, #280]	; (1ae8 <setup+0x3e8>)
    19d0:	f003 f8f6 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    19d4:	2101      	movs	r1, #1
    19d6:	484a      	ldr	r0, [pc, #296]	; (1b00 <setup+0x400>)
    19d8:	f004 f942 	bl	5c60 <usb_serial_write>
    19dc:	fa5f f189 	uxtb.w	r1, r9
    19e0:	2300      	movs	r3, #0
    19e2:	2210      	movs	r2, #16
    19e4:	4840      	ldr	r0, [pc, #256]	; (1ae8 <setup+0x3e8>)
    19e6:	f003 f8eb 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    19ea:	4843      	ldr	r0, [pc, #268]	; (1af8 <setup+0x3f8>)
    19ec:	2101      	movs	r1, #1
    19ee:	f004 f937 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    19f2:	483d      	ldr	r0, [pc, #244]	; (1ae8 <setup+0x3e8>)
    19f4:	f003 f8be 	bl	4b74 <Print::println()>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    19f8:	4b42      	ldr	r3, [pc, #264]	; (1b04 <setup+0x404>)
    19fa:	681b      	ldr	r3, [r3, #0]
    19fc:	3401      	adds	r4, #1
    19fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1a02:	b2e4      	uxtb	r4, r4
    1a04:	3301      	adds	r3, #1
    1a06:	429c      	cmp	r4, r3
    1a08:	46a2      	mov	sl, r4
    1a0a:	f4ff af24 	bcc.w	1856 <setup+0x156>
  Can0.begin();
    1a0e:	483e      	ldr	r0, [pc, #248]	; (1b08 <setup+0x408>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
    1a10:	4c3e      	ldr	r4, [pc, #248]	; (1b0c <setup+0x40c>)
    1a12:	f7ff f9d3 	bl	dbc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
  Can0_bitrate = baud_rates[0];
    1a16:	4b3e      	ldr	r3, [pc, #248]	; (1b10 <setup+0x410>)
    1a18:	6831      	ldr	r1, [r6, #0]
  Can0.setBaudRate(Can0_bitrate);
    1a1a:	483b      	ldr	r0, [pc, #236]	; (1b08 <setup+0x408>)
  Can0_bitrate = baud_rates[0];
    1a1c:	6019      	str	r1, [r3, #0]
  Can0.setBaudRate(Can0_bitrate);
    1a1e:	2200      	movs	r2, #0
    1a20:	f7fe fdec 	bl	5fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
    1a24:	6823      	ldr	r3, [r4, #0]
    1a26:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    1a2a:	6023      	str	r3, [r4, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
    1a2c:	6823      	ldr	r3, [r4, #0]
    1a2e:	01da      	lsls	r2, r3, #7
    1a30:	d5fc      	bpl.n	1a2c <setup+0x32c>
    1a32:	2000      	movs	r0, #0
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
    1a34:	6825      	ldr	r5, [r4, #0]
    1a36:	f7fe feed 	bl	814 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  return FLEXCANb_IFLAG1(_bus);
    1a3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
    1a3c:	6323      	str	r3, [r4, #48]	; 0x30
  FLEXCANb_MCR(_bus) &= ~0x7F; // clear current value
    1a3e:	6823      	ldr	r3, [r4, #0]
    1a40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1a44:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
    1a46:	6823      	ldr	r3, [r4, #0]
    1a48:	f043 030f 	orr.w	r3, r3, #15
    1a4c:	6023      	str	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
    1a4e:	00ab      	lsls	r3, r5, #2
    1a50:	f100 83c1 	bmi.w	21d6 <setup+0xad6>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
    1a54:	4c2d      	ldr	r4, [pc, #180]	; (1b0c <setup+0x40c>)
    1a56:	6823      	ldr	r3, [r4, #0]
    1a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    1a5c:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
    1a5e:	6823      	ldr	r3, [r4, #0]
    1a60:	01df      	lsls	r7, r3, #7
    1a62:	d4fc      	bmi.n	1a5e <setup+0x35e>
  Can0.enableFIFO();
    1a64:	2001      	movs	r0, #1
    1a66:	f7fe fed5 	bl	814 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
    1a6a:	6823      	ldr	r3, [r4, #0]
    1a6c:	009e      	lsls	r6, r3, #2
    1a6e:	d50a      	bpl.n	1a86 <setup+0x386>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
    1a70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a72:	069d      	lsls	r5, r3, #26
    1a74:	d407      	bmi.n	1a86 <setup+0x386>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
    1a76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1a7c:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
    1a7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a80:	f043 0320 	orr.w	r3, r3, #32
    1a84:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    1a86:	4c21      	ldr	r4, [pc, #132]	; (1b0c <setup+0x40c>)
  _mainHandler = handler;
    1a88:	4a22      	ldr	r2, [pc, #136]	; (1b14 <setup+0x414>)
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    1a8a:	6823      	ldr	r3, [r4, #0]
  _mainHandler = handler;
    1a8c:	4922      	ldr	r1, [pc, #136]	; (1b18 <setup+0x418>)
    1a8e:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    1a92:	f013 5900 	ands.w	r9, r3, #536870912	; 0x20000000
    1a96:	f040 826c 	bne.w	1f72 <setup+0x872>
    1a9a:	4820      	ldr	r0, [pc, #128]	; (1b1c <setup+0x41c>)
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    1a9c:	4d20      	ldr	r5, [pc, #128]	; (1b20 <setup+0x420>)
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    1a9e:	4e21      	ldr	r6, [pc, #132]	; (1b24 <setup+0x424>)
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1aa0:	4f21      	ldr	r7, [pc, #132]	; (1b28 <setup+0x428>)
    1aa2:	211a      	movs	r1, #26
    1aa4:	f004 f8dc 	bl	5c60 <usb_serial_write>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    1aa8:	6823      	ldr	r3, [r4, #0]
    1aaa:	464c      	mov	r4, r9
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    1aac:	eb04 0805 	add.w	r8, r4, r5
    1ab0:	ea4f 1808 	mov.w	r8, r8, lsl #4
    1ab4:	f8d8 3000 	ldr.w	r3, [r8]
    1ab8:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1abc:	2b0e      	cmp	r3, #14
    1abe:	f200 80c2 	bhi.w	1c46 <setup+0x546>
    1ac2:	e8df f013 	tbh	[pc, r3, lsl #1]
    1ac6:	0244      	.short	0x0244
    1ac8:	02200232 	.word	0x02200232
    1acc:	020500c0 	.word	0x020500c0
    1ad0:	01f300c0 	.word	0x01f300c0
    1ad4:	01b700c0 	.word	0x01b700c0
    1ad8:	019301a5 	.word	0x019301a5
    1adc:	003300c0 	.word	0x003300c0
    1ae0:	018100c0 	.word	0x018100c0
    1ae4:	0000d298 	.word	0x0000d298
    1ae8:	1fff0770 	.word	0x1fff0770
    1aec:	0000d358 	.word	0x0000d358
    1af0:	0000d378 	.word	0x0000d378
    1af4:	0000d3a0 	.word	0x0000d3a0
    1af8:	0000d2d4 	.word	0x0000d2d4
    1afc:	0000d3a8 	.word	0x0000d3a8
    1b00:	0000d23c 	.word	0x0000d23c
    1b04:	400a4000 	.word	0x400a4000
    1b08:	1fff0f08 	.word	0x1fff0f08
    1b0c:	40024000 	.word	0x40024000
    1b10:	1fff3820 	.word	0x1fff3820
    1b14:	1fff2f08 	.word	0x1fff2f08
    1b18:	00000c15 	.word	0x00000c15
    1b1c:	0000d3c8 	.word	0x0000d3c8
    1b20:	04002408 	.word	0x04002408
    1b24:	4002408c 	.word	0x4002408c
    1b28:	bffdbf80 	.word	0xbffdbf80
    1b2c:	2104      	movs	r1, #4
    1b2e:	48ca      	ldr	r0, [pc, #808]	; (1e58 <setup+0x758>)
    1b30:	f004 f896 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1b34:	2300      	movs	r3, #0
    1b36:	4649      	mov	r1, r9
    1b38:	220a      	movs	r2, #10
    1b3a:	48c8      	ldr	r0, [pc, #800]	; (1e5c <setup+0x75c>)
    1b3c:	f003 f840 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b40:	48c7      	ldr	r0, [pc, #796]	; (1e60 <setup+0x760>)
    1b42:	211d      	movs	r1, #29
    1b44:	f004 f88c 	bl	5c60 <usb_serial_write>
          uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    1b48:	f8d8 3000 	ldr.w	r3, [r8]
          (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    1b4c:	029b      	lsls	r3, r3, #10
    1b4e:	f140 834b 	bpl.w	21e8 <setup+0xae8>
    1b52:	48c4      	ldr	r0, [pc, #784]	; (1e64 <setup+0x764>)
    1b54:	2110      	movs	r1, #16
    1b56:	f004 f883 	bl	5c60 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1b5a:	f8d8 9008 	ldr.w	r9, [r8, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1b5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1b62:	44b8      	add	r8, r7
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1b64:	f023 4a60 	bic.w	sl, r3, #3758096384	; 0xe0000000
    1b68:	2107      	movs	r1, #7
    1b6a:	48bf      	ldr	r0, [pc, #764]	; (1e68 <setup+0x768>)
    1b6c:	f004 f878 	bl	5c60 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    1b70:	2300      	movs	r3, #0
    1b72:	2210      	movs	r2, #16
    1b74:	4651      	mov	r1, sl
    1b76:	48b9      	ldr	r0, [pc, #740]	; (1e5c <setup+0x75c>)
    1b78:	f003 f822 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b7c:	2101      	movs	r1, #1
    1b7e:	48bb      	ldr	r0, [pc, #748]	; (1e6c <setup+0x76c>)
    1b80:	f004 f86e 	bl	5c60 <usb_serial_write>
    1b84:	210a      	movs	r1, #10
    1b86:	48ba      	ldr	r0, [pc, #744]	; (1e70 <setup+0x770>)
    1b88:	f004 f86a 	bl	5c60 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1b8c:	2300      	movs	r3, #0
    1b8e:	2210      	movs	r2, #16
    1b90:	ea4f 6119 	mov.w	r1, r9, lsr #24
    1b94:	48b1      	ldr	r0, [pc, #708]	; (1e5c <setup+0x75c>)
    1b96:	f003 f813 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b9a:	2101      	movs	r1, #1
    1b9c:	48b5      	ldr	r0, [pc, #724]	; (1e74 <setup+0x774>)
    1b9e:	f004 f85f 	bl	5c60 <usb_serial_write>
    1ba2:	2300      	movs	r3, #0
    1ba4:	2210      	movs	r2, #16
    1ba6:	f3c9 4107 	ubfx	r1, r9, #16, #8
    1baa:	48ac      	ldr	r0, [pc, #688]	; (1e5c <setup+0x75c>)
    1bac:	f003 f808 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bb0:	2101      	movs	r1, #1
    1bb2:	48b0      	ldr	r0, [pc, #704]	; (1e74 <setup+0x774>)
    1bb4:	f004 f854 	bl	5c60 <usb_serial_write>
    1bb8:	2300      	movs	r3, #0
    1bba:	2210      	movs	r2, #16
    1bbc:	f3c9 2107 	ubfx	r1, r9, #8, #8
    1bc0:	48a6      	ldr	r0, [pc, #664]	; (1e5c <setup+0x75c>)
    1bc2:	f002 fffd 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bc6:	2101      	movs	r1, #1
    1bc8:	48aa      	ldr	r0, [pc, #680]	; (1e74 <setup+0x774>)
    1bca:	f004 f849 	bl	5c60 <usb_serial_write>
    1bce:	2300      	movs	r3, #0
    1bd0:	2210      	movs	r2, #16
    1bd2:	fa5f f189 	uxtb.w	r1, r9
    1bd6:	48a1      	ldr	r0, [pc, #644]	; (1e5c <setup+0x75c>)
    1bd8:	f002 fff2 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    1bdc:	f858 8006 	ldr.w	r8, [r8, r6]
    1be0:	48a4      	ldr	r0, [pc, #656]	; (1e74 <setup+0x774>)
    1be2:	2101      	movs	r1, #1
    1be4:	f004 f83c 	bl	5c60 <usb_serial_write>
    1be8:	2300      	movs	r3, #0
    1bea:	2210      	movs	r2, #16
    1bec:	ea4f 6118 	mov.w	r1, r8, lsr #24
    1bf0:	489a      	ldr	r0, [pc, #616]	; (1e5c <setup+0x75c>)
    1bf2:	f002 ffe5 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bf6:	2101      	movs	r1, #1
    1bf8:	489e      	ldr	r0, [pc, #632]	; (1e74 <setup+0x774>)
    1bfa:	f004 f831 	bl	5c60 <usb_serial_write>
    1bfe:	2300      	movs	r3, #0
    1c00:	2210      	movs	r2, #16
    1c02:	f3c8 4107 	ubfx	r1, r8, #16, #8
    1c06:	4895      	ldr	r0, [pc, #596]	; (1e5c <setup+0x75c>)
    1c08:	f002 ffda 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c0c:	2101      	movs	r1, #1
    1c0e:	4899      	ldr	r0, [pc, #612]	; (1e74 <setup+0x774>)
    1c10:	f004 f826 	bl	5c60 <usb_serial_write>
    1c14:	2300      	movs	r3, #0
    1c16:	2210      	movs	r2, #16
    1c18:	f3c8 2107 	ubfx	r1, r8, #8, #8
    1c1c:	488f      	ldr	r0, [pc, #572]	; (1e5c <setup+0x75c>)
    1c1e:	f002 ffcf 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c22:	2101      	movs	r1, #1
    1c24:	4893      	ldr	r0, [pc, #588]	; (1e74 <setup+0x774>)
    1c26:	f004 f81b 	bl	5c60 <usb_serial_write>
    1c2a:	fa5f f188 	uxtb.w	r1, r8
    1c2e:	2300      	movs	r3, #0
    1c30:	2210      	movs	r2, #16
    1c32:	488a      	ldr	r0, [pc, #552]	; (1e5c <setup+0x75c>)
    1c34:	f002 ffc4 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c38:	488c      	ldr	r0, [pc, #560]	; (1e6c <setup+0x76c>)
    1c3a:	2101      	movs	r1, #1
    1c3c:	f004 f810 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1c40:	4886      	ldr	r0, [pc, #536]	; (1e5c <setup+0x75c>)
    1c42:	f002 ff97 	bl	4b74 <Print::println()>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    1c46:	4b8c      	ldr	r3, [pc, #560]	; (1e78 <setup+0x778>)
    1c48:	681b      	ldr	r3, [r3, #0]
    1c4a:	3401      	adds	r4, #1
    1c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1c50:	b2e4      	uxtb	r4, r4
    1c52:	3301      	adds	r3, #1
    1c54:	429c      	cmp	r4, r3
    1c56:	46a1      	mov	r9, r4
    1c58:	f4ff af28 	bcc.w	1aac <setup+0x3ac>
  autoBaud0(); 
    1c5c:	f7ff faca 	bl	11f4 <autoBaud0()>
  autoBaud1();
    1c60:	f7ff fcac 	bl	15bc <autoBaud1()>
  txmsg.flags.extended = 1;
    1c64:	4b85      	ldr	r3, [pc, #532]	; (1e7c <setup+0x77c>)
  txmsg.len = 8;  
    1c66:	2208      	movs	r2, #8
  txmsg.flags.extended = 1;
    1c68:	2101      	movs	r1, #1
  txmsg.len = 8;  
    1c6a:	72da      	strb	r2, [r3, #11]
  txmsg.flags.extended = 1;
    1c6c:	71d9      	strb	r1, [r3, #7]
}
    1c6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c72:	2104      	movs	r1, #4
    1c74:	4878      	ldr	r0, [pc, #480]	; (1e58 <setup+0x758>)
    1c76:	f003 fff3 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1c7a:	4651      	mov	r1, sl
    1c7c:	2300      	movs	r3, #0
    1c7e:	220a      	movs	r2, #10
    1c80:	4876      	ldr	r0, [pc, #472]	; (1e5c <setup+0x75c>)
    1c82:	f002 ff9d 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c86:	2111      	movs	r1, #17
    1c88:	487d      	ldr	r0, [pc, #500]	; (1e80 <setup+0x780>)
    1c8a:	f003 ffe9 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1c8e:	4873      	ldr	r0, [pc, #460]	; (1e5c <setup+0x75c>)
    1c90:	f002 ff70 	bl	4b74 <Print::println()>
    1c94:	e6b0      	b.n	19f8 <setup+0x2f8>
    1c96:	2104      	movs	r1, #4
    1c98:	486f      	ldr	r0, [pc, #444]	; (1e58 <setup+0x758>)
    1c9a:	f003 ffe1 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1c9e:	4651      	mov	r1, sl
    1ca0:	2300      	movs	r3, #0
    1ca2:	220a      	movs	r2, #10
    1ca4:	486d      	ldr	r0, [pc, #436]	; (1e5c <setup+0x75c>)
    1ca6:	f002 ff8b 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1caa:	2111      	movs	r1, #17
    1cac:	4875      	ldr	r0, [pc, #468]	; (1e84 <setup+0x784>)
    1cae:	f003 ffd7 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1cb2:	486a      	ldr	r0, [pc, #424]	; (1e5c <setup+0x75c>)
    1cb4:	f002 ff5e 	bl	4b74 <Print::println()>
    1cb8:	e69e      	b.n	19f8 <setup+0x2f8>
    1cba:	2104      	movs	r1, #4
    1cbc:	4866      	ldr	r0, [pc, #408]	; (1e58 <setup+0x758>)
    1cbe:	f003 ffcf 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1cc2:	4651      	mov	r1, sl
    1cc4:	2300      	movs	r3, #0
    1cc6:	220a      	movs	r2, #10
    1cc8:	4864      	ldr	r0, [pc, #400]	; (1e5c <setup+0x75c>)
    1cca:	f002 ff79 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1cce:	210f      	movs	r1, #15
    1cd0:	486d      	ldr	r0, [pc, #436]	; (1e88 <setup+0x788>)
    1cd2:	f003 ffc5 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1cd6:	4861      	ldr	r0, [pc, #388]	; (1e5c <setup+0x75c>)
    1cd8:	f002 ff4c 	bl	4b74 <Print::println()>
    1cdc:	e68c      	b.n	19f8 <setup+0x2f8>
    1cde:	2104      	movs	r1, #4
    1ce0:	485d      	ldr	r0, [pc, #372]	; (1e58 <setup+0x758>)
    1ce2:	f003 ffbd 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1ce6:	4651      	mov	r1, sl
    1ce8:	2300      	movs	r3, #0
    1cea:	220a      	movs	r2, #10
    1cec:	485b      	ldr	r0, [pc, #364]	; (1e5c <setup+0x75c>)
    1cee:	f002 ff67 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1cf2:	2112      	movs	r1, #18
    1cf4:	4865      	ldr	r0, [pc, #404]	; (1e8c <setup+0x78c>)
    1cf6:	f003 ffb3 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1cfa:	4858      	ldr	r0, [pc, #352]	; (1e5c <setup+0x75c>)
    1cfc:	f002 ff3a 	bl	4b74 <Print::println()>
    1d00:	e67a      	b.n	19f8 <setup+0x2f8>
    1d02:	2104      	movs	r1, #4
    1d04:	4854      	ldr	r0, [pc, #336]	; (1e58 <setup+0x758>)
    1d06:	f003 ffab 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1d0a:	4651      	mov	r1, sl
    1d0c:	2300      	movs	r3, #0
    1d0e:	220a      	movs	r2, #10
    1d10:	4852      	ldr	r0, [pc, #328]	; (1e5c <setup+0x75c>)
    1d12:	f002 ff55 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1d16:	2111      	movs	r1, #17
    1d18:	485d      	ldr	r0, [pc, #372]	; (1e90 <setup+0x790>)
    1d1a:	f003 ffa1 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1d1e:	484f      	ldr	r0, [pc, #316]	; (1e5c <setup+0x75c>)
    1d20:	f002 ff28 	bl	4b74 <Print::println()>
    1d24:	e668      	b.n	19f8 <setup+0x2f8>
    1d26:	2104      	movs	r1, #4
    1d28:	484b      	ldr	r0, [pc, #300]	; (1e58 <setup+0x758>)
    1d2a:	f003 ff99 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1d2e:	220a      	movs	r2, #10
    1d30:	4651      	mov	r1, sl
    1d32:	2300      	movs	r3, #0
    1d34:	4849      	ldr	r0, [pc, #292]	; (1e5c <setup+0x75c>)
    1d36:	f002 ff43 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1d3a:	210f      	movs	r1, #15
    1d3c:	4855      	ldr	r0, [pc, #340]	; (1e94 <setup+0x794>)
    1d3e:	f003 ff8f 	bl	5c60 <usb_serial_write>
          (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    1d42:	f8d9 3000 	ldr.w	r3, [r9]
    1d46:	0298      	lsls	r0, r3, #10
    1d48:	bf4c      	ite	mi
    1d4a:	4853      	ldrmi	r0, [pc, #332]	; (1e98 <setup+0x798>)
    1d4c:	4853      	ldrpl	r0, [pc, #332]	; (1e9c <setup+0x79c>)
    1d4e:	2111      	movs	r1, #17
    1d50:	f003 ff86 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1d54:	4841      	ldr	r0, [pc, #260]	; (1e5c <setup+0x75c>)
    1d56:	f002 ff0d 	bl	4b74 <Print::println()>
    1d5a:	e64d      	b.n	19f8 <setup+0x2f8>
    1d5c:	2104      	movs	r1, #4
    1d5e:	483e      	ldr	r0, [pc, #248]	; (1e58 <setup+0x758>)
    1d60:	f003 ff7e 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1d64:	4651      	mov	r1, sl
    1d66:	2300      	movs	r3, #0
    1d68:	220a      	movs	r2, #10
    1d6a:	483c      	ldr	r0, [pc, #240]	; (1e5c <setup+0x75c>)
    1d6c:	f002 ff28 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1d70:	210e      	movs	r1, #14
    1d72:	484b      	ldr	r0, [pc, #300]	; (1ea0 <setup+0x7a0>)
    1d74:	f003 ff74 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1d78:	4838      	ldr	r0, [pc, #224]	; (1e5c <setup+0x75c>)
    1d7a:	f002 fefb 	bl	4b74 <Print::println()>
    1d7e:	e63b      	b.n	19f8 <setup+0x2f8>
    1d80:	2104      	movs	r1, #4
    1d82:	4835      	ldr	r0, [pc, #212]	; (1e58 <setup+0x758>)
    1d84:	f003 ff6c 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1d88:	4651      	mov	r1, sl
    1d8a:	2300      	movs	r3, #0
    1d8c:	220a      	movs	r2, #10
    1d8e:	4833      	ldr	r0, [pc, #204]	; (1e5c <setup+0x75c>)
    1d90:	f002 ff16 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1d94:	210e      	movs	r1, #14
    1d96:	4843      	ldr	r0, [pc, #268]	; (1ea4 <setup+0x7a4>)
    1d98:	f003 ff62 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1d9c:	482f      	ldr	r0, [pc, #188]	; (1e5c <setup+0x75c>)
    1d9e:	f002 fee9 	bl	4b74 <Print::println()>
    1da2:	e629      	b.n	19f8 <setup+0x2f8>
    1da4:	2104      	movs	r1, #4
    1da6:	482c      	ldr	r0, [pc, #176]	; (1e58 <setup+0x758>)
    1da8:	f003 ff5a 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1dac:	4651      	mov	r1, sl
    1dae:	2300      	movs	r3, #0
    1db0:	220a      	movs	r2, #10
    1db2:	482a      	ldr	r0, [pc, #168]	; (1e5c <setup+0x75c>)
    1db4:	f002 ff04 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1db8:	2112      	movs	r1, #18
    1dba:	483b      	ldr	r0, [pc, #236]	; (1ea8 <setup+0x7a8>)
    1dbc:	f003 ff50 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1dc0:	4826      	ldr	r0, [pc, #152]	; (1e5c <setup+0x75c>)
    1dc2:	f002 fed7 	bl	4b74 <Print::println()>
    1dc6:	e617      	b.n	19f8 <setup+0x2f8>
    1dc8:	2104      	movs	r1, #4
    1dca:	4823      	ldr	r0, [pc, #140]	; (1e58 <setup+0x758>)
    1dcc:	f003 ff48 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1dd0:	4649      	mov	r1, r9
    1dd2:	2300      	movs	r3, #0
    1dd4:	220a      	movs	r2, #10
    1dd6:	4821      	ldr	r0, [pc, #132]	; (1e5c <setup+0x75c>)
    1dd8:	f002 fef2 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ddc:	2111      	movs	r1, #17
    1dde:	4828      	ldr	r0, [pc, #160]	; (1e80 <setup+0x780>)
    1de0:	f003 ff3e 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1de4:	481d      	ldr	r0, [pc, #116]	; (1e5c <setup+0x75c>)
    1de6:	f002 fec5 	bl	4b74 <Print::println()>
    1dea:	e72c      	b.n	1c46 <setup+0x546>
    1dec:	2104      	movs	r1, #4
    1dee:	481a      	ldr	r0, [pc, #104]	; (1e58 <setup+0x758>)
    1df0:	f003 ff36 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1df4:	4649      	mov	r1, r9
    1df6:	2300      	movs	r3, #0
    1df8:	220a      	movs	r2, #10
    1dfa:	4818      	ldr	r0, [pc, #96]	; (1e5c <setup+0x75c>)
    1dfc:	f002 fee0 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e00:	2111      	movs	r1, #17
    1e02:	4820      	ldr	r0, [pc, #128]	; (1e84 <setup+0x784>)
    1e04:	f003 ff2c 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1e08:	4814      	ldr	r0, [pc, #80]	; (1e5c <setup+0x75c>)
    1e0a:	f002 feb3 	bl	4b74 <Print::println()>
    1e0e:	e71a      	b.n	1c46 <setup+0x546>
    1e10:	2104      	movs	r1, #4
    1e12:	4811      	ldr	r0, [pc, #68]	; (1e58 <setup+0x758>)
    1e14:	f003 ff24 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1e18:	4649      	mov	r1, r9
    1e1a:	2300      	movs	r3, #0
    1e1c:	220a      	movs	r2, #10
    1e1e:	480f      	ldr	r0, [pc, #60]	; (1e5c <setup+0x75c>)
    1e20:	f002 fece 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e24:	210f      	movs	r1, #15
    1e26:	4818      	ldr	r0, [pc, #96]	; (1e88 <setup+0x788>)
    1e28:	f003 ff1a 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1e2c:	480b      	ldr	r0, [pc, #44]	; (1e5c <setup+0x75c>)
    1e2e:	f002 fea1 	bl	4b74 <Print::println()>
    1e32:	e708      	b.n	1c46 <setup+0x546>
    1e34:	2104      	movs	r1, #4
    1e36:	4808      	ldr	r0, [pc, #32]	; (1e58 <setup+0x758>)
    1e38:	f003 ff12 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1e3c:	4649      	mov	r1, r9
    1e3e:	2300      	movs	r3, #0
    1e40:	220a      	movs	r2, #10
    1e42:	4806      	ldr	r0, [pc, #24]	; (1e5c <setup+0x75c>)
    1e44:	f002 febc 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e48:	2112      	movs	r1, #18
    1e4a:	4810      	ldr	r0, [pc, #64]	; (1e8c <setup+0x78c>)
    1e4c:	f003 ff08 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1e50:	4802      	ldr	r0, [pc, #8]	; (1e5c <setup+0x75c>)
    1e52:	f002 fe8f 	bl	4b74 <Print::println()>
    1e56:	e6f6      	b.n	1c46 <setup+0x546>
    1e58:	0000d298 	.word	0x0000d298
    1e5c:	1fff0770 	.word	0x1fff0770
    1e60:	0000d358 	.word	0x0000d358
    1e64:	0000d378 	.word	0x0000d378
    1e68:	0000d3a0 	.word	0x0000d3a0
    1e6c:	0000d2d4 	.word	0x0000d2d4
    1e70:	0000d3a8 	.word	0x0000d3a8
    1e74:	0000d23c 	.word	0x0000d23c
    1e78:	40024000 	.word	0x40024000
    1e7c:	1fff0750 	.word	0x1fff0750
    1e80:	0000d3b4 	.word	0x0000d3b4
    1e84:	0000d310 	.word	0x0000d310
    1e88:	0000d348 	.word	0x0000d348
    1e8c:	0000d334 	.word	0x0000d334
    1e90:	0000d2fc 	.word	0x0000d2fc
    1e94:	0000d2b4 	.word	0x0000d2b4
    1e98:	0000d2c4 	.word	0x0000d2c4
    1e9c:	0000d2d8 	.word	0x0000d2d8
    1ea0:	0000d2ec 	.word	0x0000d2ec
    1ea4:	0000d324 	.word	0x0000d324
    1ea8:	0000d2a0 	.word	0x0000d2a0
    1eac:	2104      	movs	r1, #4
    1eae:	4874      	ldr	r0, [pc, #464]	; (2080 <setup+0x980>)
    1eb0:	f003 fed6 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1eb4:	4649      	mov	r1, r9
    1eb6:	2300      	movs	r3, #0
    1eb8:	220a      	movs	r2, #10
    1eba:	4872      	ldr	r0, [pc, #456]	; (2084 <setup+0x984>)
    1ebc:	f002 fe80 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ec0:	2111      	movs	r1, #17
    1ec2:	4871      	ldr	r0, [pc, #452]	; (2088 <setup+0x988>)
    1ec4:	f003 fecc 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1ec8:	486e      	ldr	r0, [pc, #440]	; (2084 <setup+0x984>)
    1eca:	f002 fe53 	bl	4b74 <Print::println()>
    1ece:	e6ba      	b.n	1c46 <setup+0x546>
    1ed0:	2104      	movs	r1, #4
    1ed2:	486b      	ldr	r0, [pc, #428]	; (2080 <setup+0x980>)
    1ed4:	f003 fec4 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1ed8:	220a      	movs	r2, #10
    1eda:	4649      	mov	r1, r9
    1edc:	2300      	movs	r3, #0
    1ede:	4869      	ldr	r0, [pc, #420]	; (2084 <setup+0x984>)
    1ee0:	f002 fe6e 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ee4:	210f      	movs	r1, #15
    1ee6:	4869      	ldr	r0, [pc, #420]	; (208c <setup+0x98c>)
    1ee8:	f003 feba 	bl	5c60 <usb_serial_write>
    1eec:	f8d8 3000 	ldr.w	r3, [r8]
    1ef0:	029a      	lsls	r2, r3, #10
    1ef2:	bf4c      	ite	mi
    1ef4:	4866      	ldrmi	r0, [pc, #408]	; (2090 <setup+0x990>)
    1ef6:	4867      	ldrpl	r0, [pc, #412]	; (2094 <setup+0x994>)
    1ef8:	2111      	movs	r1, #17
    1efa:	f003 feb1 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1efe:	4861      	ldr	r0, [pc, #388]	; (2084 <setup+0x984>)
    1f00:	f002 fe38 	bl	4b74 <Print::println()>
    1f04:	e69f      	b.n	1c46 <setup+0x546>
    1f06:	2104      	movs	r1, #4
    1f08:	485d      	ldr	r0, [pc, #372]	; (2080 <setup+0x980>)
    1f0a:	f003 fea9 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1f0e:	4649      	mov	r1, r9
    1f10:	2300      	movs	r3, #0
    1f12:	220a      	movs	r2, #10
    1f14:	485b      	ldr	r0, [pc, #364]	; (2084 <setup+0x984>)
    1f16:	f002 fe53 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1f1a:	210e      	movs	r1, #14
    1f1c:	485e      	ldr	r0, [pc, #376]	; (2098 <setup+0x998>)
    1f1e:	f003 fe9f 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1f22:	4858      	ldr	r0, [pc, #352]	; (2084 <setup+0x984>)
    1f24:	f002 fe26 	bl	4b74 <Print::println()>
    1f28:	e68d      	b.n	1c46 <setup+0x546>
    1f2a:	2104      	movs	r1, #4
    1f2c:	4854      	ldr	r0, [pc, #336]	; (2080 <setup+0x980>)
    1f2e:	f003 fe97 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1f32:	4649      	mov	r1, r9
    1f34:	2300      	movs	r3, #0
    1f36:	220a      	movs	r2, #10
    1f38:	4852      	ldr	r0, [pc, #328]	; (2084 <setup+0x984>)
    1f3a:	f002 fe41 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1f3e:	210e      	movs	r1, #14
    1f40:	4856      	ldr	r0, [pc, #344]	; (209c <setup+0x99c>)
    1f42:	f003 fe8d 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1f46:	484f      	ldr	r0, [pc, #316]	; (2084 <setup+0x984>)
    1f48:	f002 fe14 	bl	4b74 <Print::println()>
    1f4c:	e67b      	b.n	1c46 <setup+0x546>
    1f4e:	2104      	movs	r1, #4
    1f50:	484b      	ldr	r0, [pc, #300]	; (2080 <setup+0x980>)
    1f52:	f003 fe85 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1f56:	4649      	mov	r1, r9
    1f58:	2300      	movs	r3, #0
    1f5a:	220a      	movs	r2, #10
    1f5c:	4849      	ldr	r0, [pc, #292]	; (2084 <setup+0x984>)
    1f5e:	f002 fe2f 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1f62:	2112      	movs	r1, #18
    1f64:	484e      	ldr	r0, [pc, #312]	; (20a0 <setup+0x9a0>)
    1f66:	f003 fe7b 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1f6a:	4846      	ldr	r0, [pc, #280]	; (2084 <setup+0x984>)
    1f6c:	f002 fe02 	bl	4b74 <Print::println()>
    1f70:	e669      	b.n	1c46 <setup+0x546>
    1f72:	2111      	movs	r1, #17
    1f74:	484b      	ldr	r0, [pc, #300]	; (20a4 <setup+0x9a4>)
    1f76:	f003 fe73 	bl	5c60 <usb_serial_write>
    Serial.print("FIFO Enabled --> "); ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IFLAG1_BUF5I ) ? Serial.println("Interrupt Enabled") : Serial.println("Interrupt Disabled");
    1f7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f7c:	069c      	lsls	r4, r3, #26
    1f7e:	bf4b      	itete	mi
    1f80:	2111      	movmi	r1, #17
    1f82:	2112      	movpl	r1, #18
    1f84:	4848      	ldrmi	r0, [pc, #288]	; (20a8 <setup+0x9a8>)
    1f86:	4849      	ldrpl	r0, [pc, #292]	; (20ac <setup+0x9ac>)
    1f88:	f003 fe6a 	bl	5c60 <usb_serial_write>
    1f8c:	483d      	ldr	r0, [pc, #244]	; (2084 <setup+0x984>)
    1f8e:	f002 fdf1 	bl	4b74 <Print::println()>
    1f92:	2116      	movs	r1, #22
    1f94:	4846      	ldr	r0, [pc, #280]	; (20b0 <setup+0x9b0>)
    1f96:	f003 fe63 	bl	5c60 <usb_serial_write>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    1f9a:	4a46      	ldr	r2, [pc, #280]	; (20b4 <setup+0x9b4>)
    1f9c:	6814      	ldr	r4, [r2, #0]
    1f9e:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    1fa0:	6813      	ldr	r3, [r2, #0]
    1fa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
    1fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1fa8:	f3c2 6203 	ubfx	r2, r2, #24, #4
    1fac:	3301      	adds	r3, #1
    1fae:	3204      	adds	r2, #4
    1fb0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    1fb4:	f0c0 8414 	bcc.w	27e0 <setup+0x10e0>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    1fb8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    1fbc:	f3c1 6103 	ubfx	r1, r1, #24, #4
    1fc0:	3c05      	subs	r4, #5
    1fc2:	3101      	adds	r1, #1
    1fc4:	eba4 0441 	sub.w	r4, r4, r1, lsl #1
    Serial.println(constrain((uint8_t)(FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes), 0, 32));
    1fc8:	b2e5      	uxtb	r5, r4
    1fca:	4e3a      	ldr	r6, [pc, #232]	; (20b4 <setup+0x9b4>)
	size_t print(int n)				{ return print((long)n); }
    1fcc:	482d      	ldr	r0, [pc, #180]	; (2084 <setup+0x984>)
    1fce:	6831      	ldr	r1, [r6, #0]
    1fd0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    1fd4:	3101      	adds	r1, #1
    1fd6:	1b49      	subs	r1, r1, r5
    1fd8:	b2c9      	uxtb	r1, r1
    1fda:	2920      	cmp	r1, #32
    1fdc:	bfa8      	it	ge
    1fde:	2120      	movge	r1, #32
    1fe0:	f002 fdc0 	bl	4b64 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1fe4:	4827      	ldr	r0, [pc, #156]	; (2084 <setup+0x984>)
    1fe6:	f002 fdc5 	bl	4b74 <Print::println()>
    1fea:	2116      	movs	r1, #22
    1fec:	4832      	ldr	r0, [pc, #200]	; (20b8 <setup+0x9b8>)
    1fee:	f003 fe37 	bl	5c60 <usb_serial_write>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    1ff2:	6833      	ldr	r3, [r6, #0]
    1ff4:	6b72      	ldr	r2, [r6, #52]	; 0x34
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1ff6:	4823      	ldr	r0, [pc, #140]	; (2084 <setup+0x984>)
    1ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1ffc:	f3c2 6203 	ubfx	r2, r2, #24, #4
    2000:	3301      	adds	r3, #1
    2002:	3204      	adds	r2, #4
    2004:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    2008:	bf38      	it	cc
    200a:	2400      	movcc	r4, #0
    200c:	f04f 0300 	mov.w	r3, #0
    2010:	4621      	mov	r1, r4
    2012:	f04f 020a 	mov.w	r2, #10
    2016:	bf38      	it	cc
    2018:	4625      	movcc	r5, r4
    201a:	f002 fdd1 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    201e:	4819      	ldr	r0, [pc, #100]	; (2084 <setup+0x984>)
    2020:	f002 fda8 	bl	4b74 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2024:	4b23      	ldr	r3, [pc, #140]	; (20b4 <setup+0x9b4>)
    2026:	681c      	ldr	r4, [r3, #0]
    2028:	681b      	ldr	r3, [r3, #0]
    202a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    202e:	3401      	adds	r4, #1
    2030:	1b64      	subs	r4, r4, r5
    2032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2036:	b2e4      	uxtb	r4, r4
    2038:	3301      	adds	r3, #1
    203a:	42a3      	cmp	r3, r4
    203c:	f67f ae0e 	bls.w	1c5c <setup+0x55c>
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    2040:	4d1e      	ldr	r5, [pc, #120]	; (20bc <setup+0x9bc>)
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    2042:	4e1f      	ldr	r6, [pc, #124]	; (20c0 <setup+0x9c0>)
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    2044:	4f1f      	ldr	r7, [pc, #124]	; (20c4 <setup+0x9c4>)
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    2046:	eb04 0805 	add.w	r8, r4, r5
    204a:	ea4f 1808 	mov.w	r8, r8, lsl #4
    204e:	f8d8 3000 	ldr.w	r3, [r8]
    2052:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2056:	2b0e      	cmp	r3, #14
    2058:	f200 82e2 	bhi.w	2620 <setup+0xf20>
    205c:	e8df f013 	tbh	[pc, r3, lsl #1]
    2060:	033d034f 	.word	0x033d034f
    2064:	02e0032b 	.word	0x02e0032b
    2068:	02e00310 	.word	0x02e00310
    206c:	02e0039c 	.word	0x02e0039c
    2070:	03ae0361 	.word	0x03ae0361
    2074:	02e002fe 	.word	0x02e002fe
    2078:	02e00253 	.word	0x02e00253
    207c:	02ec      	.short	0x02ec
    207e:	bf00      	nop
    2080:	0000d298 	.word	0x0000d298
    2084:	1fff0770 	.word	0x1fff0770
    2088:	0000d2fc 	.word	0x0000d2fc
    208c:	0000d2b4 	.word	0x0000d2b4
    2090:	0000d2c4 	.word	0x0000d2c4
    2094:	0000d2d8 	.word	0x0000d2d8
    2098:	0000d2ec 	.word	0x0000d2ec
    209c:	0000d324 	.word	0x0000d324
    20a0:	0000d2a0 	.word	0x0000d2a0
    20a4:	0000d22c 	.word	0x0000d22c
    20a8:	0000d240 	.word	0x0000d240
    20ac:	0000d254 	.word	0x0000d254
    20b0:	0000d268 	.word	0x0000d268
    20b4:	40024000 	.word	0x40024000
    20b8:	0000d280 	.word	0x0000d280
    20bc:	04002408 	.word	0x04002408
    20c0:	4002408c 	.word	0x4002408c
    20c4:	bffdbf80 	.word	0xbffdbf80
    20c8:	2111      	movs	r1, #17
    20ca:	48c0      	ldr	r0, [pc, #768]	; (23cc <setup+0xccc>)
    20cc:	f003 fdc8 	bl	5c60 <usb_serial_write>
    Serial.print("FIFO Enabled --> "); ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IFLAG1_BUF5I ) ? Serial.println("Interrupt Enabled") : Serial.println("Interrupt Disabled");
    20d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    20d2:	0699      	lsls	r1, r3, #26
    20d4:	bf4b      	itete	mi
    20d6:	2111      	movmi	r1, #17
    20d8:	2112      	movpl	r1, #18
    20da:	48bd      	ldrmi	r0, [pc, #756]	; (23d0 <setup+0xcd0>)
    20dc:	48bd      	ldrpl	r0, [pc, #756]	; (23d4 <setup+0xcd4>)
    20de:	f003 fdbf 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    20e2:	48bd      	ldr	r0, [pc, #756]	; (23d8 <setup+0xcd8>)
    20e4:	f002 fd46 	bl	4b74 <Print::println()>
    20e8:	2116      	movs	r1, #22
    20ea:	48bc      	ldr	r0, [pc, #752]	; (23dc <setup+0xcdc>)
    20ec:	f003 fdb8 	bl	5c60 <usb_serial_write>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    20f0:	4abb      	ldr	r2, [pc, #748]	; (23e0 <setup+0xce0>)
    20f2:	6814      	ldr	r4, [r2, #0]
    20f4:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    20f6:	6813      	ldr	r3, [r2, #0]
    20f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
    20fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    20fe:	f3c2 6203 	ubfx	r2, r2, #24, #4
    2102:	3301      	adds	r3, #1
    2104:	3204      	adds	r2, #4
    2106:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    210a:	f0c0 81f9 	bcc.w	2500 <setup+0xe00>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    210e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    2112:	f3c1 6103 	ubfx	r1, r1, #24, #4
    2116:	3c05      	subs	r4, #5
    2118:	3101      	adds	r1, #1
    211a:	eba4 0441 	sub.w	r4, r4, r1, lsl #1
    Serial.println(constrain((uint8_t)(FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes), 0, 32));
    211e:	b2e5      	uxtb	r5, r4
    2120:	4faf      	ldr	r7, [pc, #700]	; (23e0 <setup+0xce0>)
	size_t print(int n)				{ return print((long)n); }
    2122:	48ad      	ldr	r0, [pc, #692]	; (23d8 <setup+0xcd8>)
    2124:	6839      	ldr	r1, [r7, #0]
    2126:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    212a:	3101      	adds	r1, #1
    212c:	1b49      	subs	r1, r1, r5
    212e:	b2c9      	uxtb	r1, r1
    2130:	2920      	cmp	r1, #32
    2132:	bfa8      	it	ge
    2134:	2120      	movge	r1, #32
    2136:	f002 fd15 	bl	4b64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    213a:	48a7      	ldr	r0, [pc, #668]	; (23d8 <setup+0xcd8>)
    213c:	f002 fd1a 	bl	4b74 <Print::println()>
    2140:	2116      	movs	r1, #22
    2142:	48a8      	ldr	r0, [pc, #672]	; (23e4 <setup+0xce4>)
    2144:	f003 fd8c 	bl	5c60 <usb_serial_write>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    2148:	683b      	ldr	r3, [r7, #0]
    214a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    214c:	48a2      	ldr	r0, [pc, #648]	; (23d8 <setup+0xcd8>)
    214e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2152:	f3c2 6203 	ubfx	r2, r2, #24, #4
    2156:	3301      	adds	r3, #1
    2158:	3204      	adds	r2, #4
    215a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    215e:	bf38      	it	cc
    2160:	2400      	movcc	r4, #0
    2162:	f04f 0300 	mov.w	r3, #0
    2166:	4621      	mov	r1, r4
    2168:	f04f 020a 	mov.w	r2, #10
    216c:	bf38      	it	cc
    216e:	4625      	movcc	r5, r4
    2170:	f002 fd26 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    2174:	4898      	ldr	r0, [pc, #608]	; (23d8 <setup+0xcd8>)
    2176:	f002 fcfd 	bl	4b74 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    217a:	4b99      	ldr	r3, [pc, #612]	; (23e0 <setup+0xce0>)
    217c:	681c      	ldr	r4, [r3, #0]
    217e:	681b      	ldr	r3, [r3, #0]
    2180:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    2184:	3401      	adds	r4, #1
    2186:	1b64      	subs	r4, r4, r5
    2188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    218c:	b2e4      	uxtb	r4, r4
    218e:	3301      	adds	r3, #1
    2190:	42a3      	cmp	r3, r4
    2192:	f67f ac3c 	bls.w	1a0e <setup+0x30e>
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    2196:	4d94      	ldr	r5, [pc, #592]	; (23e8 <setup+0xce8>)
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    2198:	4f94      	ldr	r7, [pc, #592]	; (23ec <setup+0xcec>)
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    219a:	f8df 8288 	ldr.w	r8, [pc, #648]	; 2424 <setup+0xd24>
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    219e:	eb04 0905 	add.w	r9, r4, r5
    21a2:	ea4f 1909 	mov.w	r9, r9, lsl #4
    21a6:	f8d9 3000 	ldr.w	r3, [r9]
    21aa:	f3c3 6303 	ubfx	r3, r3, #24, #4
    21ae:	2b0e      	cmp	r3, #14
    21b0:	f200 80c1 	bhi.w	2336 <setup+0xc36>
    21b4:	e8df f013 	tbh	[pc, r3, lsl #1]
    21b8:	014a015c 	.word	0x014a015c
    21bc:	00bf0138 	.word	0x00bf0138
    21c0:	00bf00ef 	.word	0x00bf00ef
    21c4:	00bf0180 	.word	0x00bf0180
    21c8:	0192016e 	.word	0x0192016e
    21cc:	00bf00dd 	.word	0x00bf00dd
    21d0:	00bf0032 	.word	0x00bf0032
    21d4:	00cb      	.short	0x00cb
  if ( fifo_was_cleared ) enableFIFO();
    21d6:	2001      	movs	r0, #1
    21d8:	f7fe fb1c 	bl	814 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
    21dc:	e43a      	b.n	1a54 <setup+0x354>
    21de:	2001      	movs	r0, #1
    21e0:	f7fe fbe4 	bl	9ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
    21e4:	f7ff bb0a 	b.w	17fc <setup+0xfc>
    21e8:	4881      	ldr	r0, [pc, #516]	; (23f0 <setup+0xcf0>)
    21ea:	2110      	movs	r1, #16
    21ec:	f003 fd38 	bl	5c60 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    21f0:	f8d8 9008 	ldr.w	r9, [r8, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    21f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    21f8:	44b8      	add	r8, r7
          if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    21fa:	f3c3 4a8a 	ubfx	sl, r3, #18, #11
    21fe:	e4b3      	b.n	1b68 <setup+0x468>
    2200:	487b      	ldr	r0, [pc, #492]	; (23f0 <setup+0xcf0>)
    2202:	2110      	movs	r1, #16
    2204:	f003 fd2c 	bl	5c60 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    2208:	f8d9 a008 	ldr.w	sl, [r9, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    220c:	f8d9 3004 	ldr.w	r3, [r9, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    2210:	eb09 0b08 	add.w	fp, r9, r8
          if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    2214:	f3c3 498a 	ubfx	r9, r3, #18, #11
    2218:	f7ff bb7f 	b.w	191a <setup+0x21a>
    221c:	2104      	movs	r1, #4
    221e:	4875      	ldr	r0, [pc, #468]	; (23f4 <setup+0xcf4>)
    2220:	f003 fd1e 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2224:	2300      	movs	r3, #0
    2226:	220a      	movs	r2, #10
    2228:	4621      	mov	r1, r4
    222a:	486b      	ldr	r0, [pc, #428]	; (23d8 <setup+0xcd8>)
    222c:	f002 fcc8 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2230:	4871      	ldr	r0, [pc, #452]	; (23f8 <setup+0xcf8>)
    2232:	211d      	movs	r1, #29
    2234:	f003 fd14 	bl	5c60 <usb_serial_write>
            uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    2238:	f8d9 3000 	ldr.w	r3, [r9]
            (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    223c:	029b      	lsls	r3, r3, #10
    223e:	f140 82df 	bpl.w	2800 <setup+0x1100>
    2242:	486e      	ldr	r0, [pc, #440]	; (23fc <setup+0xcfc>)
    2244:	2110      	movs	r1, #16
    2246:	f003 fd0b 	bl	5c60 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    224a:	f8d9 a008 	ldr.w	sl, [r9, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    224e:	f8d9 3004 	ldr.w	r3, [r9, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    2252:	44c1      	add	r9, r8
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    2254:	f023 4b60 	bic.w	fp, r3, #3758096384	; 0xe0000000
    2258:	2107      	movs	r1, #7
    225a:	4869      	ldr	r0, [pc, #420]	; (2400 <setup+0xd00>)
    225c:	f003 fd00 	bl	5c60 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    2260:	2300      	movs	r3, #0
    2262:	2210      	movs	r2, #16
    2264:	4659      	mov	r1, fp
    2266:	485c      	ldr	r0, [pc, #368]	; (23d8 <setup+0xcd8>)
    2268:	f002 fcaa 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    226c:	2101      	movs	r1, #1
    226e:	4865      	ldr	r0, [pc, #404]	; (2404 <setup+0xd04>)
    2270:	f003 fcf6 	bl	5c60 <usb_serial_write>
    2274:	210a      	movs	r1, #10
    2276:	4864      	ldr	r0, [pc, #400]	; (2408 <setup+0xd08>)
    2278:	f003 fcf2 	bl	5c60 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    227c:	2300      	movs	r3, #0
    227e:	2210      	movs	r2, #16
    2280:	ea4f 611a 	mov.w	r1, sl, lsr #24
    2284:	4854      	ldr	r0, [pc, #336]	; (23d8 <setup+0xcd8>)
    2286:	f002 fc9b 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    228a:	2101      	movs	r1, #1
    228c:	485f      	ldr	r0, [pc, #380]	; (240c <setup+0xd0c>)
    228e:	f003 fce7 	bl	5c60 <usb_serial_write>
    2292:	2300      	movs	r3, #0
    2294:	2210      	movs	r2, #16
    2296:	f3ca 4107 	ubfx	r1, sl, #16, #8
    229a:	484f      	ldr	r0, [pc, #316]	; (23d8 <setup+0xcd8>)
    229c:	f002 fc90 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    22a0:	2101      	movs	r1, #1
    22a2:	485a      	ldr	r0, [pc, #360]	; (240c <setup+0xd0c>)
    22a4:	f003 fcdc 	bl	5c60 <usb_serial_write>
    22a8:	2300      	movs	r3, #0
    22aa:	2210      	movs	r2, #16
    22ac:	f3ca 2107 	ubfx	r1, sl, #8, #8
    22b0:	4849      	ldr	r0, [pc, #292]	; (23d8 <setup+0xcd8>)
    22b2:	f002 fc85 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    22b6:	2101      	movs	r1, #1
    22b8:	4854      	ldr	r0, [pc, #336]	; (240c <setup+0xd0c>)
    22ba:	f003 fcd1 	bl	5c60 <usb_serial_write>
    22be:	2300      	movs	r3, #0
    22c0:	2210      	movs	r2, #16
    22c2:	fa5f f18a 	uxtb.w	r1, sl
    22c6:	4844      	ldr	r0, [pc, #272]	; (23d8 <setup+0xcd8>)
    22c8:	f002 fc7a 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    22cc:	f859 9007 	ldr.w	r9, [r9, r7]
    22d0:	484e      	ldr	r0, [pc, #312]	; (240c <setup+0xd0c>)
    22d2:	2101      	movs	r1, #1
    22d4:	f003 fcc4 	bl	5c60 <usb_serial_write>
    22d8:	2300      	movs	r3, #0
    22da:	2210      	movs	r2, #16
    22dc:	ea4f 6119 	mov.w	r1, r9, lsr #24
    22e0:	483d      	ldr	r0, [pc, #244]	; (23d8 <setup+0xcd8>)
    22e2:	f002 fc6d 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    22e6:	2101      	movs	r1, #1
    22e8:	4848      	ldr	r0, [pc, #288]	; (240c <setup+0xd0c>)
    22ea:	f003 fcb9 	bl	5c60 <usb_serial_write>
    22ee:	2300      	movs	r3, #0
    22f0:	2210      	movs	r2, #16
    22f2:	f3c9 4107 	ubfx	r1, r9, #16, #8
    22f6:	4838      	ldr	r0, [pc, #224]	; (23d8 <setup+0xcd8>)
    22f8:	f002 fc62 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    22fc:	2101      	movs	r1, #1
    22fe:	4843      	ldr	r0, [pc, #268]	; (240c <setup+0xd0c>)
    2300:	f003 fcae 	bl	5c60 <usb_serial_write>
    2304:	2300      	movs	r3, #0
    2306:	2210      	movs	r2, #16
    2308:	f3c9 2107 	ubfx	r1, r9, #8, #8
    230c:	4832      	ldr	r0, [pc, #200]	; (23d8 <setup+0xcd8>)
    230e:	f002 fc57 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2312:	2101      	movs	r1, #1
    2314:	483d      	ldr	r0, [pc, #244]	; (240c <setup+0xd0c>)
    2316:	f003 fca3 	bl	5c60 <usb_serial_write>
    231a:	fa5f f189 	uxtb.w	r1, r9
    231e:	2300      	movs	r3, #0
    2320:	2210      	movs	r2, #16
    2322:	482d      	ldr	r0, [pc, #180]	; (23d8 <setup+0xcd8>)
    2324:	f002 fc4c 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2328:	4836      	ldr	r0, [pc, #216]	; (2404 <setup+0xd04>)
    232a:	2101      	movs	r1, #1
    232c:	f003 fc98 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2330:	4829      	ldr	r0, [pc, #164]	; (23d8 <setup+0xcd8>)
    2332:	f002 fc1f 	bl	4b74 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2336:	4b2a      	ldr	r3, [pc, #168]	; (23e0 <setup+0xce0>)
    2338:	681b      	ldr	r3, [r3, #0]
    233a:	3401      	adds	r4, #1
    233c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2340:	b2e4      	uxtb	r4, r4
    2342:	3301      	adds	r3, #1
    2344:	429c      	cmp	r4, r3
    2346:	f4ff af2a 	bcc.w	219e <setup+0xa9e>
    234a:	f7ff bb60 	b.w	1a0e <setup+0x30e>
    234e:	2104      	movs	r1, #4
    2350:	4828      	ldr	r0, [pc, #160]	; (23f4 <setup+0xcf4>)
    2352:	f003 fc85 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2356:	2300      	movs	r3, #0
    2358:	220a      	movs	r2, #10
    235a:	4621      	mov	r1, r4
    235c:	481e      	ldr	r0, [pc, #120]	; (23d8 <setup+0xcd8>)
    235e:	f002 fc2f 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2362:	2111      	movs	r1, #17
    2364:	482a      	ldr	r0, [pc, #168]	; (2410 <setup+0xd10>)
    2366:	f003 fc7b 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    236a:	481b      	ldr	r0, [pc, #108]	; (23d8 <setup+0xcd8>)
    236c:	f002 fc02 	bl	4b74 <Print::println()>
    2370:	e7e1      	b.n	2336 <setup+0xc36>
    2372:	2104      	movs	r1, #4
    2374:	481f      	ldr	r0, [pc, #124]	; (23f4 <setup+0xcf4>)
    2376:	f003 fc73 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    237a:	2300      	movs	r3, #0
    237c:	220a      	movs	r2, #10
    237e:	4621      	mov	r1, r4
    2380:	4815      	ldr	r0, [pc, #84]	; (23d8 <setup+0xcd8>)
    2382:	f002 fc1d 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2386:	2111      	movs	r1, #17
    2388:	4822      	ldr	r0, [pc, #136]	; (2414 <setup+0xd14>)
    238a:	f003 fc69 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    238e:	4812      	ldr	r0, [pc, #72]	; (23d8 <setup+0xcd8>)
    2390:	f002 fbf0 	bl	4b74 <Print::println()>
    2394:	e7cf      	b.n	2336 <setup+0xc36>
    2396:	2104      	movs	r1, #4
    2398:	4816      	ldr	r0, [pc, #88]	; (23f4 <setup+0xcf4>)
    239a:	f003 fc61 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    239e:	220a      	movs	r2, #10
    23a0:	2300      	movs	r3, #0
    23a2:	4621      	mov	r1, r4
    23a4:	480c      	ldr	r0, [pc, #48]	; (23d8 <setup+0xcd8>)
    23a6:	f002 fc0b 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    23aa:	210f      	movs	r1, #15
    23ac:	481a      	ldr	r0, [pc, #104]	; (2418 <setup+0xd18>)
    23ae:	f003 fc57 	bl	5c60 <usb_serial_write>
            (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    23b2:	f8d9 3000 	ldr.w	r3, [r9]
    23b6:	029a      	lsls	r2, r3, #10
    23b8:	bf4c      	ite	mi
    23ba:	4818      	ldrmi	r0, [pc, #96]	; (241c <setup+0xd1c>)
    23bc:	4818      	ldrpl	r0, [pc, #96]	; (2420 <setup+0xd20>)
    23be:	2111      	movs	r1, #17
    23c0:	f003 fc4e 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    23c4:	4804      	ldr	r0, [pc, #16]	; (23d8 <setup+0xcd8>)
    23c6:	f002 fbd5 	bl	4b74 <Print::println()>
    23ca:	e7b4      	b.n	2336 <setup+0xc36>
    23cc:	0000d22c 	.word	0x0000d22c
    23d0:	0000d240 	.word	0x0000d240
    23d4:	0000d254 	.word	0x0000d254
    23d8:	1fff0770 	.word	0x1fff0770
    23dc:	0000d268 	.word	0x0000d268
    23e0:	400a4000 	.word	0x400a4000
    23e4:	0000d280 	.word	0x0000d280
    23e8:	0400a408 	.word	0x0400a408
    23ec:	400a408c 	.word	0x400a408c
    23f0:	0000d38c 	.word	0x0000d38c
    23f4:	0000d298 	.word	0x0000d298
    23f8:	0000d358 	.word	0x0000d358
    23fc:	0000d378 	.word	0x0000d378
    2400:	0000d3a0 	.word	0x0000d3a0
    2404:	0000d2d4 	.word	0x0000d2d4
    2408:	0000d3a8 	.word	0x0000d3a8
    240c:	0000d23c 	.word	0x0000d23c
    2410:	0000d3b4 	.word	0x0000d3b4
    2414:	0000d310 	.word	0x0000d310
    2418:	0000d2b4 	.word	0x0000d2b4
    241c:	0000d2c4 	.word	0x0000d2c4
    2420:	0000d2d8 	.word	0x0000d2d8
    2424:	bff5bf80 	.word	0xbff5bf80
    2428:	2104      	movs	r1, #4
    242a:	48c7      	ldr	r0, [pc, #796]	; (2748 <setup+0x1048>)
    242c:	f003 fc18 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2430:	2300      	movs	r3, #0
    2432:	220a      	movs	r2, #10
    2434:	4621      	mov	r1, r4
    2436:	48c5      	ldr	r0, [pc, #788]	; (274c <setup+0x104c>)
    2438:	f002 fbc2 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    243c:	210e      	movs	r1, #14
    243e:	48c4      	ldr	r0, [pc, #784]	; (2750 <setup+0x1050>)
    2440:	f003 fc0e 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2444:	48c1      	ldr	r0, [pc, #772]	; (274c <setup+0x104c>)
    2446:	f002 fb95 	bl	4b74 <Print::println()>
    244a:	e774      	b.n	2336 <setup+0xc36>
    244c:	2104      	movs	r1, #4
    244e:	48be      	ldr	r0, [pc, #760]	; (2748 <setup+0x1048>)
    2450:	f003 fc06 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2454:	2300      	movs	r3, #0
    2456:	220a      	movs	r2, #10
    2458:	4621      	mov	r1, r4
    245a:	48bc      	ldr	r0, [pc, #752]	; (274c <setup+0x104c>)
    245c:	f002 fbb0 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2460:	210e      	movs	r1, #14
    2462:	48bc      	ldr	r0, [pc, #752]	; (2754 <setup+0x1054>)
    2464:	f003 fbfc 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2468:	48b8      	ldr	r0, [pc, #736]	; (274c <setup+0x104c>)
    246a:	f002 fb83 	bl	4b74 <Print::println()>
    246e:	e762      	b.n	2336 <setup+0xc36>
    2470:	2104      	movs	r1, #4
    2472:	48b5      	ldr	r0, [pc, #724]	; (2748 <setup+0x1048>)
    2474:	f003 fbf4 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2478:	2300      	movs	r3, #0
    247a:	220a      	movs	r2, #10
    247c:	4621      	mov	r1, r4
    247e:	48b3      	ldr	r0, [pc, #716]	; (274c <setup+0x104c>)
    2480:	f002 fb9e 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2484:	2112      	movs	r1, #18
    2486:	48b4      	ldr	r0, [pc, #720]	; (2758 <setup+0x1058>)
    2488:	f003 fbea 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    248c:	48af      	ldr	r0, [pc, #700]	; (274c <setup+0x104c>)
    248e:	f002 fb71 	bl	4b74 <Print::println()>
    2492:	e750      	b.n	2336 <setup+0xc36>
    2494:	2104      	movs	r1, #4
    2496:	48ac      	ldr	r0, [pc, #688]	; (2748 <setup+0x1048>)
    2498:	f003 fbe2 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    249c:	2300      	movs	r3, #0
    249e:	220a      	movs	r2, #10
    24a0:	4621      	mov	r1, r4
    24a2:	48aa      	ldr	r0, [pc, #680]	; (274c <setup+0x104c>)
    24a4:	f002 fb8c 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    24a8:	2112      	movs	r1, #18
    24aa:	48ac      	ldr	r0, [pc, #688]	; (275c <setup+0x105c>)
    24ac:	f003 fbd8 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    24b0:	48a6      	ldr	r0, [pc, #664]	; (274c <setup+0x104c>)
    24b2:	f002 fb5f 	bl	4b74 <Print::println()>
    24b6:	e73e      	b.n	2336 <setup+0xc36>
    24b8:	2104      	movs	r1, #4
    24ba:	48a3      	ldr	r0, [pc, #652]	; (2748 <setup+0x1048>)
    24bc:	f003 fbd0 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24c0:	2300      	movs	r3, #0
    24c2:	220a      	movs	r2, #10
    24c4:	4621      	mov	r1, r4
    24c6:	48a1      	ldr	r0, [pc, #644]	; (274c <setup+0x104c>)
    24c8:	f002 fb7a 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    24cc:	2111      	movs	r1, #17
    24ce:	48a4      	ldr	r0, [pc, #656]	; (2760 <setup+0x1060>)
    24d0:	f003 fbc6 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    24d4:	489d      	ldr	r0, [pc, #628]	; (274c <setup+0x104c>)
    24d6:	f002 fb4d 	bl	4b74 <Print::println()>
    24da:	e72c      	b.n	2336 <setup+0xc36>
    24dc:	2104      	movs	r1, #4
    24de:	489a      	ldr	r0, [pc, #616]	; (2748 <setup+0x1048>)
    24e0:	f003 fbbe 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24e4:	2300      	movs	r3, #0
    24e6:	220a      	movs	r2, #10
    24e8:	4621      	mov	r1, r4
    24ea:	4898      	ldr	r0, [pc, #608]	; (274c <setup+0x104c>)
    24ec:	f002 fb68 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    24f0:	210f      	movs	r1, #15
    24f2:	489c      	ldr	r0, [pc, #624]	; (2764 <setup+0x1064>)
    24f4:	f003 fbb4 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    24f8:	4894      	ldr	r0, [pc, #592]	; (274c <setup+0x104c>)
    24fa:	f002 fb3b 	bl	4b74 <Print::println()>
    24fe:	e71a      	b.n	2336 <setup+0xc36>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    2500:	2400      	movs	r4, #0
    2502:	4625      	mov	r5, r4
    2504:	e60c      	b.n	2120 <setup+0xa20>
    2506:	2104      	movs	r1, #4
    2508:	488f      	ldr	r0, [pc, #572]	; (2748 <setup+0x1048>)
    250a:	f003 fba9 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    250e:	2300      	movs	r3, #0
    2510:	220a      	movs	r2, #10
    2512:	4621      	mov	r1, r4
    2514:	488d      	ldr	r0, [pc, #564]	; (274c <setup+0x104c>)
    2516:	f002 fb53 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    251a:	211d      	movs	r1, #29
    251c:	4892      	ldr	r0, [pc, #584]	; (2768 <setup+0x1068>)
    251e:	f003 fb9f 	bl	5c60 <usb_serial_write>
            uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    2522:	f8d8 3000 	ldr.w	r3, [r8]
            (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    2526:	0299      	lsls	r1, r3, #10
    2528:	f140 815e 	bpl.w	27e8 <setup+0x10e8>
    252c:	488f      	ldr	r0, [pc, #572]	; (276c <setup+0x106c>)
    252e:	2110      	movs	r1, #16
    2530:	f003 fb96 	bl	5c60 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    2534:	f8d8 9008 	ldr.w	r9, [r8, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    2538:	f8d8 3004 	ldr.w	r3, [r8, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    253c:	44b8      	add	r8, r7
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    253e:	f023 4a60 	bic.w	sl, r3, #3758096384	; 0xe0000000
    2542:	2107      	movs	r1, #7
    2544:	488a      	ldr	r0, [pc, #552]	; (2770 <setup+0x1070>)
    2546:	f003 fb8b 	bl	5c60 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    254a:	2300      	movs	r3, #0
    254c:	2210      	movs	r2, #16
    254e:	4651      	mov	r1, sl
    2550:	487e      	ldr	r0, [pc, #504]	; (274c <setup+0x104c>)
    2552:	f002 fb35 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2556:	2101      	movs	r1, #1
    2558:	4886      	ldr	r0, [pc, #536]	; (2774 <setup+0x1074>)
    255a:	f003 fb81 	bl	5c60 <usb_serial_write>
    255e:	210a      	movs	r1, #10
    2560:	4885      	ldr	r0, [pc, #532]	; (2778 <setup+0x1078>)
    2562:	f003 fb7d 	bl	5c60 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    2566:	2300      	movs	r3, #0
    2568:	2210      	movs	r2, #16
    256a:	ea4f 6119 	mov.w	r1, r9, lsr #24
    256e:	4877      	ldr	r0, [pc, #476]	; (274c <setup+0x104c>)
    2570:	f002 fb26 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2574:	2101      	movs	r1, #1
    2576:	4881      	ldr	r0, [pc, #516]	; (277c <setup+0x107c>)
    2578:	f003 fb72 	bl	5c60 <usb_serial_write>
    257c:	2300      	movs	r3, #0
    257e:	2210      	movs	r2, #16
    2580:	f3c9 4107 	ubfx	r1, r9, #16, #8
    2584:	4871      	ldr	r0, [pc, #452]	; (274c <setup+0x104c>)
    2586:	f002 fb1b 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    258a:	2101      	movs	r1, #1
    258c:	487b      	ldr	r0, [pc, #492]	; (277c <setup+0x107c>)
    258e:	f003 fb67 	bl	5c60 <usb_serial_write>
    2592:	2300      	movs	r3, #0
    2594:	2210      	movs	r2, #16
    2596:	f3c9 2107 	ubfx	r1, r9, #8, #8
    259a:	486c      	ldr	r0, [pc, #432]	; (274c <setup+0x104c>)
    259c:	f002 fb10 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    25a0:	2101      	movs	r1, #1
    25a2:	4876      	ldr	r0, [pc, #472]	; (277c <setup+0x107c>)
    25a4:	f003 fb5c 	bl	5c60 <usb_serial_write>
    25a8:	2300      	movs	r3, #0
    25aa:	2210      	movs	r2, #16
    25ac:	fa5f f189 	uxtb.w	r1, r9
    25b0:	4866      	ldr	r0, [pc, #408]	; (274c <setup+0x104c>)
    25b2:	f002 fb05 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    25b6:	f858 8006 	ldr.w	r8, [r8, r6]
    25ba:	4870      	ldr	r0, [pc, #448]	; (277c <setup+0x107c>)
    25bc:	2101      	movs	r1, #1
    25be:	f003 fb4f 	bl	5c60 <usb_serial_write>
    25c2:	2300      	movs	r3, #0
    25c4:	2210      	movs	r2, #16
    25c6:	ea4f 6118 	mov.w	r1, r8, lsr #24
    25ca:	4860      	ldr	r0, [pc, #384]	; (274c <setup+0x104c>)
    25cc:	f002 faf8 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    25d0:	2101      	movs	r1, #1
    25d2:	486a      	ldr	r0, [pc, #424]	; (277c <setup+0x107c>)
    25d4:	f003 fb44 	bl	5c60 <usb_serial_write>
    25d8:	2300      	movs	r3, #0
    25da:	2210      	movs	r2, #16
    25dc:	f3c8 4107 	ubfx	r1, r8, #16, #8
    25e0:	485a      	ldr	r0, [pc, #360]	; (274c <setup+0x104c>)
    25e2:	f002 faed 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    25e6:	2101      	movs	r1, #1
    25e8:	4864      	ldr	r0, [pc, #400]	; (277c <setup+0x107c>)
    25ea:	f003 fb39 	bl	5c60 <usb_serial_write>
    25ee:	2300      	movs	r3, #0
    25f0:	2210      	movs	r2, #16
    25f2:	f3c8 2107 	ubfx	r1, r8, #8, #8
    25f6:	4855      	ldr	r0, [pc, #340]	; (274c <setup+0x104c>)
    25f8:	f002 fae2 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    25fc:	2101      	movs	r1, #1
    25fe:	485f      	ldr	r0, [pc, #380]	; (277c <setup+0x107c>)
    2600:	f003 fb2e 	bl	5c60 <usb_serial_write>
    2604:	fa5f f188 	uxtb.w	r1, r8
    2608:	2300      	movs	r3, #0
    260a:	2210      	movs	r2, #16
    260c:	484f      	ldr	r0, [pc, #316]	; (274c <setup+0x104c>)
    260e:	f002 fad7 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2612:	4858      	ldr	r0, [pc, #352]	; (2774 <setup+0x1074>)
    2614:	2101      	movs	r1, #1
    2616:	f003 fb23 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    261a:	484c      	ldr	r0, [pc, #304]	; (274c <setup+0x104c>)
    261c:	f002 faaa 	bl	4b74 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2620:	4b57      	ldr	r3, [pc, #348]	; (2780 <setup+0x1080>)
    2622:	681b      	ldr	r3, [r3, #0]
    2624:	3401      	adds	r4, #1
    2626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    262a:	b2e4      	uxtb	r4, r4
    262c:	3301      	adds	r3, #1
    262e:	429c      	cmp	r4, r3
    2630:	f4ff ad09 	bcc.w	2046 <setup+0x946>
    2634:	f7ff bb12 	b.w	1c5c <setup+0x55c>
    2638:	2104      	movs	r1, #4
    263a:	4843      	ldr	r0, [pc, #268]	; (2748 <setup+0x1048>)
    263c:	f003 fb10 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2640:	2300      	movs	r3, #0
    2642:	220a      	movs	r2, #10
    2644:	4621      	mov	r1, r4
    2646:	4841      	ldr	r0, [pc, #260]	; (274c <setup+0x104c>)
    2648:	f002 faba 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    264c:	2111      	movs	r1, #17
    264e:	484d      	ldr	r0, [pc, #308]	; (2784 <setup+0x1084>)
    2650:	f003 fb06 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2654:	483d      	ldr	r0, [pc, #244]	; (274c <setup+0x104c>)
    2656:	f002 fa8d 	bl	4b74 <Print::println()>
    265a:	e7e1      	b.n	2620 <setup+0xf20>
    265c:	2104      	movs	r1, #4
    265e:	483a      	ldr	r0, [pc, #232]	; (2748 <setup+0x1048>)
    2660:	f003 fafe 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2664:	2300      	movs	r3, #0
    2666:	220a      	movs	r2, #10
    2668:	4621      	mov	r1, r4
    266a:	4838      	ldr	r0, [pc, #224]	; (274c <setup+0x104c>)
    266c:	f002 faa8 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2670:	2111      	movs	r1, #17
    2672:	4845      	ldr	r0, [pc, #276]	; (2788 <setup+0x1088>)
    2674:	f003 faf4 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2678:	4834      	ldr	r0, [pc, #208]	; (274c <setup+0x104c>)
    267a:	f002 fa7b 	bl	4b74 <Print::println()>
    267e:	e7cf      	b.n	2620 <setup+0xf20>
    2680:	2104      	movs	r1, #4
    2682:	4831      	ldr	r0, [pc, #196]	; (2748 <setup+0x1048>)
    2684:	f003 faec 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2688:	220a      	movs	r2, #10
    268a:	2300      	movs	r3, #0
    268c:	4621      	mov	r1, r4
    268e:	482f      	ldr	r0, [pc, #188]	; (274c <setup+0x104c>)
    2690:	f002 fa96 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2694:	210f      	movs	r1, #15
    2696:	483d      	ldr	r0, [pc, #244]	; (278c <setup+0x108c>)
    2698:	f003 fae2 	bl	5c60 <usb_serial_write>
            (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    269c:	f8d8 3000 	ldr.w	r3, [r8]
    26a0:	0298      	lsls	r0, r3, #10
    26a2:	bf4c      	ite	mi
    26a4:	483a      	ldrmi	r0, [pc, #232]	; (2790 <setup+0x1090>)
    26a6:	483b      	ldrpl	r0, [pc, #236]	; (2794 <setup+0x1094>)
    26a8:	2111      	movs	r1, #17
    26aa:	f003 fad9 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    26ae:	4827      	ldr	r0, [pc, #156]	; (274c <setup+0x104c>)
    26b0:	f002 fa60 	bl	4b74 <Print::println()>
    26b4:	e7b4      	b.n	2620 <setup+0xf20>
    26b6:	2104      	movs	r1, #4
    26b8:	4823      	ldr	r0, [pc, #140]	; (2748 <setup+0x1048>)
    26ba:	f003 fad1 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26be:	2300      	movs	r3, #0
    26c0:	220a      	movs	r2, #10
    26c2:	4621      	mov	r1, r4
    26c4:	4821      	ldr	r0, [pc, #132]	; (274c <setup+0x104c>)
    26c6:	f002 fa7b 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    26ca:	210e      	movs	r1, #14
    26cc:	4820      	ldr	r0, [pc, #128]	; (2750 <setup+0x1050>)
    26ce:	f003 fac7 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    26d2:	481e      	ldr	r0, [pc, #120]	; (274c <setup+0x104c>)
    26d4:	f002 fa4e 	bl	4b74 <Print::println()>
    26d8:	e7a2      	b.n	2620 <setup+0xf20>
    26da:	2104      	movs	r1, #4
    26dc:	481a      	ldr	r0, [pc, #104]	; (2748 <setup+0x1048>)
    26de:	f003 fabf 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26e2:	2300      	movs	r3, #0
    26e4:	220a      	movs	r2, #10
    26e6:	4621      	mov	r1, r4
    26e8:	4818      	ldr	r0, [pc, #96]	; (274c <setup+0x104c>)
    26ea:	f002 fa69 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    26ee:	210e      	movs	r1, #14
    26f0:	4818      	ldr	r0, [pc, #96]	; (2754 <setup+0x1054>)
    26f2:	f003 fab5 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    26f6:	4815      	ldr	r0, [pc, #84]	; (274c <setup+0x104c>)
    26f8:	f002 fa3c 	bl	4b74 <Print::println()>
    26fc:	e790      	b.n	2620 <setup+0xf20>
    26fe:	2104      	movs	r1, #4
    2700:	4811      	ldr	r0, [pc, #68]	; (2748 <setup+0x1048>)
    2702:	f003 faad 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2706:	2300      	movs	r3, #0
    2708:	220a      	movs	r2, #10
    270a:	4621      	mov	r1, r4
    270c:	480f      	ldr	r0, [pc, #60]	; (274c <setup+0x104c>)
    270e:	f002 fa57 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2712:	2112      	movs	r1, #18
    2714:	4810      	ldr	r0, [pc, #64]	; (2758 <setup+0x1058>)
    2716:	f003 faa3 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    271a:	480c      	ldr	r0, [pc, #48]	; (274c <setup+0x104c>)
    271c:	f002 fa2a 	bl	4b74 <Print::println()>
    2720:	e77e      	b.n	2620 <setup+0xf20>
    2722:	2104      	movs	r1, #4
    2724:	4808      	ldr	r0, [pc, #32]	; (2748 <setup+0x1048>)
    2726:	f003 fa9b 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    272a:	2300      	movs	r3, #0
    272c:	220a      	movs	r2, #10
    272e:	4621      	mov	r1, r4
    2730:	4806      	ldr	r0, [pc, #24]	; (274c <setup+0x104c>)
    2732:	f002 fa45 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2736:	2112      	movs	r1, #18
    2738:	4808      	ldr	r0, [pc, #32]	; (275c <setup+0x105c>)
    273a:	f003 fa91 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    273e:	4803      	ldr	r0, [pc, #12]	; (274c <setup+0x104c>)
    2740:	f002 fa18 	bl	4b74 <Print::println()>
    2744:	e76c      	b.n	2620 <setup+0xf20>
    2746:	bf00      	nop
    2748:	0000d298 	.word	0x0000d298
    274c:	1fff0770 	.word	0x1fff0770
    2750:	0000d2ec 	.word	0x0000d2ec
    2754:	0000d324 	.word	0x0000d324
    2758:	0000d2a0 	.word	0x0000d2a0
    275c:	0000d334 	.word	0x0000d334
    2760:	0000d2fc 	.word	0x0000d2fc
    2764:	0000d348 	.word	0x0000d348
    2768:	0000d358 	.word	0x0000d358
    276c:	0000d378 	.word	0x0000d378
    2770:	0000d3a0 	.word	0x0000d3a0
    2774:	0000d2d4 	.word	0x0000d2d4
    2778:	0000d3a8 	.word	0x0000d3a8
    277c:	0000d23c 	.word	0x0000d23c
    2780:	40024000 	.word	0x40024000
    2784:	0000d3b4 	.word	0x0000d3b4
    2788:	0000d310 	.word	0x0000d310
    278c:	0000d2b4 	.word	0x0000d2b4
    2790:	0000d2c4 	.word	0x0000d2c4
    2794:	0000d2d8 	.word	0x0000d2d8
    2798:	2104      	movs	r1, #4
    279a:	481f      	ldr	r0, [pc, #124]	; (2818 <setup+0x1118>)
    279c:	f003 fa60 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27a0:	2300      	movs	r3, #0
    27a2:	220a      	movs	r2, #10
    27a4:	4621      	mov	r1, r4
    27a6:	481d      	ldr	r0, [pc, #116]	; (281c <setup+0x111c>)
    27a8:	f002 fa0a 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    27ac:	2111      	movs	r1, #17
    27ae:	481c      	ldr	r0, [pc, #112]	; (2820 <setup+0x1120>)
    27b0:	f003 fa56 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    27b4:	4819      	ldr	r0, [pc, #100]	; (281c <setup+0x111c>)
    27b6:	f002 f9dd 	bl	4b74 <Print::println()>
    27ba:	e731      	b.n	2620 <setup+0xf20>
    27bc:	2104      	movs	r1, #4
    27be:	4816      	ldr	r0, [pc, #88]	; (2818 <setup+0x1118>)
    27c0:	f003 fa4e 	bl	5c60 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27c4:	2300      	movs	r3, #0
    27c6:	220a      	movs	r2, #10
    27c8:	4621      	mov	r1, r4
    27ca:	4814      	ldr	r0, [pc, #80]	; (281c <setup+0x111c>)
    27cc:	f002 f9f8 	bl	4bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    27d0:	210f      	movs	r1, #15
    27d2:	4814      	ldr	r0, [pc, #80]	; (2824 <setup+0x1124>)
    27d4:	f003 fa44 	bl	5c60 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    27d8:	4810      	ldr	r0, [pc, #64]	; (281c <setup+0x111c>)
    27da:	f002 f9cb 	bl	4b74 <Print::println()>
    27de:	e71f      	b.n	2620 <setup+0xf20>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    27e0:	2400      	movs	r4, #0
    27e2:	4625      	mov	r5, r4
    27e4:	f7ff bbf1 	b.w	1fca <setup+0x8ca>
    27e8:	480f      	ldr	r0, [pc, #60]	; (2828 <setup+0x1128>)
    27ea:	2110      	movs	r1, #16
    27ec:	f003 fa38 	bl	5c60 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    27f0:	f8d8 9008 	ldr.w	r9, [r8, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    27f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    27f8:	44b8      	add	r8, r7
            if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    27fa:	f3c3 4a8a 	ubfx	sl, r3, #18, #11
    27fe:	e6a0      	b.n	2542 <setup+0xe42>
    2800:	4809      	ldr	r0, [pc, #36]	; (2828 <setup+0x1128>)
    2802:	2110      	movs	r1, #16
    2804:	f003 fa2c 	bl	5c60 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    2808:	f8d9 a008 	ldr.w	sl, [r9, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    280c:	f8d9 3004 	ldr.w	r3, [r9, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    2810:	44c1      	add	r9, r8
            if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    2812:	f3c3 4b8a 	ubfx	fp, r3, #18, #11
    2816:	e51f      	b.n	2258 <setup+0xb58>
    2818:	0000d298 	.word	0x0000d298
    281c:	1fff0770 	.word	0x1fff0770
    2820:	0000d2fc 	.word	0x0000d2fc
    2824:	0000d348 	.word	0x0000d348
    2828:	0000d38c 	.word	0x0000d38c

0000282c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>:
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    282c:	291f      	cmp	r1, #31
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
    282e:	b410      	push	{r4}
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2830:	481b      	ldr	r0, [pc, #108]	; (28a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x74>)
    2832:	d823      	bhi.n	287c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x50>
    2834:	6b04      	ldr	r4, [r0, #48]	; 0x30
    2836:	2301      	movs	r3, #1
    2838:	408b      	lsls	r3, r1
    283a:	4323      	orrs	r3, r4
    283c:	6303      	str	r3, [r0, #48]	; 0x30
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    283e:	4b19      	ldr	r3, [pc, #100]	; (28a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x78>)
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    2840:	79d0      	ldrb	r0, [r2, #7]
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    2842:	440b      	add	r3, r1
    2844:	011b      	lsls	r3, r3, #4
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    2846:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    284a:	6019      	str	r1, [r3, #0]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    284c:	b1f8      	cbz	r0, 288e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x62>
    284e:	6810      	ldr	r0, [r2, #0]
  if ( msg.flags.remote ) code |= (1UL << 20);
    2850:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    2852:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  if ( msg.flags.remote ) code |= (1UL << 20);
    2856:	0509      	lsls	r1, r1, #20
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    2858:	6058      	str	r0, [r3, #4]
  if ( msg.flags.extended ) code |= (3UL << 21);
    285a:	f441 01c0 	orr.w	r1, r1, #6291456	; 0x600000
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    285e:	68d0      	ldr	r0, [r2, #12]
}
    2860:	f85d 4b04 	ldr.w	r4, [sp], #4
    2864:	ba00      	rev	r0, r0
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    2866:	6098      	str	r0, [r3, #8]
    2868:	6910      	ldr	r0, [r2, #16]
    286a:	ba00      	rev	r0, r0
    286c:	60d8      	str	r0, [r3, #12]
  code |= msg.len << 16;
    286e:	7ad2      	ldrb	r2, [r2, #11]
    2870:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);
    2874:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
    2878:	601a      	str	r2, [r3, #0]
}
    287a:	4770      	bx	lr
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    287c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    287e:	f1a1 0c20 	sub.w	ip, r1, #32
    2882:	2301      	movs	r3, #1
    2884:	fa03 f30c 	lsl.w	r3, r3, ip
    2888:	4323      	orrs	r3, r4
    288a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    288c:	e7d7      	b.n	283e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x12>
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    288e:	6814      	ldr	r4, [r2, #0]
    2890:	4805      	ldr	r0, [pc, #20]	; (28a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x7c>)
  if ( msg.flags.remote ) code |= (1UL << 20);
    2892:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    2894:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    2898:	6058      	str	r0, [r3, #4]
  if ( msg.flags.remote ) code |= (1UL << 20);
    289a:	0509      	lsls	r1, r1, #20
    289c:	e7df      	b.n	285e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x32>
    289e:	bf00      	nop
    28a0:	40024000 	.word	0x40024000
    28a4:	04002408 	.word	0x04002408
    28a8:	1ffc0000 	.word	0x1ffc0000

000028ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>:
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    28ac:	291f      	cmp	r1, #31
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
    28ae:	b410      	push	{r4}
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    28b0:	481b      	ldr	r0, [pc, #108]	; (2920 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x74>)
    28b2:	d823      	bhi.n	28fc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x50>
    28b4:	6b04      	ldr	r4, [r0, #48]	; 0x30
    28b6:	2301      	movs	r3, #1
    28b8:	408b      	lsls	r3, r1
    28ba:	4323      	orrs	r3, r4
    28bc:	6303      	str	r3, [r0, #48]	; 0x30
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    28be:	4b19      	ldr	r3, [pc, #100]	; (2924 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x78>)
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    28c0:	79d0      	ldrb	r0, [r2, #7]
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    28c2:	440b      	add	r3, r1
    28c4:	011b      	lsls	r3, r3, #4
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    28c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    28ca:	6019      	str	r1, [r3, #0]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    28cc:	b1f8      	cbz	r0, 290e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x62>
    28ce:	6810      	ldr	r0, [r2, #0]
  if ( msg.flags.remote ) code |= (1UL << 20);
    28d0:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    28d2:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  if ( msg.flags.remote ) code |= (1UL << 20);
    28d6:	0509      	lsls	r1, r1, #20
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    28d8:	6058      	str	r0, [r3, #4]
  if ( msg.flags.extended ) code |= (3UL << 21);
    28da:	f441 01c0 	orr.w	r1, r1, #6291456	; 0x600000
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    28de:	68d0      	ldr	r0, [r2, #12]
}
    28e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    28e4:	ba00      	rev	r0, r0
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    28e6:	6098      	str	r0, [r3, #8]
    28e8:	6910      	ldr	r0, [r2, #16]
    28ea:	ba00      	rev	r0, r0
    28ec:	60d8      	str	r0, [r3, #12]
  code |= msg.len << 16;
    28ee:	7ad2      	ldrb	r2, [r2, #11]
    28f0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);
    28f4:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
    28f8:	601a      	str	r2, [r3, #0]
}
    28fa:	4770      	bx	lr
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    28fc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    28fe:	f1a1 0c20 	sub.w	ip, r1, #32
    2902:	2301      	movs	r3, #1
    2904:	fa03 f30c 	lsl.w	r3, r3, ip
    2908:	4323      	orrs	r3, r4
    290a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    290c:	e7d7      	b.n	28be <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x12>
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    290e:	6814      	ldr	r4, [r2, #0]
    2910:	4805      	ldr	r0, [pc, #20]	; (2928 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x7c>)
  if ( msg.flags.remote ) code |= (1UL << 20);
    2912:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    2914:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    2918:	6058      	str	r0, [r3, #4]
  if ( msg.flags.remote ) code |= (1UL << 20);
    291a:	0509      	lsls	r1, r1, #20
    291c:	e7df      	b.n	28de <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x32>
    291e:	bf00      	nop
    2920:	400a4000 	.word	0x400a4000
    2924:	0400a408 	.word	0x0400a408
    2928:	1ffc0000 	.word	0x1ffc0000

0000292c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    292c:	b510      	push	{r4, lr}
  if ( mb_num == FIFO ) {
    292e:	780b      	ldrb	r3, [r1, #0]
    2930:	2b63      	cmp	r3, #99	; 0x63
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    2932:	4604      	mov	r4, r0
    2934:	b082      	sub	sp, #8
    2936:	4610      	mov	r0, r2
  if ( mb_num == FIFO ) {
    2938:	d013      	beq.n	2962 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x36>
  if ( _mbHandlers[mb_num] ) _mbHandlers[mb_num](msg);
    293a:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
    293e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    2942:	685b      	ldr	r3, [r3, #4]
    2944:	b113      	cbz	r3, 294c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x20>
    2946:	9201      	str	r2, [sp, #4]
    2948:	4798      	blx	r3
    294a:	9801      	ldr	r0, [sp, #4]
  if ( _mainHandler ) _mainHandler(msg);
    294c:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    2950:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
    2954:	b11b      	cbz	r3, 295e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x32>
}
    2956:	b002      	add	sp, #8
    2958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if ( _mainHandler ) _mainHandler(msg);
    295c:	4718      	bx	r3
}
    295e:	b002      	add	sp, #8
    2960:	bd10      	pop	{r4, pc}
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    2962:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    2966:	f8d4 3704 	ldr.w	r3, [r4, #1796]	; 0x704
    296a:	2b00      	cmp	r3, #0
    296c:	d0f0      	beq.n	2950 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    296e:	9201      	str	r2, [sp, #4]
    2970:	4798      	blx	r3
    2972:	9801      	ldr	r0, [sp, #4]
    2974:	e7ec      	b.n	2950 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    2976:	bf00      	nop

00002978 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>:
FCTP_FUNC uint64_t FCTP_OPT::events() {
    2978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ( !isEventsUsed ) isEventsUsed = 1;
    297c:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
FCTP_FUNC uint64_t FCTP_OPT::events() {
    2980:	b08f      	sub	sp, #60	; 0x3c
  if ( !isEventsUsed ) isEventsUsed = 1;
    2982:	f897 3700 	ldrb.w	r3, [r7, #1792]	; 0x700
FCTP_FUNC uint64_t FCTP_OPT::events() {
    2986:	4604      	mov	r4, r0
  if ( !isEventsUsed ) isEventsUsed = 1;
    2988:	b913      	cbnz	r3, 2990 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x18>
    298a:	2301      	movs	r3, #1
    298c:	f887 3700 	strb.w	r3, [r7, #1792]	; 0x700
        uint16_t size() { return _available; }
    2990:	8b23      	ldrh	r3, [r4, #24]
    2992:	b29b      	uxth	r3, r3
  if ( rxBuffer.size() ) {
    2994:	2b00      	cmp	r3, #0
    2996:	d14f      	bne.n	2a38 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xc0>
  NVIC_DISABLE_IRQ(nvicIrq);
    2998:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    299c:	0953      	lsrs	r3, r2, #5
    299e:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    29a2:	3360      	adds	r3, #96	; 0x60
    29a4:	009b      	lsls	r3, r3, #2
    29a6:	f002 021f 	and.w	r2, r2, #31
    29aa:	2101      	movs	r1, #1
    29ac:	fa01 f202 	lsl.w	r2, r1, r2
    29b0:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    29b4:	601a      	str	r2, [r3, #0]
    29b6:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    29ba:	b29b      	uxth	r3, r3
  if ( txBuffer.size() ) {
    29bc:	b323      	cbz	r3, 2a08 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>


template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::peek_front(T *buffer, uint16_t length, uint32_t entry) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    29be:	f8b6 1b1a 	ldrh.w	r1, [r6, #2842]	; 0xb1a
    29c2:	231a      	movs	r3, #26
    29c4:	f001 010f 	and.w	r1, r1, #15
    29c8:	fb03 4101 	mla	r1, r3, r1, r4
    29cc:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    29d0:	3112      	adds	r1, #18
    29d2:	2218      	movs	r2, #24
    29d4:	a808      	add	r0, sp, #32
    memmove(&frame, buf, sizeof(frame));
    29d6:	ad08      	add	r5, sp, #32
    29d8:	f002 f904 	bl	4be4 <memcpy>
    29dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    29de:	f10d 0c08 	add.w	ip, sp, #8
    29e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    29e6:	e895 0003 	ldmia.w	r5, {r0, r1}
    29ea:	e88c 0003 	stmia.w	ip, {r0, r1}
    if ( frame.mb == -1 ) {
    29ee:	f99d 101c 	ldrsb.w	r1, [sp, #28]
    29f2:	1c4b      	adds	r3, r1, #1
    29f4:	d04a      	beq.n	2a8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x114>
    else if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, frame.mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    29f6:	4b53      	ldr	r3, [pc, #332]	; (2b44 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>)
    29f8:	440b      	add	r3, r1
    29fa:	011b      	lsls	r3, r3, #4
    29fc:	681b      	ldr	r3, [r3, #0]
    29fe:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2a02:	2b08      	cmp	r3, #8
    2a04:	f000 8081 	beq.w	2b0a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x192>
  NVIC_ENABLE_IRQ(nvicIrq);
    2a08:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    2a0c:	0953      	lsrs	r3, r2, #5
    2a0e:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    2a12:	3340      	adds	r3, #64	; 0x40
    2a14:	009b      	lsls	r3, r3, #2
    2a16:	2101      	movs	r1, #1
    2a18:	f002 021f 	and.w	r2, r2, #31
    2a1c:	fa01 f202 	lsl.w	r2, r1, r2
    2a20:	601a      	str	r2, [r3, #0]
        uint16_t size() { return _available; }
    2a22:	8b23      	ldrh	r3, [r4, #24]
    2a24:	f8b6 0b1e 	ldrh.w	r0, [r6, #2846]	; 0xb1e
    2a28:	b29b      	uxth	r3, r3
    2a2a:	b280      	uxth	r0, r0
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    2a2c:	2100      	movs	r1, #0
    2a2e:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
}
    2a32:	b00f      	add	sp, #60	; 0x3c
    2a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::readBytes(T *buffer, uint16_t length) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2a38:	8aa1      	ldrh	r1, [r4, #20]
    2a3a:	231a      	movs	r3, #26
    2a3c:	b2c9      	uxtb	r1, r1
    2a3e:	fb03 4101 	mla	r1, r3, r1, r4
    2a42:	2218      	movs	r2, #24
    2a44:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    2a48:	a808      	add	r0, sp, #32
    2a4a:	f002 f8cb 	bl	4be4 <memcpy>
    head = ((head + 1)&(2*_size-1));
    2a4e:	8aa3      	ldrh	r3, [r4, #20]
    2a50:	3301      	adds	r3, #1
    2a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2a56:	82a3      	strh	r3, [r4, #20]
    if ( _available ) _available--;
    2a58:	8b23      	ldrh	r3, [r4, #24]
    2a5a:	b29b      	uxth	r3, r3
    2a5c:	b11b      	cbz	r3, 2a66 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xee>
    2a5e:	8b23      	ldrh	r3, [r4, #24]
    2a60:	3b01      	subs	r3, #1
    2a62:	b29b      	uxth	r3, r3
    2a64:	8323      	strh	r3, [r4, #24]
    memmove(&frame, buf, sizeof(frame));
    2a66:	ad08      	add	r5, sp, #32
    2a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2a6a:	ae02      	add	r6, sp, #8
    2a6c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2a6e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2a72:	e886 0003 	stmia.w	r6, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    2a76:	aa02      	add	r2, sp, #8
    2a78:	f89d 301c 	ldrb.w	r3, [sp, #28]
    2a7c:	f88d 3007 	strb.w	r3, [sp, #7]
    2a80:	f10d 0107 	add.w	r1, sp, #7
    2a84:	4620      	mov	r0, r4
    2a86:	f7ff ff51 	bl	292c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    2a8a:	e785      	b.n	2998 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x20>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2a8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 2b48 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    2a90:	f8d8 5000 	ldr.w	r5, [r8]
    2a94:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
    2a98:	d050      	beq.n	2b3c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1c4>
    2a9a:	f7fd fe73 	bl	784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2a9e:	f8d8 3000 	ldr.w	r3, [r8]
    2aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2aa6:	3301      	adds	r3, #1
    2aa8:	4283      	cmp	r3, r0
    2aaa:	4605      	mov	r5, r0
    2aac:	d9ac      	bls.n	2a08 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2aae:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2b44 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2ab2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2b48 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    2ab6:	e008      	b.n	2aca <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x152>
    2ab8:	f8d8 3000 	ldr.w	r3, [r8]
    2abc:	3501      	adds	r5, #1
    2abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2ac2:	b2ed      	uxtb	r5, r5
    2ac4:	3301      	adds	r3, #1
    2ac6:	429d      	cmp	r5, r3
    2ac8:	d29e      	bcs.n	2a08 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2aca:	eb05 0309 	add.w	r3, r5, r9
    2ace:	011b      	lsls	r3, r3, #4
    2ad0:	681b      	ldr	r3, [r3, #0]
    2ad2:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2ad6:	2b08      	cmp	r3, #8
    2ad8:	d1ee      	bne.n	2ab8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
          writeTxMailbox(i, frame);
    2ada:	aa02      	add	r2, sp, #8
    2adc:	4629      	mov	r1, r5
    2ade:	4620      	mov	r0, r4
    2ae0:	f7ff fea4 	bl	282c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    2ae4:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    2ae8:	3301      	adds	r3, #1
    2aea:	f003 031f 	and.w	r3, r3, #31
    2aee:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    2af2:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2af6:	b29b      	uxth	r3, r3
    2af8:	2b00      	cmp	r3, #0
    2afa:	d0dd      	beq.n	2ab8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
    2afc:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2b00:	3b01      	subs	r3, #1
    2b02:	b29b      	uxth	r3, r3
    2b04:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    2b08:	e7d6      	b.n	2ab8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
      writeTxMailbox(frame.mb, frame);
    2b0a:	aa02      	add	r2, sp, #8
    2b0c:	b2c9      	uxtb	r1, r1
    2b0e:	4620      	mov	r0, r4
    2b10:	f7ff fe8c 	bl	282c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    2b14:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    2b18:	3301      	adds	r3, #1
    2b1a:	f003 031f 	and.w	r3, r3, #31
    2b1e:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    2b22:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2b26:	b29b      	uxth	r3, r3
    2b28:	2b00      	cmp	r3, #0
    2b2a:	f43f af6d 	beq.w	2a08 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
    2b2e:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2b32:	3b01      	subs	r3, #1
    2b34:	b29b      	uxth	r3, r3
    2b36:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    2b3a:	e765      	b.n	2a08 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2b3c:	f8d8 3000 	ldr.w	r3, [r8]
    2b40:	e7b5      	b.n	2aae <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x136>
    2b42:	bf00      	nop
    2b44:	04002408 	.word	0x04002408
    2b48:	40024000 	.word	0x40024000

00002b4c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    2b4c:	b510      	push	{r4, lr}
  if ( mb_num == FIFO ) {
    2b4e:	780b      	ldrb	r3, [r1, #0]
    2b50:	2b63      	cmp	r3, #99	; 0x63
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    2b52:	4604      	mov	r4, r0
    2b54:	b082      	sub	sp, #8
    2b56:	4610      	mov	r0, r2
  if ( mb_num == FIFO ) {
    2b58:	d013      	beq.n	2b82 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x36>
  if ( _mbHandlers[mb_num] ) _mbHandlers[mb_num](msg);
    2b5a:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
    2b5e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    2b62:	685b      	ldr	r3, [r3, #4]
    2b64:	b113      	cbz	r3, 2b6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x20>
    2b66:	9201      	str	r2, [sp, #4]
    2b68:	4798      	blx	r3
    2b6a:	9801      	ldr	r0, [sp, #4]
  if ( _mainHandler ) _mainHandler(msg);
    2b6c:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    2b70:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
    2b74:	b11b      	cbz	r3, 2b7e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x32>
}
    2b76:	b002      	add	sp, #8
    2b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if ( _mainHandler ) _mainHandler(msg);
    2b7c:	4718      	bx	r3
}
    2b7e:	b002      	add	sp, #8
    2b80:	bd10      	pop	{r4, pc}
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    2b82:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    2b86:	f8d4 3704 	ldr.w	r3, [r4, #1796]	; 0x704
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d0f0      	beq.n	2b70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    2b8e:	9201      	str	r2, [sp, #4]
    2b90:	4798      	blx	r3
    2b92:	9801      	ldr	r0, [sp, #4]
    2b94:	e7ec      	b.n	2b70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    2b96:	bf00      	nop

00002b98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>:
FCTP_FUNC uint64_t FCTP_OPT::events() {
    2b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ( !isEventsUsed ) isEventsUsed = 1;
    2b9c:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
FCTP_FUNC uint64_t FCTP_OPT::events() {
    2ba0:	b08f      	sub	sp, #60	; 0x3c
  if ( !isEventsUsed ) isEventsUsed = 1;
    2ba2:	f897 3700 	ldrb.w	r3, [r7, #1792]	; 0x700
FCTP_FUNC uint64_t FCTP_OPT::events() {
    2ba6:	4604      	mov	r4, r0
  if ( !isEventsUsed ) isEventsUsed = 1;
    2ba8:	b913      	cbnz	r3, 2bb0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x18>
    2baa:	2301      	movs	r3, #1
    2bac:	f887 3700 	strb.w	r3, [r7, #1792]	; 0x700
        uint16_t size() { return _available; }
    2bb0:	8b23      	ldrh	r3, [r4, #24]
    2bb2:	b29b      	uxth	r3, r3
  if ( rxBuffer.size() ) {
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d14f      	bne.n	2c58 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xc0>
  NVIC_DISABLE_IRQ(nvicIrq);
    2bb8:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    2bbc:	0953      	lsrs	r3, r2, #5
    2bbe:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    2bc2:	3360      	adds	r3, #96	; 0x60
    2bc4:	009b      	lsls	r3, r3, #2
    2bc6:	f002 021f 	and.w	r2, r2, #31
    2bca:	2101      	movs	r1, #1
    2bcc:	fa01 f202 	lsl.w	r2, r1, r2
    2bd0:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    2bd4:	601a      	str	r2, [r3, #0]
    2bd6:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2bda:	b29b      	uxth	r3, r3
  if ( txBuffer.size() ) {
    2bdc:	b323      	cbz	r3, 2c28 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2bde:	f8b6 1b1a 	ldrh.w	r1, [r6, #2842]	; 0xb1a
    2be2:	231a      	movs	r3, #26
    2be4:	f001 010f 	and.w	r1, r1, #15
    2be8:	fb03 4101 	mla	r1, r3, r1, r4
    2bec:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    2bf0:	3112      	adds	r1, #18
    2bf2:	2218      	movs	r2, #24
    2bf4:	a808      	add	r0, sp, #32
    memmove(&frame, buf, sizeof(frame));
    2bf6:	ad08      	add	r5, sp, #32
    2bf8:	f001 fff4 	bl	4be4 <memcpy>
    2bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2bfe:	f10d 0c08 	add.w	ip, sp, #8
    2c02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2c06:	e895 0003 	ldmia.w	r5, {r0, r1}
    2c0a:	e88c 0003 	stmia.w	ip, {r0, r1}
    if ( frame.mb == -1 ) {
    2c0e:	f99d 101c 	ldrsb.w	r1, [sp, #28]
    2c12:	1c4b      	adds	r3, r1, #1
    2c14:	d04a      	beq.n	2cac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x114>
    else if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, frame.mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2c16:	4b53      	ldr	r3, [pc, #332]	; (2d64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>)
    2c18:	440b      	add	r3, r1
    2c1a:	011b      	lsls	r3, r3, #4
    2c1c:	681b      	ldr	r3, [r3, #0]
    2c1e:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2c22:	2b08      	cmp	r3, #8
    2c24:	f000 8081 	beq.w	2d2a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x192>
  NVIC_ENABLE_IRQ(nvicIrq);
    2c28:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    2c2c:	0953      	lsrs	r3, r2, #5
    2c2e:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    2c32:	3340      	adds	r3, #64	; 0x40
    2c34:	009b      	lsls	r3, r3, #2
    2c36:	2101      	movs	r1, #1
    2c38:	f002 021f 	and.w	r2, r2, #31
    2c3c:	fa01 f202 	lsl.w	r2, r1, r2
    2c40:	601a      	str	r2, [r3, #0]
        uint16_t size() { return _available; }
    2c42:	8b23      	ldrh	r3, [r4, #24]
    2c44:	f8b6 0b1e 	ldrh.w	r0, [r6, #2846]	; 0xb1e
    2c48:	b29b      	uxth	r3, r3
    2c4a:	b280      	uxth	r0, r0
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    2c4c:	2100      	movs	r1, #0
    2c4e:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
}
    2c52:	b00f      	add	sp, #60	; 0x3c
    2c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2c58:	8aa1      	ldrh	r1, [r4, #20]
    2c5a:	231a      	movs	r3, #26
    2c5c:	b2c9      	uxtb	r1, r1
    2c5e:	fb03 4101 	mla	r1, r3, r1, r4
    2c62:	2218      	movs	r2, #24
    2c64:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    2c68:	a808      	add	r0, sp, #32
    2c6a:	f001 ffbb 	bl	4be4 <memcpy>
    head = ((head + 1)&(2*_size-1));
    2c6e:	8aa3      	ldrh	r3, [r4, #20]
    2c70:	3301      	adds	r3, #1
    2c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2c76:	82a3      	strh	r3, [r4, #20]
    if ( _available ) _available--;
    2c78:	8b23      	ldrh	r3, [r4, #24]
    2c7a:	b29b      	uxth	r3, r3
    2c7c:	b11b      	cbz	r3, 2c86 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xee>
    2c7e:	8b23      	ldrh	r3, [r4, #24]
    2c80:	3b01      	subs	r3, #1
    2c82:	b29b      	uxth	r3, r3
    2c84:	8323      	strh	r3, [r4, #24]
    memmove(&frame, buf, sizeof(frame));
    2c86:	ad08      	add	r5, sp, #32
    2c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2c8a:	ae02      	add	r6, sp, #8
    2c8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2c8e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2c92:	e886 0003 	stmia.w	r6, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    2c96:	aa02      	add	r2, sp, #8
    2c98:	f89d 301c 	ldrb.w	r3, [sp, #28]
    2c9c:	f88d 3007 	strb.w	r3, [sp, #7]
    2ca0:	f10d 0107 	add.w	r1, sp, #7
    2ca4:	4620      	mov	r0, r4
    2ca6:	f7ff ff51 	bl	2b4c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    2caa:	e785      	b.n	2bb8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x20>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2cac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 2d68 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    2cb0:	f8d8 5000 	ldr.w	r5, [r8]
    2cb4:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
    2cb8:	d050      	beq.n	2d5c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1c4>
    2cba:	f7fd fd87 	bl	7cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2cbe:	f8d8 3000 	ldr.w	r3, [r8]
    2cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2cc6:	3301      	adds	r3, #1
    2cc8:	4283      	cmp	r3, r0
    2cca:	4605      	mov	r5, r0
    2ccc:	d9ac      	bls.n	2c28 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2cce:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2d64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2cd2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2d68 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    2cd6:	e008      	b.n	2cea <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x152>
    2cd8:	f8d8 3000 	ldr.w	r3, [r8]
    2cdc:	3501      	adds	r5, #1
    2cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2ce2:	b2ed      	uxtb	r5, r5
    2ce4:	3301      	adds	r3, #1
    2ce6:	429d      	cmp	r5, r3
    2ce8:	d29e      	bcs.n	2c28 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2cea:	eb05 0309 	add.w	r3, r5, r9
    2cee:	011b      	lsls	r3, r3, #4
    2cf0:	681b      	ldr	r3, [r3, #0]
    2cf2:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2cf6:	2b08      	cmp	r3, #8
    2cf8:	d1ee      	bne.n	2cd8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
          writeTxMailbox(i, frame);
    2cfa:	aa02      	add	r2, sp, #8
    2cfc:	4629      	mov	r1, r5
    2cfe:	4620      	mov	r0, r4
    2d00:	f7ff fdd4 	bl	28ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    2d04:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    2d08:	3301      	adds	r3, #1
    2d0a:	f003 031f 	and.w	r3, r3, #31
    2d0e:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    2d12:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2d16:	b29b      	uxth	r3, r3
    2d18:	2b00      	cmp	r3, #0
    2d1a:	d0dd      	beq.n	2cd8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
    2d1c:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2d20:	3b01      	subs	r3, #1
    2d22:	b29b      	uxth	r3, r3
    2d24:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    2d28:	e7d6      	b.n	2cd8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
      writeTxMailbox(frame.mb, frame);
    2d2a:	aa02      	add	r2, sp, #8
    2d2c:	b2c9      	uxtb	r1, r1
    2d2e:	4620      	mov	r0, r4
    2d30:	f7ff fdbc 	bl	28ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    2d34:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    2d38:	3301      	adds	r3, #1
    2d3a:	f003 031f 	and.w	r3, r3, #31
    2d3e:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    2d42:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2d46:	b29b      	uxth	r3, r3
    2d48:	2b00      	cmp	r3, #0
    2d4a:	f43f af6d 	beq.w	2c28 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
    2d4e:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2d52:	3b01      	subs	r3, #1
    2d54:	b29b      	uxth	r3, r3
    2d56:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    2d5a:	e765      	b.n	2c28 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2d5c:	f8d8 3000 	ldr.w	r3, [r8]
    2d60:	e7b5      	b.n	2cce <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x136>
    2d62:	bf00      	nop
    2d64:	0400a408 	.word	0x0400a408
    2d68:	400a4000 	.word	0x400a4000

00002d6c <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>:
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    2d6c:	8843      	ldrh	r3, [r0, #2]
    2d6e:	f04f 0c1a 	mov.w	ip, #26
    2d72:	f003 030f 	and.w	r3, r3, #15
    2d76:	fb0c 0303 	mla	r3, ip, r3, r0
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
    2d7a:	b510      	push	{r4, lr}
    2d7c:	4604      	mov	r4, r0
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    2d7e:	2000      	movs	r0, #0
    2d80:	7598      	strb	r0, [r3, #22]
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    2d82:	8863      	ldrh	r3, [r4, #2]
    2d84:	f003 030f 	and.w	r3, r3, #15
    2d88:	fb0c 4303 	mla	r3, ip, r3, r4
    2d8c:	75da      	strb	r2, [r3, #23]
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    2d8e:	8860      	ldrh	r0, [r4, #2]
    2d90:	f000 000f 	and.w	r0, r0, #15
    2d94:	fb0c 4000 	mla	r0, ip, r0, r4
    2d98:	3018      	adds	r0, #24
    2d9a:	f004 fc53 	bl	7644 <memmove>
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    2d9e:	8862      	ldrh	r2, [r4, #2]
    2da0:	8823      	ldrh	r3, [r4, #0]
    2da2:	b29b      	uxth	r3, r3
    2da4:	b292      	uxth	r2, r2
    2da6:	f083 0310 	eor.w	r3, r3, #16
    2daa:	429a      	cmp	r2, r3
    2dac:	d104      	bne.n	2db8 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x4c>
    2dae:	8823      	ldrh	r3, [r4, #0]
    2db0:	3301      	adds	r3, #1
    2db2:	f003 031f 	and.w	r3, r3, #31
    2db6:	8023      	strh	r3, [r4, #0]
    tail = ((tail + 1)&(2*_size-1));
    2db8:	8863      	ldrh	r3, [r4, #2]
    2dba:	3301      	adds	r3, #1
    2dbc:	f003 031f 	and.w	r3, r3, #31
    2dc0:	8063      	strh	r3, [r4, #2]
    if ( _available < _size ) _available++;
    2dc2:	88a3      	ldrh	r3, [r4, #4]
    2dc4:	b29b      	uxth	r3, r3
    2dc6:	2b0f      	cmp	r3, #15
    2dc8:	d803      	bhi.n	2dd2 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x66>
    2dca:	88a3      	ldrh	r3, [r4, #4]
    2dcc:	3301      	adds	r3, #1
    2dce:	b29b      	uxth	r3, r3
    2dd0:	80a3      	strh	r3, [r4, #4]
}
    2dd2:	bd10      	pop	{r4, pc}

00002dd4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>:
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    2dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( msg.seq ) {
    2dd6:	7d8b      	ldrb	r3, [r1, #22]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2dd8:	4e4d      	ldr	r6, [pc, #308]	; (2f10 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    2dda:	b08d      	sub	sp, #52	; 0x34
    2ddc:	460d      	mov	r5, r1
    2dde:	4604      	mov	r4, r0
  if ( msg.seq ) {
    2de0:	2b00      	cmp	r3, #0
    2de2:	d14b      	bne.n	2e7c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2de4:	6833      	ldr	r3, [r6, #0]
    2de6:	f013 5c00 	ands.w	ip, r3, #536870912	; 0x20000000
    2dea:	d025      	beq.n	2e38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x64>
    2dec:	f7fd fcee 	bl	7cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2df0:	6833      	ldr	r3, [r6, #0]
    2df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2df6:	3301      	adds	r3, #1
    2df8:	4298      	cmp	r0, r3
    2dfa:	4684      	mov	ip, r0
    2dfc:	d21e      	bcs.n	2e3c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2dfe:	4945      	ldr	r1, [pc, #276]	; (2f14 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2e00:	4843      	ldr	r0, [pc, #268]	; (2f10 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    2e02:	e007      	b.n	2e14 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x40>
    2e04:	6803      	ldr	r3, [r0, #0]
    2e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2e0a:	fa5f fc82 	uxtb.w	ip, r2
    2e0e:	3301      	adds	r3, #1
    2e10:	459c      	cmp	ip, r3
    2e12:	d213      	bcs.n	2e3c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2e14:	eb0c 0301 	add.w	r3, ip, r1
    2e18:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2e1a:	f10c 0201 	add.w	r2, ip, #1
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2e1e:	681b      	ldr	r3, [r3, #0]
    2e20:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2e24:	2b08      	cmp	r3, #8
    2e26:	d1ed      	bne.n	2e04 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x30>
      writeTxMailbox(i, msg);
    2e28:	4620      	mov	r0, r4
    2e2a:	462a      	mov	r2, r5
    2e2c:	4661      	mov	r1, ip
    2e2e:	f7ff fd3d 	bl	28ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    2e32:	2001      	movs	r0, #1
}
    2e34:	b00d      	add	sp, #52	; 0x34
    2e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2e38:	6833      	ldr	r3, [r6, #0]
    2e3a:	e7e0      	b.n	2dfe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x2a>
  CAN_message_t msg_copy = msg;
    2e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e3e:	46ec      	mov	ip, sp
    2e40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2e44:	e895 0003 	ldmia.w	r5, {r0, r1}
    2e48:	e88c 0003 	stmia.w	ip, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    2e4c:	f04f 0eff 	mov.w	lr, #255	; 0xff
    2e50:	f88d e014 	strb.w	lr, [sp, #20]
    2e54:	466f      	mov	r7, sp
    2e56:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2e58:	ae06      	add	r6, sp, #24
    2e5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2e5c:	e89c 0003 	ldmia.w	ip, {r0, r1}
    2e60:	e886 0003 	stmia.w	r6, {r0, r1}
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    2e64:	2218      	movs	r2, #24
    2e66:	f504 50d8 	add.w	r0, r4, #6912	; 0x1b00
    2e6a:	eb0d 0102 	add.w	r1, sp, r2
    2e6e:	301a      	adds	r0, #26
    2e70:	f7ff ff7c 	bl	2d6c <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>
  return -1; /* transmit entry failed, no mailboxes available, queued */
    2e74:	f04f 30ff 	mov.w	r0, #4294967295
}
    2e78:	b00d      	add	sp, #52	; 0x34
    2e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2e7c:	6830      	ldr	r0, [r6, #0]
    2e7e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
    2e82:	d042      	beq.n	2f0a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x136>
    2e84:	f7fd fca2 	bl	7cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2e88:	6833      	ldr	r3, [r6, #0]
    2e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2e8e:	3301      	adds	r3, #1
    2e90:	4283      	cmp	r3, r0
    2e92:	d929      	bls.n	2ee8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2e94:	4e1f      	ldr	r6, [pc, #124]	; (2f14 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2e96:	4f1e      	ldr	r7, [pc, #120]	; (2f10 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    2e98:	e005      	b.n	2ea6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xd2>
    2e9a:	683b      	ldr	r3, [r7, #0]
    2e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2ea0:	3301      	adds	r3, #1
    2ea2:	4298      	cmp	r0, r3
    2ea4:	d220      	bcs.n	2ee8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2ea6:	1983      	adds	r3, r0, r6
    2ea8:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2eaa:	1c41      	adds	r1, r0, #1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2eac:	681a      	ldr	r2, [r3, #0]
    2eae:	0112      	lsls	r2, r2, #4
    2eb0:	4684      	mov	ip, r0
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2eb2:	b2c8      	uxtb	r0, r1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2eb4:	d5f1      	bpl.n	2e9a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc6>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2eb6:	681b      	ldr	r3, [r3, #0]
    2eb8:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2ebc:	2b08      	cmp	r3, #8
    2ebe:	d01b      	beq.n	2ef8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x124>
      CAN_message_t msg_copy = msg;
    2ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2ec2:	466e      	mov	r6, sp
    2ec4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2ec6:	e895 0003 	ldmia.w	r5, {r0, r1}
    2eca:	e886 0003 	stmia.w	r6, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    2ece:	46ee      	mov	lr, sp
      msg_copy.mb = first_tx_mb;
    2ed0:	f88d c014 	strb.w	ip, [sp, #20]
  memmove(buf, &msg, sizeof(msg));
    2ed4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2ed8:	af06      	add	r7, sp, #24
    2eda:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    2edc:	e896 0003 	ldmia.w	r6, {r0, r1}
    2ee0:	2218      	movs	r2, #24
    2ee2:	e887 0003 	stmia.w	r7, {r0, r1}
    2ee6:	e7be      	b.n	2e66 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x92>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2ee8:	4b0b      	ldr	r3, [pc, #44]	; (2f18 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x144>)
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2eea:	681b      	ldr	r3, [r3, #0]
    2eec:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2ef0:	2b08      	cmp	r3, #8
  return -1;
    2ef2:	f04f 3cff 	mov.w	ip, #4294967295
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2ef6:	d1e3      	bne.n	2ec0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xec>
      writeTxMailbox(first_tx_mb, msg);
    2ef8:	4620      	mov	r0, r4
    2efa:	462a      	mov	r2, r5
    2efc:	fa5f f18c 	uxtb.w	r1, ip
    2f00:	f7ff fcd4 	bl	28ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    2f04:	2001      	movs	r0, #1
}
    2f06:	b00d      	add	sp, #52	; 0x34
    2f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2f0a:	6833      	ldr	r3, [r6, #0]
    2f0c:	e7c2      	b.n	2e94 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc0>
    2f0e:	bf00      	nop
    2f10:	400a4000 	.word	0x400a4000
    2f14:	0400a408 	.word	0x0400a408
    2f18:	400a4070 	.word	0x400a4070

00002f1c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>:
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    2f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( msg.seq ) {
    2f1e:	7d8b      	ldrb	r3, [r1, #22]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2f20:	4e4d      	ldr	r6, [pc, #308]	; (3058 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    2f22:	b08d      	sub	sp, #52	; 0x34
    2f24:	460d      	mov	r5, r1
    2f26:	4604      	mov	r4, r0
  if ( msg.seq ) {
    2f28:	2b00      	cmp	r3, #0
    2f2a:	d14b      	bne.n	2fc4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2f2c:	6833      	ldr	r3, [r6, #0]
    2f2e:	f013 5c00 	ands.w	ip, r3, #536870912	; 0x20000000
    2f32:	d025      	beq.n	2f80 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x64>
    2f34:	f7fd fc26 	bl	784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2f38:	6833      	ldr	r3, [r6, #0]
    2f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2f3e:	3301      	adds	r3, #1
    2f40:	4298      	cmp	r0, r3
    2f42:	4684      	mov	ip, r0
    2f44:	d21e      	bcs.n	2f84 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2f46:	4945      	ldr	r1, [pc, #276]	; (305c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2f48:	4843      	ldr	r0, [pc, #268]	; (3058 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    2f4a:	e007      	b.n	2f5c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x40>
    2f4c:	6803      	ldr	r3, [r0, #0]
    2f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2f52:	fa5f fc82 	uxtb.w	ip, r2
    2f56:	3301      	adds	r3, #1
    2f58:	459c      	cmp	ip, r3
    2f5a:	d213      	bcs.n	2f84 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2f5c:	eb0c 0301 	add.w	r3, ip, r1
    2f60:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2f62:	f10c 0201 	add.w	r2, ip, #1
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2f66:	681b      	ldr	r3, [r3, #0]
    2f68:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2f6c:	2b08      	cmp	r3, #8
    2f6e:	d1ed      	bne.n	2f4c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x30>
      writeTxMailbox(i, msg);
    2f70:	4620      	mov	r0, r4
    2f72:	462a      	mov	r2, r5
    2f74:	4661      	mov	r1, ip
    2f76:	f7ff fc59 	bl	282c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    2f7a:	2001      	movs	r0, #1
}
    2f7c:	b00d      	add	sp, #52	; 0x34
    2f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2f80:	6833      	ldr	r3, [r6, #0]
    2f82:	e7e0      	b.n	2f46 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x2a>
  CAN_message_t msg_copy = msg;
    2f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f86:	46ec      	mov	ip, sp
    2f88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2f8c:	e895 0003 	ldmia.w	r5, {r0, r1}
    2f90:	e88c 0003 	stmia.w	ip, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    2f94:	f04f 0eff 	mov.w	lr, #255	; 0xff
    2f98:	f88d e014 	strb.w	lr, [sp, #20]
    2f9c:	466f      	mov	r7, sp
    2f9e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2fa0:	ae06      	add	r6, sp, #24
    2fa2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2fa4:	e89c 0003 	ldmia.w	ip, {r0, r1}
    2fa8:	e886 0003 	stmia.w	r6, {r0, r1}
    2fac:	2218      	movs	r2, #24
    2fae:	f504 50d8 	add.w	r0, r4, #6912	; 0x1b00
    2fb2:	eb0d 0102 	add.w	r1, sp, r2
    2fb6:	301a      	adds	r0, #26
    2fb8:	f7ff fed8 	bl	2d6c <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>
  return -1; /* transmit entry failed, no mailboxes available, queued */
    2fbc:	f04f 30ff 	mov.w	r0, #4294967295
}
    2fc0:	b00d      	add	sp, #52	; 0x34
    2fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2fc4:	6830      	ldr	r0, [r6, #0]
    2fc6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
    2fca:	d042      	beq.n	3052 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x136>
    2fcc:	f7fd fbda 	bl	784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2fd0:	6833      	ldr	r3, [r6, #0]
    2fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2fd6:	3301      	adds	r3, #1
    2fd8:	4283      	cmp	r3, r0
    2fda:	d929      	bls.n	3030 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2fdc:	4e1f      	ldr	r6, [pc, #124]	; (305c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2fde:	4f1e      	ldr	r7, [pc, #120]	; (3058 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    2fe0:	e005      	b.n	2fee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xd2>
    2fe2:	683b      	ldr	r3, [r7, #0]
    2fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2fe8:	3301      	adds	r3, #1
    2fea:	4298      	cmp	r0, r3
    2fec:	d220      	bcs.n	3030 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2fee:	1983      	adds	r3, r0, r6
    2ff0:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2ff2:	1c41      	adds	r1, r0, #1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2ff4:	681a      	ldr	r2, [r3, #0]
    2ff6:	0112      	lsls	r2, r2, #4
    2ff8:	4684      	mov	ip, r0
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2ffa:	b2c8      	uxtb	r0, r1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2ffc:	d5f1      	bpl.n	2fe2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc6>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2ffe:	681b      	ldr	r3, [r3, #0]
    3000:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3004:	2b08      	cmp	r3, #8
    3006:	d01b      	beq.n	3040 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x124>
      CAN_message_t msg_copy = msg;
    3008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    300a:	466e      	mov	r6, sp
    300c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    300e:	e895 0003 	ldmia.w	r5, {r0, r1}
    3012:	e886 0003 	stmia.w	r6, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    3016:	46ee      	mov	lr, sp
      msg_copy.mb = first_tx_mb;
    3018:	f88d c014 	strb.w	ip, [sp, #20]
  memmove(buf, &msg, sizeof(msg));
    301c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3020:	af06      	add	r7, sp, #24
    3022:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3024:	e896 0003 	ldmia.w	r6, {r0, r1}
    3028:	2218      	movs	r2, #24
    302a:	e887 0003 	stmia.w	r7, {r0, r1}
    302e:	e7be      	b.n	2fae <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x92>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3030:	4b0b      	ldr	r3, [pc, #44]	; (3060 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x144>)
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    3032:	681b      	ldr	r3, [r3, #0]
    3034:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3038:	2b08      	cmp	r3, #8
  return -1;
    303a:	f04f 3cff 	mov.w	ip, #4294967295
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    303e:	d1e3      	bne.n	3008 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xec>
      writeTxMailbox(first_tx_mb, msg);
    3040:	4620      	mov	r0, r4
    3042:	462a      	mov	r2, r5
    3044:	fa5f f18c 	uxtb.w	r1, ip
    3048:	f7ff fbf0 	bl	282c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    304c:	2001      	movs	r0, #1
}
    304e:	b00d      	add	sp, #52	; 0x34
    3050:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    3052:	6833      	ldr	r3, [r6, #0]
    3054:	e7c2      	b.n	2fdc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc0>
    3056:	bf00      	nop
    3058:	40024000 	.word	0x40024000
    305c:	04002408 	.word	0x04002408
    3060:	40024070 	.word	0x40024070

00003064 <loop>:

void loop() {
    3064:	b5f0      	push	{r4, r5, r6, r7, lr}
  button.tick();
    3066:	4835      	ldr	r0, [pc, #212]	; (313c <loop+0xd8>)
void loop() {
    3068:	b083      	sub	sp, #12
  button.tick();
    306a:	f001 fd0d 	bl	4a88 <OneButton::tick()>
  Can0.events();
    306e:	4834      	ldr	r0, [pc, #208]	; (3140 <loop+0xdc>)
    3070:	f7ff fc82 	bl	2978 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>
  Can1.events();
    3074:	4833      	ldr	r0, [pc, #204]	; (3144 <loop+0xe0>)
    3076:	f7ff fd8f 	bl	2b98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>

  if      (state == 0) doState0();
    307a:	4b33      	ldr	r3, [pc, #204]	; (3148 <loop+0xe4>)
    307c:	781c      	ldrb	r4, [r3, #0]
    307e:	2c00      	cmp	r4, #0
    3080:	d131      	bne.n	30e6 <loop+0x82>
  GREEN_LED_state = LOW;
    3082:	4b32      	ldr	r3, [pc, #200]	; (314c <loop+0xe8>)
  BLUE_LED_state = LOW;
    3084:	4d32      	ldr	r5, [pc, #200]	; (3150 <loop+0xec>)
  GREEN_LED_state = LOW;
    3086:	701c      	strb	r4, [r3, #0]
  BLUE_LED_state = LOW;
    3088:	702c      	strb	r4, [r5, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    308a:	4a32      	ldr	r2, [pc, #200]	; (3154 <loop+0xf0>)
	operator unsigned long () const { return millis() - ms; }
    308c:	4932      	ldr	r1, [pc, #200]	; (3158 <loop+0xf4>)
    308e:	6813      	ldr	r3, [r2, #0]
    3090:	9300      	str	r3, [sp, #0]
	return ret;
    3092:	9b00      	ldr	r3, [sp, #0]
    3094:	6809      	ldr	r1, [r1, #0]
  else if (state == 1) doState1();
  else if (state == 2) doState2();
  else if (state == 3) doState3();
  
  //Turn the LEDs on if there's no traffic
  if (RXTimer0 > 500) RED_LED_state = HIGH;
    3096:	4e31      	ldr	r6, [pc, #196]	; (315c <loop+0xf8>)
  if (RXTimer1 > 500) YELLOW_LED_state = HIGH;
    3098:	4f31      	ldr	r7, [pc, #196]	; (3160 <loop+0xfc>)
    309a:	1a5b      	subs	r3, r3, r1
  if (RXTimer0 > 500) RED_LED_state = HIGH;
    309c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    30a0:	bf84      	itt	hi
    30a2:	2301      	movhi	r3, #1
    30a4:	7033      	strbhi	r3, [r6, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    30a6:	6813      	ldr	r3, [r2, #0]
    30a8:	4a2e      	ldr	r2, [pc, #184]	; (3164 <loop+0x100>)
    30aa:	9301      	str	r3, [sp, #4]
    30ac:	6812      	ldr	r2, [r2, #0]
	return ret;
    30ae:	9b01      	ldr	r3, [sp, #4]
    30b0:	1a9b      	subs	r3, r3, r2
  if (RXTimer1 > 500) YELLOW_LED_state = HIGH;
    30b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    30b6:	bf88      	it	hi
    30b8:	2301      	movhi	r3, #1
  
  digitalWrite(GREEN_LED,GREEN_LED_state);
    30ba:	4621      	mov	r1, r4
    30bc:	f04f 0006 	mov.w	r0, #6
  if (RXTimer1 > 500) YELLOW_LED_state = HIGH;
    30c0:	bf88      	it	hi
    30c2:	703b      	strbhi	r3, [r7, #0]
  digitalWrite(GREEN_LED,GREEN_LED_state);
    30c4:	f001 ffa0 	bl	5008 <digitalWrite>
  digitalWrite(YELLOW_LED,YELLOW_LED_state);
    30c8:	7839      	ldrb	r1, [r7, #0]
    30ca:	2005      	movs	r0, #5
    30cc:	f001 ff9c 	bl	5008 <digitalWrite>
  digitalWrite(RED_LED,RED_LED_state);
    30d0:	7831      	ldrb	r1, [r6, #0]
    30d2:	200e      	movs	r0, #14
    30d4:	f001 ff98 	bl	5008 <digitalWrite>
  digitalWrite(BLUE_LED,BLUE_LED_state);
    30d8:	7829      	ldrb	r1, [r5, #0]
    30da:	2027      	movs	r0, #39	; 0x27
}
    30dc:	b003      	add	sp, #12
    30de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  digitalWrite(BLUE_LED,BLUE_LED_state);
    30e2:	f001 bf91 	b.w	5008 <digitalWrite>
  else if (state == 1) doState1();
    30e6:	2c01      	cmp	r4, #1
    30e8:	d015      	beq.n	3116 <loop+0xb2>
  else if (state == 2) doState2();
    30ea:	2c02      	cmp	r4, #2
    30ec:	d00c      	beq.n	3108 <loop+0xa4>
  else if (state == 3) doState3();
    30ee:	2c03      	cmp	r4, #3
    30f0:	d003      	beq.n	30fa <loop+0x96>
  digitalWrite(GREEN_LED,GREEN_LED_state);
    30f2:	4b16      	ldr	r3, [pc, #88]	; (314c <loop+0xe8>)
    30f4:	4d16      	ldr	r5, [pc, #88]	; (3150 <loop+0xec>)
    30f6:	781c      	ldrb	r4, [r3, #0]
    30f8:	e7c7      	b.n	308a <loop+0x26>
  GREEN_LED_state = LOW;
    30fa:	4a14      	ldr	r2, [pc, #80]	; (314c <loop+0xe8>)
  BLUE_LED_state = HIGH;
    30fc:	4d14      	ldr	r5, [pc, #80]	; (3150 <loop+0xec>)
  GREEN_LED_state = LOW;
    30fe:	2400      	movs	r4, #0
  BLUE_LED_state = HIGH;
    3100:	2301      	movs	r3, #1
  GREEN_LED_state = LOW;
    3102:	7014      	strb	r4, [r2, #0]
  BLUE_LED_state = HIGH;
    3104:	702b      	strb	r3, [r5, #0]
}
    3106:	e7c0      	b.n	308a <loop+0x26>
  GREEN_LED_state = HIGH;
    3108:	4a10      	ldr	r2, [pc, #64]	; (314c <loop+0xe8>)
  BLUE_LED_state = LOW;
    310a:	4d11      	ldr	r5, [pc, #68]	; (3150 <loop+0xec>)
  GREEN_LED_state = HIGH;
    310c:	2401      	movs	r4, #1
  BLUE_LED_state = LOW;
    310e:	2300      	movs	r3, #0
  GREEN_LED_state = HIGH;
    3110:	7014      	strb	r4, [r2, #0]
  BLUE_LED_state = LOW;
    3112:	702b      	strb	r3, [r5, #0]
}
    3114:	e7b9      	b.n	308a <loop+0x26>
  GREEN_LED_state = HIGH;
    3116:	4b0d      	ldr	r3, [pc, #52]	; (314c <loop+0xe8>)
  memset(&txmsg.buf[0],0,8);
    3118:	4e13      	ldr	r6, [pc, #76]	; (3168 <loop+0x104>)
  GREEN_LED_state = HIGH;
    311a:	701c      	strb	r4, [r3, #0]
  BLUE_LED_state = HIGH;
    311c:	4d0c      	ldr	r5, [pc, #48]	; (3150 <loop+0xec>)
  Can0.write(txmsg);
    311e:	4808      	ldr	r0, [pc, #32]	; (3140 <loop+0xdc>)
  BLUE_LED_state = HIGH;
    3120:	702c      	strb	r4, [r5, #0]
  memset(&txmsg.buf[0],0,8);
    3122:	2300      	movs	r3, #0
  Can0.write(txmsg);
    3124:	4631      	mov	r1, r6
  memset(&txmsg.buf[0],0,8);
    3126:	60f3      	str	r3, [r6, #12]
    3128:	6133      	str	r3, [r6, #16]
  txmsg.id = 0;
    312a:	6033      	str	r3, [r6, #0]
  Can0.write(txmsg);
    312c:	f7ff fef6 	bl	2f1c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>
  Can1.write(txmsg);
    3130:	4631      	mov	r1, r6
    3132:	4804      	ldr	r0, [pc, #16]	; (3144 <loop+0xe0>)
    3134:	f7ff fe4e 	bl	2dd4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>
}
    3138:	e7a7      	b.n	308a <loop+0x26>
    313a:	bf00      	nop
    313c:	1fff6170 	.word	0x1fff6170
    3140:	1fff0f08 	.word	0x1fff0f08
    3144:	1fff3824 	.word	0x1fff3824
    3148:	1fff074c 	.word	0x1fff074c
    314c:	1fff6144 	.word	0x1fff6144
    3150:	1fff0f04 	.word	0x1fff0f04
    3154:	1fff628c 	.word	0x1fff628c
    3158:	1fff6158 	.word	0x1fff6158
    315c:	1fff614c 	.word	0x1fff614c
    3160:	1fff6164 	.word	0x1fff6164
    3164:	1fff615c 	.word	0x1fff615c
    3168:	1fff0750 	.word	0x1fff0750

0000316c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>:
  if ( mb_num == FIFO ) fifo_filter_table[0][0] |= (1UL << 28); /* enable fifo enhancement */
  else mb_filter_table[mb_num][0] |= (1UL << 28); /* enable mb enhancement */
}

FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    316c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    3170:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
    3174:	00db      	lsls	r3, r3, #3
    3176:	d56b      	bpl.n	3250 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe4>
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    3178:	4b38      	ldr	r3, [pc, #224]	; (325c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xf0>)
FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
    317a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    317e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    3180:	f3c7 6703 	ubfx	r7, r7, #24, #4
    3184:	00ff      	lsls	r7, r7, #3
    3186:	2200      	movs	r2, #0
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    }
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    3188:	f641 6b14 	movw	fp, #7700	; 0x1e14
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    318c:	3708      	adds	r7, #8
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    318e:	f641 6904 	movw	r9, #7684	; 0x1e04
    3192:	f641 6a08 	movw	sl, #7688	; 0x1e08
    3196:	e007      	b.n	31a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x3c>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    3198:	681d      	ldr	r5, [r3, #0]
    319a:	0f6d      	lsrs	r5, r5, #29
    319c:	2d05      	cmp	r5, #5
    319e:	d034      	beq.n	320a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x9e>
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    31a0:	3201      	adds	r2, #1
    31a2:	b2d3      	uxtb	r3, r2
    31a4:	429f      	cmp	r7, r3
    31a6:	d955      	bls.n	3254 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe8>
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    31a8:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
    31ac:	eb00 04ce 	add.w	r4, r0, lr, lsl #3
    31b0:	f504 53f0 	add.w	r3, r4, #7680	; 0x1e00
    31b4:	681d      	ldr	r5, [r3, #0]
    31b6:	0f6d      	lsrs	r5, r5, #29
    31b8:	2d01      	cmp	r5, #1
    31ba:	d00e      	beq.n	31da <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x6e>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    31bc:	681d      	ldr	r5, [r3, #0]
    31be:	0f6d      	lsrs	r5, r5, #29
    31c0:	2d02      	cmp	r5, #2
    31c2:	d1e9      	bne.n	3198 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x2c>
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    31c4:	f854 3009 	ldr.w	r3, [r4, r9]
    31c8:	428b      	cmp	r3, r1
    31ca:	d8e9      	bhi.n	31a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    31cc:	f854 300a 	ldr.w	r3, [r4, sl]
    31d0:	428b      	cmp	r3, r1
    31d2:	d3e5      	bcc.n	31a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    31d4:	2001      	movs	r0, #1
      }
    }
  }
  return 0;
}
    31d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    31da:	681c      	ldr	r4, [r3, #0]
    31dc:	f414 7f60 	tst.w	r4, #896	; 0x380
    31e0:	d0de      	beq.n	31a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    31e2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    31e6:	2400      	movs	r4, #0
    31e8:	e004      	b.n	31f4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x88>
    31ea:	681d      	ldr	r5, [r3, #0]
    31ec:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    31f0:	42ac      	cmp	r4, r5
    31f2:	d2d5      	bcs.n	31a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    31f4:	3401      	adds	r4, #1
    31f6:	eb0e 0504 	add.w	r5, lr, r4
    31fa:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    31fe:	b2e4      	uxtb	r4, r4
    3200:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    3204:	428d      	cmp	r5, r1
    3206:	d1f0      	bne.n	31ea <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x7e>
    3208:	e7e4      	b.n	31d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    320a:	681d      	ldr	r5, [r3, #0]
    320c:	f415 7f60 	tst.w	r5, #896	; 0x380
    3210:	d0c6      	beq.n	31a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    3212:	445c      	add	r4, fp
    3214:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    3218:	f04f 0c01 	mov.w	ip, #1
    321c:	e005      	b.n	322a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xbe>
    321e:	681d      	ldr	r5, [r3, #0]
    3220:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    3224:	3501      	adds	r5, #1
    3226:	45ac      	cmp	ip, r5
    3228:	d2ba      	bcs.n	31a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    322a:	eb0e 050c 	add.w	r5, lr, ip
    322e:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    3232:	6826      	ldr	r6, [r4, #0]
    3234:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    3238:	f8d4 8000 	ldr.w	r8, [r4]
    323c:	400e      	ands	r6, r1
    323e:	ea05 0508 	and.w	r5, r5, r8
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    3242:	f10c 0c01 	add.w	ip, ip, #1
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    3246:	42ae      	cmp	r6, r5
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    3248:	fa5f fc8c 	uxtb.w	ip, ip
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    324c:	d1e7      	bne.n	321e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xb2>
    324e:	e7c1      	b.n	31d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    3250:	2001      	movs	r0, #1
}
    3252:	4770      	bx	lr
  return 0;
    3254:	2000      	movs	r0, #0
}
    3256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    325a:	bf00      	nop
    325c:	40024000 	.word	0x40024000

00003260 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>:

FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    3260:	eb01 0141 	add.w	r1, r1, r1, lsl #1
FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
    3264:	b570      	push	{r4, r5, r6, lr}
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    3266:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    326a:	f505 5e04 	add.w	lr, r5, #8448	; 0x2100
    326e:	f8de 3000 	ldr.w	r3, [lr]
    3272:	00db      	lsls	r3, r3, #3
    3274:	d528      	bpl.n	32c8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    3276:	f8de 3000 	ldr.w	r3, [lr]
    327a:	0f5b      	lsrs	r3, r3, #29
    327c:	2b01      	cmp	r3, #1
    327e:	d00b      	beq.n	3298 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x38>
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
  }
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    3280:	f8de 3000 	ldr.w	r3, [lr]
    3284:	0f5b      	lsrs	r3, r3, #29
    3286:	2b02      	cmp	r3, #2
    3288:	d042      	beq.n	3310 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0xb0>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
  }
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    328a:	f8de 3000 	ldr.w	r3, [lr]
    328e:	0f5b      	lsrs	r3, r3, #29
    3290:	2b05      	cmp	r3, #5
    3292:	d01b      	beq.n	32cc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x6c>
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    }
  }
  return 0;
    3294:	2000      	movs	r0, #0
}
    3296:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
    3298:	f8de 4000 	ldr.w	r4, [lr]
    329c:	f414 7f60 	tst.w	r4, #896	; 0x380
    32a0:	d0f8      	beq.n	3294 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    32a2:	2300      	movs	r3, #0
    32a4:	004d      	lsls	r5, r1, #1
    32a6:	e005      	b.n	32b4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x54>
    32a8:	f8de 1000 	ldr.w	r1, [lr]
    32ac:	f3c1 1cc2 	ubfx	ip, r1, #7, #3
    32b0:	4563      	cmp	r3, ip
    32b2:	d2ef      	bcs.n	3294 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    32b4:	3301      	adds	r3, #1
    32b6:	eb05 0c03 	add.w	ip, r5, r3
    32ba:	f50c 6c04 	add.w	ip, ip, #2112	; 0x840
    32be:	b2db      	uxtb	r3, r3
    32c0:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    32c4:	4294      	cmp	r4, r2
    32c6:	d1ef      	bne.n	32a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x48>
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    32c8:	2001      	movs	r0, #1
}
    32ca:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    32cc:	f8de 4000 	ldr.w	r4, [lr]
    32d0:	f414 7f60 	tst.w	r4, #896	; 0x380
    32d4:	d0de      	beq.n	3294 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    32d6:	f505 5504 	add.w	r5, r5, #8448	; 0x2100
    32da:	3514      	adds	r5, #20
    32dc:	0049      	lsls	r1, r1, #1
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    32de:	2301      	movs	r3, #1
    32e0:	e007      	b.n	32f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x92>
    32e2:	f8de 4000 	ldr.w	r4, [lr]
    32e6:	f3c4 1cc2 	ubfx	ip, r4, #7, #3
    32ea:	f10c 0c01 	add.w	ip, ip, #1
    32ee:	4563      	cmp	r3, ip
    32f0:	d2d0      	bcs.n	3294 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    32f2:	682c      	ldr	r4, [r5, #0]
    32f4:	ea04 0c02 	and.w	ip, r4, r2
    32f8:	18cc      	adds	r4, r1, r3
    32fa:	f504 6404 	add.w	r4, r4, #2112	; 0x840
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    32fe:	3301      	adds	r3, #1
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    3300:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    3304:	682e      	ldr	r6, [r5, #0]
    3306:	4034      	ands	r4, r6
    3308:	45a4      	cmp	ip, r4
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    330a:	b2db      	uxtb	r3, r3
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    330c:	d1e9      	bne.n	32e2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x82>
    330e:	e7db      	b.n	32c8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
    3310:	f242 1304 	movw	r3, #8452	; 0x2104
    3314:	58eb      	ldr	r3, [r5, r3]
    3316:	4293      	cmp	r3, r2
    3318:	d8bc      	bhi.n	3294 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    331a:	f242 1308 	movw	r3, #8456	; 0x2108
    331e:	58e8      	ldr	r0, [r5, r3]
    3320:	4290      	cmp	r0, r2
    3322:	bf34      	ite	cc
    3324:	2000      	movcc	r0, #0
    3326:	2001      	movcs	r0, #1
}
    3328:	bd70      	pop	{r4, r5, r6, pc}
    332a:	bf00      	nop

0000332c <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)>:
  if ( _available < _size ) _available++;
    332c:	8883      	ldrh	r3, [r0, #4]
    332e:	b29b      	uxth	r3, r3
    3330:	2b0f      	cmp	r3, #15
    3332:	d803      	bhi.n	333c <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)+0x10>
    3334:	8883      	ldrh	r3, [r0, #4]
    3336:	3301      	adds	r3, #1
    3338:	b29b      	uxth	r3, r3
    333a:	8083      	strh	r3, [r0, #4]
  _cbuf[((tail)&(_size-1))] = value;
    333c:	8842      	ldrh	r2, [r0, #2]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    333e:	f8b0 c002 	ldrh.w	ip, [r0, #2]
    3342:	8803      	ldrh	r3, [r0, #0]
  _cbuf[((tail)&(_size-1))] = value;
    3344:	f002 020f 	and.w	r2, r2, #15
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    3348:	b29b      	uxth	r3, r3
  _cbuf[((tail)&(_size-1))] = value;
    334a:	3202      	adds	r2, #2
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    334c:	fa1f fc8c 	uxth.w	ip, ip
    3350:	f083 0310 	eor.w	r3, r3, #16
    3354:	459c      	cmp	ip, r3
  _cbuf[((tail)&(_size-1))] = value;
    3356:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    335a:	d104      	bne.n	3366 <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)+0x3a>
    335c:	8803      	ldrh	r3, [r0, #0]
    335e:	3301      	adds	r3, #1
    3360:	f003 031f 	and.w	r3, r3, #31
    3364:	8003      	strh	r3, [r0, #0]
  tail = ((tail + 1)&(2*_size-1));
    3366:	8843      	ldrh	r3, [r0, #2]
    3368:	3301      	adds	r3, #1
    336a:	f003 031f 	and.w	r3, r3, #31
    336e:	8043      	strh	r3, [r0, #2]
}
    3370:	4770      	bx	lr
    3372:	bf00      	nop

00003374 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)>:
  if ( _available < _size ) _available++;
    3374:	8883      	ldrh	r3, [r0, #4]
    3376:	b29b      	uxth	r3, r3
    3378:	2b0f      	cmp	r3, #15
    337a:	d803      	bhi.n	3384 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)+0x10>
    337c:	8883      	ldrh	r3, [r0, #4]
    337e:	3301      	adds	r3, #1
    3380:	b29b      	uxth	r3, r3
    3382:	8083      	strh	r3, [r0, #4]
  _cbuf[((tail)&(_size-1))] = value;
    3384:	8842      	ldrh	r2, [r0, #2]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    3386:	f8b0 c002 	ldrh.w	ip, [r0, #2]
    338a:	8803      	ldrh	r3, [r0, #0]
  _cbuf[((tail)&(_size-1))] = value;
    338c:	f002 020f 	and.w	r2, r2, #15
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    3390:	b29b      	uxth	r3, r3
  _cbuf[((tail)&(_size-1))] = value;
    3392:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    3396:	fa1f fc8c 	uxth.w	ip, ip
    339a:	f083 0310 	eor.w	r3, r3, #16
    339e:	459c      	cmp	ip, r3
  _cbuf[((tail)&(_size-1))] = value;
    33a0:	80d1      	strh	r1, [r2, #6]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    33a2:	d104      	bne.n	33ae <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)+0x3a>
    33a4:	8803      	ldrh	r3, [r0, #0]
    33a6:	3301      	adds	r3, #1
    33a8:	f003 031f 	and.w	r3, r3, #31
    33ac:	8003      	strh	r3, [r0, #0]
  tail = ((tail + 1)&(2*_size-1));
    33ae:	8843      	ldrh	r3, [r0, #2]
    33b0:	3301      	adds	r3, #1
    33b2:	f003 031f 	and.w	r3, r3, #31
    33b6:	8043      	strh	r3, [r0, #2]
}
    33b8:	4770      	bx	lr
    33ba:	bf00      	nop

000033bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>:
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    33bc:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    33c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
    33c4:	00db      	lsls	r3, r3, #3
    33c6:	d56b      	bpl.n	34a0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe4>
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    33c8:	4b38      	ldr	r3, [pc, #224]	; (34ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xf0>)
FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
    33ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    33ce:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    33d0:	f3c7 6703 	ubfx	r7, r7, #24, #4
    33d4:	00ff      	lsls	r7, r7, #3
    33d6:	2200      	movs	r2, #0
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    33d8:	f641 6b14 	movw	fp, #7700	; 0x1e14
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    33dc:	3708      	adds	r7, #8
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    33de:	f641 6904 	movw	r9, #7684	; 0x1e04
    33e2:	f641 6a08 	movw	sl, #7688	; 0x1e08
    33e6:	e007      	b.n	33f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x3c>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    33e8:	681d      	ldr	r5, [r3, #0]
    33ea:	0f6d      	lsrs	r5, r5, #29
    33ec:	2d05      	cmp	r5, #5
    33ee:	d034      	beq.n	345a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x9e>
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    33f0:	3201      	adds	r2, #1
    33f2:	b2d3      	uxtb	r3, r2
    33f4:	429f      	cmp	r7, r3
    33f6:	d955      	bls.n	34a4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe8>
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    33f8:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
    33fc:	eb00 04ce 	add.w	r4, r0, lr, lsl #3
    3400:	f504 53f0 	add.w	r3, r4, #7680	; 0x1e00
    3404:	681d      	ldr	r5, [r3, #0]
    3406:	0f6d      	lsrs	r5, r5, #29
    3408:	2d01      	cmp	r5, #1
    340a:	d00e      	beq.n	342a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x6e>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    340c:	681d      	ldr	r5, [r3, #0]
    340e:	0f6d      	lsrs	r5, r5, #29
    3410:	2d02      	cmp	r5, #2
    3412:	d1e9      	bne.n	33e8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x2c>
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    3414:	f854 3009 	ldr.w	r3, [r4, r9]
    3418:	428b      	cmp	r3, r1
    341a:	d8e9      	bhi.n	33f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    341c:	f854 300a 	ldr.w	r3, [r4, sl]
    3420:	428b      	cmp	r3, r1
    3422:	d3e5      	bcc.n	33f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    3424:	2001      	movs	r0, #1
}
    3426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    342a:	681c      	ldr	r4, [r3, #0]
    342c:	f414 7f60 	tst.w	r4, #896	; 0x380
    3430:	d0de      	beq.n	33f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    3432:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    3436:	2400      	movs	r4, #0
    3438:	e004      	b.n	3444 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x88>
    343a:	681d      	ldr	r5, [r3, #0]
    343c:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    3440:	42ac      	cmp	r4, r5
    3442:	d2d5      	bcs.n	33f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    3444:	3401      	adds	r4, #1
    3446:	eb0e 0504 	add.w	r5, lr, r4
    344a:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    344e:	b2e4      	uxtb	r4, r4
    3450:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    3454:	428d      	cmp	r5, r1
    3456:	d1f0      	bne.n	343a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x7e>
    3458:	e7e4      	b.n	3424 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    345a:	681d      	ldr	r5, [r3, #0]
    345c:	f415 7f60 	tst.w	r5, #896	; 0x380
    3460:	d0c6      	beq.n	33f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    3462:	445c      	add	r4, fp
    3464:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    3468:	f04f 0c01 	mov.w	ip, #1
    346c:	e005      	b.n	347a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xbe>
    346e:	681d      	ldr	r5, [r3, #0]
    3470:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    3474:	3501      	adds	r5, #1
    3476:	45ac      	cmp	ip, r5
    3478:	d2ba      	bcs.n	33f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    347a:	eb0e 050c 	add.w	r5, lr, ip
    347e:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    3482:	6826      	ldr	r6, [r4, #0]
    3484:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    3488:	f8d4 8000 	ldr.w	r8, [r4]
    348c:	400e      	ands	r6, r1
    348e:	ea05 0508 	and.w	r5, r5, r8
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    3492:	f10c 0c01 	add.w	ip, ip, #1
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    3496:	42ae      	cmp	r6, r5
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    3498:	fa5f fc8c 	uxtb.w	ip, ip
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    349c:	d1e7      	bne.n	346e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xb2>
    349e:	e7c1      	b.n	3424 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    34a0:	2001      	movs	r0, #1
}
    34a2:	4770      	bx	lr
  return 0;
    34a4:	2000      	movs	r0, #0
}
    34a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34aa:	bf00      	nop
    34ac:	400a4000 	.word	0x400a4000

000034b0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>:
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    34b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
    34b4:	b570      	push	{r4, r5, r6, lr}
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    34b6:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    34ba:	f505 5e04 	add.w	lr, r5, #8448	; 0x2100
    34be:	f8de 3000 	ldr.w	r3, [lr]
    34c2:	00db      	lsls	r3, r3, #3
    34c4:	d528      	bpl.n	3518 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    34c6:	f8de 3000 	ldr.w	r3, [lr]
    34ca:	0f5b      	lsrs	r3, r3, #29
    34cc:	2b01      	cmp	r3, #1
    34ce:	d00b      	beq.n	34e8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x38>
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    34d0:	f8de 3000 	ldr.w	r3, [lr]
    34d4:	0f5b      	lsrs	r3, r3, #29
    34d6:	2b02      	cmp	r3, #2
    34d8:	d042      	beq.n	3560 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0xb0>
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    34da:	f8de 3000 	ldr.w	r3, [lr]
    34de:	0f5b      	lsrs	r3, r3, #29
    34e0:	2b05      	cmp	r3, #5
    34e2:	d01b      	beq.n	351c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x6c>
  return 0;
    34e4:	2000      	movs	r0, #0
}
    34e6:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
    34e8:	f8de 4000 	ldr.w	r4, [lr]
    34ec:	f414 7f60 	tst.w	r4, #896	; 0x380
    34f0:	d0f8      	beq.n	34e4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    34f2:	2300      	movs	r3, #0
    34f4:	004d      	lsls	r5, r1, #1
    34f6:	e005      	b.n	3504 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x54>
    34f8:	f8de 1000 	ldr.w	r1, [lr]
    34fc:	f3c1 1cc2 	ubfx	ip, r1, #7, #3
    3500:	4563      	cmp	r3, ip
    3502:	d2ef      	bcs.n	34e4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    3504:	3301      	adds	r3, #1
    3506:	eb05 0c03 	add.w	ip, r5, r3
    350a:	f50c 6c04 	add.w	ip, ip, #2112	; 0x840
    350e:	b2db      	uxtb	r3, r3
    3510:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    3514:	4294      	cmp	r4, r2
    3516:	d1ef      	bne.n	34f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x48>
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    3518:	2001      	movs	r0, #1
}
    351a:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    351c:	f8de 4000 	ldr.w	r4, [lr]
    3520:	f414 7f60 	tst.w	r4, #896	; 0x380
    3524:	d0de      	beq.n	34e4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    3526:	f505 5504 	add.w	r5, r5, #8448	; 0x2100
    352a:	3514      	adds	r5, #20
    352c:	0049      	lsls	r1, r1, #1
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    352e:	2301      	movs	r3, #1
    3530:	e007      	b.n	3542 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x92>
    3532:	f8de 4000 	ldr.w	r4, [lr]
    3536:	f3c4 1cc2 	ubfx	ip, r4, #7, #3
    353a:	f10c 0c01 	add.w	ip, ip, #1
    353e:	4563      	cmp	r3, ip
    3540:	d2d0      	bcs.n	34e4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    3542:	682c      	ldr	r4, [r5, #0]
    3544:	ea04 0c02 	and.w	ip, r4, r2
    3548:	18cc      	adds	r4, r1, r3
    354a:	f504 6404 	add.w	r4, r4, #2112	; 0x840
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    354e:	3301      	adds	r3, #1
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    3550:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    3554:	682e      	ldr	r6, [r5, #0]
    3556:	4034      	ands	r4, r6
    3558:	45a4      	cmp	ip, r4
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    355a:	b2db      	uxtb	r3, r3
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    355c:	d1e9      	bne.n	3532 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x82>
    355e:	e7db      	b.n	3518 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
    3560:	f242 1304 	movw	r3, #8452	; 0x2104
    3564:	58eb      	ldr	r3, [r5, r3]
    3566:	4293      	cmp	r3, r2
    3568:	d8bc      	bhi.n	34e4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    356a:	f242 1308 	movw	r3, #8456	; 0x2108
    356e:	58e8      	ldr	r0, [r5, r3]
    3570:	4290      	cmp	r0, r2
    3572:	bf34      	ite	cc
    3574:	2000      	movcc	r0, #0
    3576:	2001      	movcs	r0, #1
}
    3578:	bd70      	pop	{r4, r5, r6, pc}
    357a:	bf00      	nop

0000357c <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>:
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    357c:	8843      	ldrh	r3, [r0, #2]
    357e:	f04f 0c1a 	mov.w	ip, #26
    3582:	b2db      	uxtb	r3, r3
    3584:	fb0c 0303 	mla	r3, ip, r3, r0
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
    3588:	b510      	push	{r4, lr}
    358a:	4604      	mov	r4, r0
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    358c:	2000      	movs	r0, #0
    358e:	f883 0106 	strb.w	r0, [r3, #262]	; 0x106
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    3592:	8863      	ldrh	r3, [r4, #2]
    3594:	b2db      	uxtb	r3, r3
    3596:	fb0c 4303 	mla	r3, ip, r3, r4
    359a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    359e:	8860      	ldrh	r0, [r4, #2]
    35a0:	b2c0      	uxtb	r0, r0
    35a2:	fb0c 4000 	mla	r0, ip, r0, r4
    35a6:	f500 7084 	add.w	r0, r0, #264	; 0x108
    35aa:	f004 f84b 	bl	7644 <memmove>
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    35ae:	8862      	ldrh	r2, [r4, #2]
    35b0:	8823      	ldrh	r3, [r4, #0]
    35b2:	b29b      	uxth	r3, r3
    35b4:	b292      	uxth	r2, r2
    35b6:	f483 7380 	eor.w	r3, r3, #256	; 0x100
    35ba:	429a      	cmp	r2, r3
    35bc:	d104      	bne.n	35c8 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x4c>
    35be:	8823      	ldrh	r3, [r4, #0]
    35c0:	3301      	adds	r3, #1
    35c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    35c6:	8023      	strh	r3, [r4, #0]
    tail = ((tail + 1)&(2*_size-1));
    35c8:	8863      	ldrh	r3, [r4, #2]
    35ca:	3301      	adds	r3, #1
    35cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    35d0:	8063      	strh	r3, [r4, #2]
    if ( _available < _size ) _available++;
    35d2:	88a3      	ldrh	r3, [r4, #4]
    35d4:	b29b      	uxth	r3, r3
    35d6:	2bff      	cmp	r3, #255	; 0xff
    35d8:	d803      	bhi.n	35e2 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x66>
    35da:	88a3      	ldrh	r3, [r4, #4]
    35dc:	3301      	adds	r3, #1
    35de:	b29b      	uxth	r3, r3
    35e0:	80a3      	strh	r3, [r4, #4]
}
    35e2:	bd10      	pop	{r4, pc}

000035e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    35e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t cl = msg;
    35e8:	468c      	mov	ip, r1
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    35ea:	460f      	mov	r7, r1
    35ec:	4606      	mov	r6, r0
    35ee:	4605      	mov	r5, r0
    35f0:	f100 0810 	add.w	r8, r0, #16
  CAN_message_t cl = msg;
    35f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    35f8:	b08d      	sub	sp, #52	; 0x34
  CAN_message_t cl = msg;
    35fa:	466c      	mov	r4, sp
    35fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    35fe:	e89c 0003 	ldmia.w	ip, {r0, r1}
    3602:	e884 0003 	stmia.w	r4, {r0, r1}
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    3606:	f8df a094 	ldr.w	sl, [pc, #148]	; 369c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xb8>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    360a:	f04f 0901 	mov.w	r9, #1
    thisListener = listener[listenerPos];
    360e:	f855 4f04 	ldr.w	r4, [r5, #4]!
    if (thisListener != nullptr) {
    3612:	b15c      	cbz	r4, 362c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    3614:	f99d 2014 	ldrsb.w	r2, [sp, #20]
    3618:	68a3      	ldr	r3, [r4, #8]
    361a:	fa09 f102 	lsl.w	r1, r9, r2
    361e:	4219      	tst	r1, r3
    3620:	d020      	beq.n	3664 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x80>
    3622:	6823      	ldr	r3, [r4, #0]
    3624:	f8d3 b000 	ldr.w	fp, [r3]
    3628:	45d3      	cmp	fp, sl
    362a:	d116      	bne.n	365a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x76>
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    362c:	4545      	cmp	r5, r8
    362e:	d1ee      	bne.n	360e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x2a>
  if ( !isEventsUsed ) {
    3630:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
    3634:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
    3638:	b323      	cbz	r3, 3684 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xa0>
  memmove(buf, &msg, sizeof(msg));
    363a:	2218      	movs	r2, #24
    363c:	4639      	mov	r1, r7
    363e:	eb0d 0002 	add.w	r0, sp, r2
    3642:	f001 facf 	bl	4be4 <memcpy>
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    3646:	2218      	movs	r2, #24
    3648:	eb0d 0102 	add.w	r1, sp, r2
    364c:	f106 0014 	add.w	r0, r6, #20
    3650:	f7ff ff94 	bl	357c <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
}
    3654:	b00d      	add	sp, #52	; 0x34
    3656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    365a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    365e:	4669      	mov	r1, sp
    3660:	4620      	mov	r0, r4
    3662:	47d8      	blx	fp
      if (thisListener->generalCallbackActive) thisListener->frameHandler (cl, -1, cl.bus);
    3664:	7c23      	ldrb	r3, [r4, #16]
    3666:	2b00      	cmp	r3, #0
    3668:	d0e0      	beq.n	362c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    366a:	6823      	ldr	r3, [r4, #0]
    366c:	f8d3 b000 	ldr.w	fp, [r3]
    3670:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3674:	45d3      	cmp	fp, sl
    3676:	d0d9      	beq.n	362c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    3678:	4620      	mov	r0, r4
    367a:	f04f 32ff 	mov.w	r2, #4294967295
    367e:	4669      	mov	r1, sp
    3680:	47d8      	blx	fp
    3682:	e7d3      	b.n	362c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    3684:	7d3b      	ldrb	r3, [r7, #20]
    3686:	f88d 3018 	strb.w	r3, [sp, #24]
    368a:	463a      	mov	r2, r7
    368c:	a906      	add	r1, sp, #24
    368e:	4630      	mov	r0, r6
    3690:	f7ff f94c 	bl	292c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
}
    3694:	b00d      	add	sp, #52	; 0x34
    3696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    369a:	bf00      	nop
    369c:	00000459 	.word	0x00000459

000036a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>:
  mb_filter_table[mb_num][4] = id4; // id4
  mb_filter_table[mb_num][5] = id5; // id5
}

FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
  if ( !distribution ) return; /* distribution not enabled */
    36a0:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
    36a4:	f893 3701 	ldrb.w	r3, [r3, #1793]	; 0x701
    36a8:	2b00      	cmp	r3, #0
    36aa:	f000 80db 	beq.w	3864 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c4>
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    36ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t frame = msg;
    36b2:	460f      	mov	r7, r1
    36b4:	4605      	mov	r5, r0
    36b6:	460e      	mov	r6, r1
    36b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    36ba:	b089      	sub	sp, #36	; 0x24
  CAN_message_t frame = msg;
    36bc:	ac02      	add	r4, sp, #8
    36be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    36c0:	e897 0003 	ldmia.w	r7, {r0, r1}
    36c4:	e884 0003 	stmia.w	r4, {r0, r1}

  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    36c8:	f8df c250 	ldr.w	ip, [pc, #592]	; 391c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
    36cc:	f8dc 3000 	ldr.w	r3, [ip]
    36d0:	009b      	lsls	r3, r3, #2
    36d2:	d552      	bpl.n	377a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    36d4:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
    36d8:	f3c3 6a03 	ubfx	sl, r3, #24, #4
    36dc:	2400      	movs	r4, #0
    36de:	ea4f 0aca 	mov.w	sl, sl, lsl #3
    36e2:	f10a 0a08 	add.w	sl, sl, #8
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    36e6:	4622      	mov	r2, r4
        }
      }
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
            frame.mb = FIFO;
    36e8:	f04f 0963 	mov.w	r9, #99	; 0x63
    36ec:	e00c      	b.n	3708 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x68>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    36ee:	0f5b      	lsrs	r3, r3, #29
    36f0:	2b02      	cmp	r3, #2
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    36f2:	683b      	ldr	r3, [r7, #0]
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    36f4:	f000 809a 	beq.w	382c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x18c>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    36f8:	0f5b      	lsrs	r3, r3, #29
    36fa:	2b05      	cmp	r3, #5
    36fc:	f000 80dd 	beq.w	38ba <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x21a>
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    3700:	3401      	adds	r4, #1
    3702:	b2e2      	uxtb	r2, r4
    3704:	4592      	cmp	sl, r2
    3706:	d938      	bls.n	377a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( msg.mb == FIFO ) break; // don't distribute to fifo if fifo was the source
    3708:	f996 3014 	ldrsb.w	r3, [r6, #20]
    370c:	2b63      	cmp	r3, #99	; 0x63
    370e:	d034      	beq.n	377a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( !(fifo_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    3710:	eb04 0844 	add.w	r8, r4, r4, lsl #1
    3714:	eb05 0bc8 	add.w	fp, r5, r8, lsl #3
    3718:	f50b 57f0 	add.w	r7, fp, #7680	; 0x1e00
    371c:	683b      	ldr	r3, [r7, #0]
    371e:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    3722:	d0ed      	beq.n	3700 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    3724:	683b      	ldr	r3, [r7, #0]
    3726:	0f5b      	lsrs	r3, r3, #29
    3728:	2b01      	cmp	r3, #1
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    372a:	683b      	ldr	r3, [r7, #0]
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    372c:	d1df      	bne.n	36ee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x4e>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    372e:	79f2      	ldrb	r2, [r6, #7]
    3730:	f3c3 4300 	ubfx	r3, r3, #16, #1
    3734:	429a      	cmp	r2, r3
    3736:	d1e3      	bne.n	3700 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    3738:	683b      	ldr	r3, [r7, #0]
    373a:	f413 7f60 	tst.w	r3, #896	; 0x380
    373e:	d0df      	beq.n	3700 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    3740:	ea4f 0b48 	mov.w	fp, r8, lsl #1
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    3744:	2300      	movs	r3, #0
    3746:	e006      	b.n	3756 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb6>
    3748:	683a      	ldr	r2, [r7, #0]
    374a:	fa5f f388 	uxtb.w	r3, r8
    374e:	f3c2 12c2 	ubfx	r2, r2, #7, #3
    3752:	4293      	cmp	r3, r2
    3754:	d2d4      	bcs.n	3700 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    3756:	f103 0801 	add.w	r8, r3, #1
    375a:	eb0b 0308 	add.w	r3, fp, r8
    375e:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    3762:	9a02      	ldr	r2, [sp, #8]
    3764:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3768:	429a      	cmp	r2, r3
    376a:	d1ed      	bne.n	3748 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
            struct2queueRx(frame);
    376c:	a902      	add	r1, sp, #8
    376e:	4628      	mov	r0, r5
            frame.mb = FIFO;
    3770:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    3774:	f7ff ff36 	bl	35e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    3778:	e7e6      	b.n	3748 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    377a:	4f68      	ldr	r7, [pc, #416]	; (391c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>)
        }
      }
    } /* end of fifo scan */
  } /* end of fifo checking */

  frame.idhit = 0;
    377c:	2300      	movs	r3, #0
    377e:	f88d 300e 	strb.w	r3, [sp, #14]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3782:	683c      	ldr	r4, [r7, #0]
    3784:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
    3788:	d03f      	beq.n	380a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16a>
    378a:	f7fc fffb 	bl	784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>

  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    378e:	683b      	ldr	r3, [r7, #0]
    3790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3794:	3301      	adds	r3, #1
    3796:	4283      	cmp	r3, r0
    3798:	4604      	mov	r4, r0
    379a:	d933      	bls.n	3804 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x164>
    379c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 391c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
          struct2queueRx(frame);
        }
      }
    }
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    37a0:	f242 1704 	movw	r7, #8452	; 0x2104
    37a4:	f242 1808 	movw	r8, #8456	; 0x2108
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    37a8:	f996 3014 	ldrsb.w	r3, [r6, #20]
    37ac:	42a3      	cmp	r3, r4
    37ae:	d020      	beq.n	37f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    37b0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    37b4:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
    37b8:	f502 5a04 	add.w	sl, r2, #8448	; 0x2100
    37bc:	f8da 3000 	ldr.w	r3, [sl]
    37c0:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    37c4:	d015      	beq.n	37f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    37c6:	f8da 3000 	ldr.w	r3, [sl]
    37ca:	79f0      	ldrb	r0, [r6, #7]
    37cc:	f3c3 63c0 	ubfx	r3, r3, #27, #1
    37d0:	4298      	cmp	r0, r3
    37d2:	d10e      	bne.n	37f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    37d4:	f8da 3000 	ldr.w	r3, [sl]
    37d8:	0f5b      	lsrs	r3, r3, #29
    37da:	2b01      	cmp	r3, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    37dc:	f8da 3000 	ldr.w	r3, [sl]
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    37e0:	d041      	beq.n	3866 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c6>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    37e2:	0f5b      	lsrs	r3, r3, #29
    37e4:	2b02      	cmp	r3, #2
    37e6:	d012      	beq.n	380e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16e>
        frame.mb = i;
        struct2queueRx(frame);
      }
    }
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    37e8:	f8da 3000 	ldr.w	r3, [sl]
    37ec:	0f5b      	lsrs	r3, r3, #29
    37ee:	2b05      	cmp	r3, #5
    37f0:	d05b      	beq.n	38aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x20a>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    37f2:	f8d9 3000 	ldr.w	r3, [r9]
    37f6:	3401      	adds	r4, #1
    37f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    37fc:	b2e4      	uxtb	r4, r4
    37fe:	3301      	adds	r3, #1
    3800:	429c      	cmp	r4, r3
    3802:	d3d1      	bcc.n	37a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x108>
        frame.mb = i;
        struct2queueRx(frame);
      }
    }
  } /* end of mb scan */
}
    3804:	b009      	add	sp, #36	; 0x24
    3806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    380a:	683b      	ldr	r3, [r7, #0]
    380c:	e7c6      	b.n	379c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xfc>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    380e:	59d1      	ldr	r1, [r2, r7]
    3810:	9b02      	ldr	r3, [sp, #8]
    3812:	428b      	cmp	r3, r1
    3814:	d3ed      	bcc.n	37f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    3816:	f852 2008 	ldr.w	r2, [r2, r8]
    381a:	4293      	cmp	r3, r2
    381c:	d8e9      	bhi.n	37f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        struct2queueRx(frame);
    381e:	a902      	add	r1, sp, #8
    3820:	4628      	mov	r0, r5
        frame.mb = i;
    3822:	f88d 401c 	strb.w	r4, [sp, #28]
        struct2queueRx(frame);
    3826:	f7ff fedd 	bl	35e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    382a:	e7e2      	b.n	37f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    382c:	79f2      	ldrb	r2, [r6, #7]
    382e:	f3c3 4300 	ubfx	r3, r3, #16, #1
    3832:	429a      	cmp	r2, r3
    3834:	f47f af64 	bne.w	3700 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
    3838:	f641 6304 	movw	r3, #7684	; 0x1e04
    383c:	f85b 2003 	ldr.w	r2, [fp, r3]
    3840:	9b02      	ldr	r3, [sp, #8]
    3842:	4293      	cmp	r3, r2
    3844:	f4ff af5c 	bcc.w	3700 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    3848:	f641 6208 	movw	r2, #7688	; 0x1e08
    384c:	f85b 2002 	ldr.w	r2, [fp, r2]
    3850:	4293      	cmp	r3, r2
    3852:	f63f af55 	bhi.w	3700 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          struct2queueRx(frame);
    3856:	a902      	add	r1, sp, #8
    3858:	4628      	mov	r0, r5
          frame.mb = FIFO;
    385a:	f88d 901c 	strb.w	r9, [sp, #28]
          struct2queueRx(frame);
    385e:	f7ff fec1 	bl	35e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    3862:	e74d      	b.n	3700 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    3864:	4770      	bx	lr
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    3866:	f413 7f60 	tst.w	r3, #896	; 0x380
    386a:	d0c2      	beq.n	37f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    386c:	004a      	lsls	r2, r1, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    386e:	2300      	movs	r3, #0
    3870:	e007      	b.n	3882 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1e2>
    3872:	f8da 1000 	ldr.w	r1, [sl]
    3876:	fa5f f38b 	uxtb.w	r3, fp
    387a:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    387e:	428b      	cmp	r3, r1
    3880:	d2b7      	bcs.n	37f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    3882:	f103 0b01 	add.w	fp, r3, #1
    3886:	eb02 030b 	add.w	r3, r2, fp
    388a:	f503 6304 	add.w	r3, r3, #2112	; 0x840
    388e:	9902      	ldr	r1, [sp, #8]
    3890:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3894:	4299      	cmp	r1, r3
    3896:	d1ec      	bne.n	3872 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
          struct2queueRx(frame);
    3898:	a902      	add	r1, sp, #8
    389a:	4628      	mov	r0, r5
    389c:	9200      	str	r2, [sp, #0]
          frame.mb = i;
    389e:	f88d 401c 	strb.w	r4, [sp, #28]
          struct2queueRx(frame);
    38a2:	f7ff fe9f 	bl	35e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    38a6:	9a00      	ldr	r2, [sp, #0]
    38a8:	e7e3      	b.n	3872 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
      if ( filter_match((FLEXCAN_MAILBOX)i, frame.id) ) {
    38aa:	9a02      	ldr	r2, [sp, #8]
    38ac:	4621      	mov	r1, r4
    38ae:	4628      	mov	r0, r5
    38b0:	f7ff fcd6 	bl	3260 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    38b4:	2800      	cmp	r0, #0
    38b6:	d09c      	beq.n	37f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    38b8:	e7b1      	b.n	381e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17e>
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    38ba:	683b      	ldr	r3, [r7, #0]
    38bc:	f413 7f60 	tst.w	r3, #896	; 0x380
    38c0:	f43f af1e 	beq.w	3700 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    38c4:	f50b 53f0 	add.w	r3, fp, #7680	; 0x1e00
    38c8:	3314      	adds	r3, #20
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    38ca:	2701      	movs	r7, #1
    38cc:	e00a      	b.n	38e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x244>
    38ce:	f50b 51f0 	add.w	r1, fp, #7680	; 0x1e00
    38d2:	3701      	adds	r7, #1
    38d4:	6809      	ldr	r1, [r1, #0]
    38d6:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    38da:	b2ff      	uxtb	r7, r7
    38dc:	3101      	adds	r1, #1
    38de:	428f      	cmp	r7, r1
    38e0:	f4bf af0e 	bcs.w	3700 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    38e4:	eb07 0148 	add.w	r1, r7, r8, lsl #1
    38e8:	f501 61f0 	add.w	r1, r1, #1920	; 0x780
    38ec:	6818      	ldr	r0, [r3, #0]
    38ee:	f855 e021 	ldr.w	lr, [r5, r1, lsl #2]
    38f2:	9902      	ldr	r1, [sp, #8]
    38f4:	f8d3 c000 	ldr.w	ip, [r3]
    38f8:	4008      	ands	r0, r1
    38fa:	ea0e 010c 	and.w	r1, lr, ip
    38fe:	4288      	cmp	r0, r1
    3900:	d1e5      	bne.n	38ce <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
            struct2queueRx(frame);
    3902:	a902      	add	r1, sp, #8
    3904:	4628      	mov	r0, r5
    3906:	9301      	str	r3, [sp, #4]
            frame.idhit = i;
    3908:	f88d 200e 	strb.w	r2, [sp, #14]
    390c:	9200      	str	r2, [sp, #0]
            frame.mb = FIFO;
    390e:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    3912:	f7ff fe67 	bl	35e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    3916:	e9dd 2300 	ldrd	r2, r3, [sp]
    391a:	e7d8      	b.n	38ce <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
    391c:	40024000 	.word	0x40024000

00003920 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()>:
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    3920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t msg; // setup a temporary storage buffer
    3924:	4db9      	ldr	r5, [pc, #740]	; (3c0c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2ec>)
  return FLEXCANb_IMASK1(_bus);
    3926:	4fba      	ldr	r7, [pc, #744]	; (3c10 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    3928:	4681      	mov	r9, r0
  CAN_message_t msg; // setup a temporary storage buffer
    392a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    392c:	b097      	sub	sp, #92	; 0x5c
  CAN_message_t msg; // setup a temporary storage buffer
    392e:	ac04      	add	r4, sp, #16
    3930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3932:	e895 0003 	ldmia.w	r5, {r0, r1}
    3936:	e884 0003 	stmia.w	r4, {r0, r1}
  return FLEXCANb_IMASK1(_bus);
    393a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  return FLEXCANb_IFLAG1(_bus);
    393c:	6b38      	ldr	r0, [r7, #48]	; 0x30
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    393e:	683b      	ldr	r3, [r7, #0]
  return FLEXCANb_IFLAG1(_bus);
    3940:	9001      	str	r0, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    3942:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
  return FLEXCANb_IMASK1(_bus);
    3946:	f04f 0600 	mov.w	r6, #0
    394a:	468b      	mov	fp, r1
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    394c:	d103      	bne.n	3956 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    394e:	683a      	ldr	r2, [r7, #0]
    3950:	0094      	lsls	r4, r2, #2
    3952:	f100 80eb 	bmi.w	3b2c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x20c>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3956:	4dae      	ldr	r5, [pc, #696]	; (3c10 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    3958:	9b01      	ldr	r3, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    395a:	682c      	ldr	r4, [r5, #0]
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    395c:	f043 0301 	orr.w	r3, r3, #1
    3960:	fab3 f383 	clz	r3, r3
    3964:	f1c3 0320 	rsb	r3, r3, #32
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3968:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    396c:	fa5f fa83 	uxtb.w	sl, r3
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3970:	f000 824f 	beq.w	3e12 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f2>
    3974:	f7fc ff06 	bl	784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    3978:	682b      	ldr	r3, [r5, #0]
    397a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    397e:	3301      	adds	r3, #1
    3980:	4283      	cmp	r3, r0
    3982:	4604      	mov	r4, r0
    3984:	f240 809e 	bls.w	3ac4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    3988:	4582      	cmp	sl, r0
    398a:	f240 809b 	bls.w	3ac4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    398e:	1c67      	adds	r7, r4, #1
      (void)FLEXCANb_TIMER(_bus);
    3990:	f8df 827c 	ldr.w	r8, [pc, #636]	; 3c10 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>
    3994:	b2fd      	uxtb	r5, r7
    3996:	e016      	b.n	39c6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xa6>
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    3998:	2906      	cmp	r1, #6
    399a:	f000 80ad 	beq.w	3af8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1d8>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_EMPTY ) {
    399e:	2904      	cmp	r1, #4
    39a0:	f000 813e 	beq.w	3c20 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x300>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    39a4:	2908      	cmp	r1, #8
    39a6:	f000 81d7 	beq.w	3d58 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x438>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    39aa:	f8d8 3000 	ldr.w	r3, [r8]
    39ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    39b2:	3301      	adds	r3, #1
    39b4:	42ab      	cmp	r3, r5
    39b6:	b2fc      	uxtb	r4, r7
    39b8:	f240 8084 	bls.w	3ac4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    39bc:	45a2      	cmp	sl, r4
    39be:	f105 0501 	add.w	r5, r5, #1
    39c2:	d97f      	bls.n	3ac4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    39c4:	1c67      	adds	r7, r4, #1
    if (!(imask & (1ULL << mb_num))) continue; /* don't read non-interrupt mailboxes */
    39c6:	f1c4 0220 	rsb	r2, r4, #32
    39ca:	f1a4 0320 	sub.w	r3, r4, #32
    39ce:	fa06 f202 	lsl.w	r2, r6, r2
    39d2:	fa2b f104 	lsr.w	r1, fp, r4
    39d6:	fa26 f303 	lsr.w	r3, r6, r3
    39da:	4311      	orrs	r1, r2
    39dc:	4319      	orrs	r1, r3
    39de:	07c9      	lsls	r1, r1, #31
    39e0:	d5e3      	bpl.n	39aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    39e2:	9901      	ldr	r1, [sp, #4]
    39e4:	40e1      	lsrs	r1, r4
    39e6:	4311      	orrs	r1, r2
    39e8:	4319      	orrs	r1, r3
    39ea:	07c9      	lsls	r1, r1, #31
    39ec:	d5dd      	bpl.n	39aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    39ee:	4b89      	ldr	r3, [pc, #548]	; (3c14 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f4>)
    39f0:	18e3      	adds	r3, r4, r3
    39f2:	011b      	lsls	r3, r3, #4
    uint32_t code = mbxAddr[0];
    39f4:	681a      	ldr	r2, [r3, #0]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    39f6:	f3c2 6103 	ubfx	r1, r2, #24, #4
    39fa:	2902      	cmp	r1, #2
    39fc:	d1cc      	bne.n	3998 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x78>
      msg.flags.extended = (bool)(code & (1UL << 21));
    39fe:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3a02:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    3a04:	2900      	cmp	r1, #0
    3a06:	bf14      	ite	ne
    3a08:	f04f 0c01 	movne.w	ip, #1
    3a0c:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3a10:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    3a14:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3a18:	d17f      	bne.n	3b1a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
    3a1a:	0c80      	lsrs	r0, r0, #18
    3a1c:	9004      	str	r0, [sp, #16]
      msg.timestamp = code & 0xFFFF;
    3a1e:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    3a22:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3a26:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    3a2a:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.mb = mb_num;
    3a2e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    3a32:	f892 2915 	ldrb.w	r2, [r2, #2325]	; 0x915
    3a36:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3a3a:	689a      	ldr	r2, [r3, #8]
    3a3c:	f88d 201f 	strb.w	r2, [sp, #31]
    3a40:	689a      	ldr	r2, [r3, #8]
    3a42:	0a12      	lsrs	r2, r2, #8
    3a44:	f88d 201e 	strb.w	r2, [sp, #30]
    3a48:	689a      	ldr	r2, [r3, #8]
    3a4a:	0c12      	lsrs	r2, r2, #16
    3a4c:	f88d 201d 	strb.w	r2, [sp, #29]
    3a50:	689a      	ldr	r2, [r3, #8]
    3a52:	0e12      	lsrs	r2, r2, #24
    3a54:	f88d 201c 	strb.w	r2, [sp, #28]
    3a58:	68da      	ldr	r2, [r3, #12]
    3a5a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    3a5e:	68da      	ldr	r2, [r3, #12]
    3a60:	0a12      	lsrs	r2, r2, #8
    3a62:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    3a66:	68da      	ldr	r2, [r3, #12]
    3a68:	0c12      	lsrs	r2, r2, #16
    3a6a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    3a6e:	68da      	ldr	r2, [r3, #12]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    3a70:	2900      	cmp	r1, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3a72:	ea4f 6212 	mov.w	r2, r2, lsr #24
    3a76:	f88d 2020 	strb.w	r2, [sp, #32]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    3a7a:	bf14      	ite	ne
    3a7c:	f04f 628c 	movne.w	r2, #73400320	; 0x4600000
    3a80:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
    3a84:	601a      	str	r2, [r3, #0]
      (void)FLEXCANb_TIMER(_bus);
    3a86:	f8d8 3008 	ldr.w	r3, [r8, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3a8a:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    3a8e:	2301      	movs	r3, #1
    3a90:	40a3      	lsls	r3, r4
    3a92:	4313      	orrs	r3, r2
    3a94:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    3a98:	9a04      	ldr	r2, [sp, #16]
    3a9a:	4621      	mov	r1, r4
    3a9c:	4648      	mov	r0, r9
    3a9e:	f7ff fbdf 	bl	3260 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    3aa2:	2800      	cmp	r0, #0
    3aa4:	f040 8153 	bne.w	3d4e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x42e>
      frame_distribution(msg);
    3aa8:	a904      	add	r1, sp, #16
    3aaa:	4648      	mov	r0, r9
    3aac:	f7ff fdf8 	bl	36a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    3ab0:	a804      	add	r0, sp, #16
    3ab2:	f3af 8000 	nop.w
      ext_output2(msg);
    3ab6:	a804      	add	r0, sp, #16
    3ab8:	f3af 8000 	nop.w
      ext_output3(msg);
    3abc:	a804      	add	r0, sp, #16
    3abe:	f3af 8000 	nop.w
    }
    3ac2:	e772      	b.n	39aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    3ac4:	4e52      	ldr	r6, [pc, #328]	; (3c10 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    3ac6:	4d54      	ldr	r5, [pc, #336]	; (3c18 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f8>)
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    3ac8:	6a34      	ldr	r4, [r6, #32]
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    3aca:	682b      	ldr	r3, [r5, #0]
    3acc:	ea84 0203 	eor.w	r2, r4, r3
    3ad0:	4b52      	ldr	r3, [pc, #328]	; (3c1c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2fc>)
    3ad2:	4013      	ands	r3, r2
    3ad4:	b13b      	cbz	r3, 3ae6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
        uint16_t size() { return _available; }
    3ad6:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    3ada:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
    3ade:	b29b      	uxth	r3, r3
    if ( busESR1.size() < busESR1.capacity() ) {
    3ae0:	2b0f      	cmp	r3, #15
    3ae2:	f240 8198 	bls.w	3e16 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f6>
  FLEXCANb_ESR1(_bus) |= esr1;
    3ae6:	4a4a      	ldr	r2, [pc, #296]	; (3c10 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    3ae8:	6a13      	ldr	r3, [r2, #32]
    3aea:	4323      	orrs	r3, r4
    3aec:	6213      	str	r3, [r2, #32]
  asm volatile ("dsb");	
    3aee:	f3bf 8f4f 	dsb	sy
}
    3af2:	b017      	add	sp, #92	; 0x5c
    3af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      msg.flags.extended = (bool)(code & (1UL << 21));
    3af8:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3afc:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    3afe:	2900      	cmp	r1, #0
    3b00:	bf14      	ite	ne
    3b02:	f04f 0c01 	movne.w	ip, #1
    3b06:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3b0a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    3b0e:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3b12:	d105      	bne.n	3b20 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x200>
    3b14:	0c80      	lsrs	r0, r0, #18
    3b16:	9004      	str	r0, [sp, #16]
    3b18:	e004      	b.n	3b24 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x204>
    3b1a:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    3b1c:	2101      	movs	r1, #1
    3b1e:	e77e      	b.n	3a1e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3b20:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    3b22:	2101      	movs	r1, #1
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    3b24:	2001      	movs	r0, #1
    3b26:	f88d 0019 	strb.w	r0, [sp, #25]
    3b2a:	e778      	b.n	3a1e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    3b2c:	068a      	lsls	r2, r1, #26
    3b2e:	f57f af12 	bpl.w	3956 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    3b32:	0685      	lsls	r5, r0, #26
    3b34:	f57f af0f 	bpl.w	3956 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
      uint32_t code = mbxAddr[0];
    3b38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
      msg.timestamp = code & 0xFFFF;
    3b3c:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    3b40:	f3c2 4103 	ubfx	r1, r2, #16, #4
    3b44:	f88d 101b 	strb.w	r1, [sp, #27]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3b48:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3b4c:	4c30      	ldr	r4, [pc, #192]	; (3c10 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
      msg.flags.extended = (bool)(code & (1UL << 21));
    3b4e:	f402 1000 	and.w	r0, r2, #2097152	; 0x200000
    3b52:	42b0      	cmp	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3b54:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
      msg.flags.remote = (bool)(code & (1UL << 20));
    3b58:	f3c2 5000 	ubfx	r0, r2, #20, #1
    3b5c:	f88d 0018 	strb.w	r0, [sp, #24]
      msg.idhit = code >> 23;
    3b60:	ea4f 52d2 	mov.w	r2, r2, lsr #23
      msg.flags.extended = (bool)(code & (1UL << 21));
    3b64:	bf12      	itee	ne
    3b66:	2001      	movne	r0, #1
    3b68:	4630      	moveq	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3b6a:	0c89      	lsreq	r1, r1, #18
      msg.flags.extended = (bool)(code & (1UL << 21));
    3b6c:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.idhit = code >> 23;
    3b70:	f88d 2016 	strb.w	r2, [sp, #22]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3b74:	9104      	str	r1, [sp, #16]
    3b76:	a808      	add	r0, sp, #32
      msg.idhit = code >> 23;
    3b78:	2200      	movs	r2, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3b7a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    3b7e:	40d1      	lsrs	r1, r2
    3b80:	3208      	adds	r2, #8
    3b82:	2a20      	cmp	r2, #32
    3b84:	f800 1d01 	strb.w	r1, [r0, #-1]!
    3b88:	d1f7      	bne.n	3b7a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x25a>
    3b8a:	4821      	ldr	r0, [pc, #132]	; (3c10 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    3b8c:	a909      	add	r1, sp, #36	; 0x24
    3b8e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    3b92:	40da      	lsrs	r2, r3
    3b94:	3308      	adds	r3, #8
    3b96:	2b20      	cmp	r3, #32
    3b98:	f801 2d01 	strb.w	r2, [r1, #-1]!
    3b9c:	d1f7      	bne.n	3b8e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x26e>
      msg.bus = busNumber;
    3b9e:	f509 5300 	add.w	r3, r9, #8192	; 0x2000
    3ba2:	f893 3915 	ldrb.w	r3, [r3, #2325]	; 0x915
    3ba6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
    3baa:	2363      	movs	r3, #99	; 0x63
    3bac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      (void)FLEXCANb_TIMER(_bus);
    3bb0:	6883      	ldr	r3, [r0, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3bb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3bb4:	f043 0320 	orr.w	r3, r3, #32
    3bb8:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF6I ) writeIFLAGBit(6); /* clear FIFO bit only! */
    3bba:	9b01      	ldr	r3, [sp, #4]
    3bbc:	065c      	lsls	r4, r3, #25
    3bbe:	d503      	bpl.n	3bc8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2a8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3bc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3bc6:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
    3bc8:	9b01      	ldr	r3, [sp, #4]
    3bca:	0618      	lsls	r0, r3, #24
    3bcc:	d504      	bpl.n	3bd8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2b8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3bce:	4a10      	ldr	r2, [pc, #64]	; (3c10 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    3bd0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3bd6:	6313      	str	r3, [r2, #48]	; 0x30
      frame_distribution(msg);
    3bd8:	a904      	add	r1, sp, #16
    3bda:	4648      	mov	r0, r9
    3bdc:	f7ff fd60 	bl	36a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    3be0:	a804      	add	r0, sp, #16
    3be2:	f3af 8000 	nop.w
      ext_output2(msg);
    3be6:	a804      	add	r0, sp, #16
    3be8:	f3af 8000 	nop.w
      ext_output3(msg);
    3bec:	a804      	add	r0, sp, #16
    3bee:	f3af 8000 	nop.w
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    3bf2:	9904      	ldr	r1, [sp, #16]
    3bf4:	4648      	mov	r0, r9
    3bf6:	f7ff fab9 	bl	316c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>
    3bfa:	2800      	cmp	r0, #0
    3bfc:	f43f aeab 	beq.w	3956 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    3c00:	a904      	add	r1, sp, #16
    3c02:	4648      	mov	r0, r9
    3c04:	f7ff fcee 	bl	35e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    3c08:	e6a5      	b.n	3956 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    3c0a:	bf00      	nop
    3c0c:	0000d4ac 	.word	0x0000d4ac
    3c10:	40024000 	.word	0x40024000
    3c14:	04002408 	.word	0x04002408
    3c18:	1fff0efc 	.word	0x1fff0efc
    3c1c:	0007ffbf 	.word	0x0007ffbf
      msg.flags.extended = (bool)(code & (1UL << 21));
    3c20:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    3c24:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3c26:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    3c28:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    3c2c:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3c30:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    3c34:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    3c38:	bf14      	ite	ne
    3c3a:	2001      	movne	r0, #1
    3c3c:	2000      	moveq	r0, #0
    3c3e:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    3c42:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    3c46:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    3c4a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3c4e:	6898      	ldr	r0, [r3, #8]
    3c50:	f88d 001f 	strb.w	r0, [sp, #31]
    3c54:	6898      	ldr	r0, [r3, #8]
    3c56:	ea4f 2010 	mov.w	r0, r0, lsr #8
    3c5a:	f88d 001e 	strb.w	r0, [sp, #30]
    3c5e:	6898      	ldr	r0, [r3, #8]
    3c60:	ea4f 4010 	mov.w	r0, r0, lsr #16
    3c64:	f88d 001d 	strb.w	r0, [sp, #29]
    3c68:	6898      	ldr	r0, [r3, #8]
    3c6a:	ea4f 6010 	mov.w	r0, r0, lsr #24
    3c6e:	f88d 001c 	strb.w	r0, [sp, #28]
    3c72:	68d8      	ldr	r0, [r3, #12]
    3c74:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    3c78:	68d8      	ldr	r0, [r3, #12]
    3c7a:	ea4f 2010 	mov.w	r0, r0, lsr #8
    3c7e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    3c82:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3c84:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    3c88:	bf08      	it	eq
    3c8a:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3c8c:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3c8e:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3c90:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3c94:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3c98:	68d8      	ldr	r0, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3c9a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3c9e:	0e00      	lsrs	r0, r0, #24
    3ca0:	f88d 0020 	strb.w	r0, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3ca4:	b129      	cbz	r1, 3cb2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x392>
    3ca6:	a804      	add	r0, sp, #16
    3ca8:	9203      	str	r2, [sp, #12]
    3caa:	9302      	str	r3, [sp, #8]
    3cac:	4788      	blx	r1
    3cae:	9a03      	ldr	r2, [sp, #12]
    3cb0:	9b02      	ldr	r3, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    3cb2:	f8d2 2908 	ldr.w	r2, [r2, #2312]	; 0x908
    3cb6:	b11a      	cbz	r2, 3cc0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3a0>
    3cb8:	a804      	add	r0, sp, #16
    3cba:	9302      	str	r3, [sp, #8]
    3cbc:	4790      	blx	r2
    3cbe:	9b02      	ldr	r3, [sp, #8]
    3cc0:	f509 5280 	add.w	r2, r9, #4096	; 0x1000
    3cc4:	9202      	str	r2, [sp, #8]
    3cc6:	f8b2 2b1e 	ldrh.w	r2, [r2, #2846]	; 0xb1e
    3cca:	b292      	uxth	r2, r2
      if ( txBuffer.size() ) {
    3ccc:	2a00      	cmp	r2, #0
    3cce:	f000 80b1 	beq.w	3e34 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x514>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    3cd2:	9b02      	ldr	r3, [sp, #8]
    3cd4:	f8b3 1b1a 	ldrh.w	r1, [r3, #2842]	; 0xb1a
    3cd8:	231a      	movs	r3, #26
    3cda:	f001 010f 	and.w	r1, r1, #15
    3cde:	fb03 9101 	mla	r1, r3, r1, r9
    3ce2:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    3ce6:	3112      	adds	r1, #18
    3ce8:	2218      	movs	r2, #24
    3cea:	a810      	add	r0, sp, #64	; 0x40
    3cec:	f000 ff7a 	bl	4be4 <memcpy>
        memmove(&frame, buf, sizeof(frame));
    3cf0:	ab0a      	add	r3, sp, #40	; 0x28
    3cf2:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    3cf6:	469e      	mov	lr, r3
    3cf8:	9303      	str	r3, [sp, #12]
    3cfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3cfe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3d02:	e89c 0003 	ldmia.w	ip, {r0, r1}
    3d06:	e88e 0003 	stmia.w	lr, {r0, r1}
        if ( frame.mb == -1 ) {
    3d0a:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
    3d0e:	1c5a      	adds	r2, r3, #1
    3d10:	f000 809b 	beq.w	3e4a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x52a>
        else if ( frame.mb == mb_num ) {
    3d14:	429c      	cmp	r4, r3
    3d16:	f47f ae48 	bne.w	39aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(frame.mb, frame);
    3d1a:	9a03      	ldr	r2, [sp, #12]
    3d1c:	b2e1      	uxtb	r1, r4
    3d1e:	4648      	mov	r0, r9
    3d20:	f7fe fd84 	bl	282c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    3d24:	9a02      	ldr	r2, [sp, #8]
    3d26:	f8b2 3b1a 	ldrh.w	r3, [r2, #2842]	; 0xb1a
    3d2a:	3301      	adds	r3, #1
    3d2c:	f003 031f 	and.w	r3, r3, #31
    3d30:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    if ( _available ) _available--;
    3d34:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    3d38:	b29b      	uxth	r3, r3
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	f43f ae35 	beq.w	39aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    3d40:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    3d44:	3b01      	subs	r3, #1
    3d46:	b29b      	uxth	r3, r3
    3d48:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    3d4c:	e62d      	b.n	39aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    3d4e:	a904      	add	r1, sp, #16
    3d50:	4648      	mov	r0, r9
    3d52:	f7ff fc47 	bl	35e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    3d56:	e6a7      	b.n	3aa8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x188>
      msg.flags.extended = (bool)(code & (1UL << 21));
    3d58:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    3d5c:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3d5e:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    3d60:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    3d64:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3d68:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    3d6c:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    3d70:	bf14      	ite	ne
    3d72:	2001      	movne	r0, #1
    3d74:	2000      	moveq	r0, #0
    3d76:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    3d7a:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    3d7e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    3d82:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3d86:	6898      	ldr	r0, [r3, #8]
    3d88:	f88d 001f 	strb.w	r0, [sp, #31]
    3d8c:	6898      	ldr	r0, [r3, #8]
    3d8e:	ea4f 2010 	mov.w	r0, r0, lsr #8
    3d92:	f88d 001e 	strb.w	r0, [sp, #30]
    3d96:	6898      	ldr	r0, [r3, #8]
    3d98:	ea4f 4010 	mov.w	r0, r0, lsr #16
    3d9c:	f88d 001d 	strb.w	r0, [sp, #29]
    3da0:	6898      	ldr	r0, [r3, #8]
    3da2:	ea4f 6010 	mov.w	r0, r0, lsr #24
    3da6:	f88d 001c 	strb.w	r0, [sp, #28]
    3daa:	68d8      	ldr	r0, [r3, #12]
    3dac:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    3db0:	68d8      	ldr	r0, [r3, #12]
    3db2:	ea4f 2010 	mov.w	r0, r0, lsr #8
    3db6:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    3dba:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3dbc:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    3dc0:	bf08      	it	eq
    3dc2:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3dc4:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3dc6:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3dc8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3dcc:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3dd0:	68db      	ldr	r3, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3dd2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3dd6:	0e1b      	lsrs	r3, r3, #24
    3dd8:	f88d 3020 	strb.w	r3, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3ddc:	b119      	cbz	r1, 3de6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4c6>
    3dde:	a804      	add	r0, sp, #16
    3de0:	9202      	str	r2, [sp, #8]
    3de2:	4788      	blx	r1
    3de4:	9a02      	ldr	r2, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    3de6:	f8d2 3908 	ldr.w	r3, [r2, #2312]	; 0x908
    3dea:	b10b      	cbz	r3, 3df0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4d0>
    3dec:	a804      	add	r0, sp, #16
    3dee:	4798      	blx	r3
        uint16_t size() { return _available; }
    3df0:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    3df4:	9302      	str	r3, [sp, #8]
    3df6:	f8b3 3b1e 	ldrh.w	r3, [r3, #2846]	; 0xb1e
    3dfa:	b29b      	uxth	r3, r3
      if ( txBuffer.size() ) {
    3dfc:	2b00      	cmp	r3, #0
    3dfe:	f47f af68 	bne.w	3cd2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3b2>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3e02:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    3e06:	2301      	movs	r3, #1
    3e08:	40a3      	lsls	r3, r4
    3e0a:	4313      	orrs	r3, r2
    3e0c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    3e10:	e5cb      	b.n	39aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    3e12:	682b      	ldr	r3, [r5, #0]
    3e14:	e5bb      	b.n	398e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6e>
      busESR1.write(esr1);
    3e16:	f509 50e6 	add.w	r0, r9, #7360	; 0x1cc0
    3e1a:	4621      	mov	r1, r4
    3e1c:	3010      	adds	r0, #16
    3e1e:	f7ff fa85 	bl	332c <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)>
      busECR.write(FLEXCANb_ECR(_bus));
    3e22:	69f1      	ldr	r1, [r6, #28]
    3e24:	f509 50ec 	add.w	r0, r9, #7552	; 0x1d80
    3e28:	b289      	uxth	r1, r1
    3e2a:	3018      	adds	r0, #24
    3e2c:	f7ff faa2 	bl	3374 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)>
      last_esr1 = esr1;
    3e30:	602c      	str	r4, [r5, #0]
    3e32:	e658      	b.n	3ae6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3e34:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
    3e38:	2201      	movs	r2, #1
    3e3a:	40a2      	lsls	r2, r4
    3e3c:	430a      	orrs	r2, r1
    3e3e:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE); /* set it back to a TX mailbox */
    3e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    3e46:	601a      	str	r2, [r3, #0]
    3e48:	e5af      	b.n	39aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(mb_num, frame);
    3e4a:	9a03      	ldr	r2, [sp, #12]
    3e4c:	4621      	mov	r1, r4
    3e4e:	e766      	b.n	3d1e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3fe>

00003e50 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    3e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t cl = msg;
    3e54:	468c      	mov	ip, r1
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    3e56:	460f      	mov	r7, r1
    3e58:	4606      	mov	r6, r0
    3e5a:	4605      	mov	r5, r0
    3e5c:	f100 0810 	add.w	r8, r0, #16
  CAN_message_t cl = msg;
    3e60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    3e64:	b08d      	sub	sp, #52	; 0x34
  CAN_message_t cl = msg;
    3e66:	466c      	mov	r4, sp
    3e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3e6a:	e89c 0003 	ldmia.w	ip, {r0, r1}
    3e6e:	e884 0003 	stmia.w	r4, {r0, r1}
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    3e72:	f8df a094 	ldr.w	sl, [pc, #148]	; 3f08 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xb8>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    3e76:	f04f 0901 	mov.w	r9, #1
    thisListener = listener[listenerPos];
    3e7a:	f855 4f04 	ldr.w	r4, [r5, #4]!
    if (thisListener != nullptr) {
    3e7e:	b15c      	cbz	r4, 3e98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    3e80:	f99d 2014 	ldrsb.w	r2, [sp, #20]
    3e84:	68a3      	ldr	r3, [r4, #8]
    3e86:	fa09 f102 	lsl.w	r1, r9, r2
    3e8a:	4219      	tst	r1, r3
    3e8c:	d020      	beq.n	3ed0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x80>
    3e8e:	6823      	ldr	r3, [r4, #0]
    3e90:	f8d3 b000 	ldr.w	fp, [r3]
    3e94:	45d3      	cmp	fp, sl
    3e96:	d116      	bne.n	3ec6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x76>
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    3e98:	4545      	cmp	r5, r8
    3e9a:	d1ee      	bne.n	3e7a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x2a>
  if ( !isEventsUsed ) {
    3e9c:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
    3ea0:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
    3ea4:	b323      	cbz	r3, 3ef0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xa0>
  memmove(buf, &msg, sizeof(msg));
    3ea6:	2218      	movs	r2, #24
    3ea8:	4639      	mov	r1, r7
    3eaa:	eb0d 0002 	add.w	r0, sp, r2
    3eae:	f000 fe99 	bl	4be4 <memcpy>
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    3eb2:	2218      	movs	r2, #24
    3eb4:	eb0d 0102 	add.w	r1, sp, r2
    3eb8:	f106 0014 	add.w	r0, r6, #20
    3ebc:	f7ff fb5e 	bl	357c <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
}
    3ec0:	b00d      	add	sp, #52	; 0x34
    3ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    3ec6:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3eca:	4669      	mov	r1, sp
    3ecc:	4620      	mov	r0, r4
    3ece:	47d8      	blx	fp
      if (thisListener->generalCallbackActive) thisListener->frameHandler (cl, -1, cl.bus);
    3ed0:	7c23      	ldrb	r3, [r4, #16]
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	d0e0      	beq.n	3e98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    3ed6:	6823      	ldr	r3, [r4, #0]
    3ed8:	f8d3 b000 	ldr.w	fp, [r3]
    3edc:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3ee0:	45d3      	cmp	fp, sl
    3ee2:	d0d9      	beq.n	3e98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    3ee4:	4620      	mov	r0, r4
    3ee6:	f04f 32ff 	mov.w	r2, #4294967295
    3eea:	4669      	mov	r1, sp
    3eec:	47d8      	blx	fp
    3eee:	e7d3      	b.n	3e98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    3ef0:	7d3b      	ldrb	r3, [r7, #20]
    3ef2:	f88d 3018 	strb.w	r3, [sp, #24]
    3ef6:	463a      	mov	r2, r7
    3ef8:	a906      	add	r1, sp, #24
    3efa:	4630      	mov	r0, r6
    3efc:	f7fe fe26 	bl	2b4c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
}
    3f00:	b00d      	add	sp, #52	; 0x34
    3f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f06:	bf00      	nop
    3f08:	00000459 	.word	0x00000459

00003f0c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>:
  if ( !distribution ) return; /* distribution not enabled */
    3f0c:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
    3f10:	f893 3701 	ldrb.w	r3, [r3, #1793]	; 0x701
    3f14:	2b00      	cmp	r3, #0
    3f16:	f000 80db 	beq.w	40d0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c4>
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    3f1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t frame = msg;
    3f1e:	460f      	mov	r7, r1
    3f20:	4605      	mov	r5, r0
    3f22:	460e      	mov	r6, r1
    3f24:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    3f26:	b089      	sub	sp, #36	; 0x24
  CAN_message_t frame = msg;
    3f28:	ac02      	add	r4, sp, #8
    3f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3f2c:	e897 0003 	ldmia.w	r7, {r0, r1}
    3f30:	e884 0003 	stmia.w	r4, {r0, r1}
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    3f34:	f8df c250 	ldr.w	ip, [pc, #592]	; 4188 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
    3f38:	f8dc 3000 	ldr.w	r3, [ip]
    3f3c:	009b      	lsls	r3, r3, #2
    3f3e:	d552      	bpl.n	3fe6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    3f40:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
    3f44:	f3c3 6a03 	ubfx	sl, r3, #24, #4
    3f48:	2400      	movs	r4, #0
    3f4a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
    3f4e:	f10a 0a08 	add.w	sl, sl, #8
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    3f52:	4622      	mov	r2, r4
            frame.mb = FIFO;
    3f54:	f04f 0963 	mov.w	r9, #99	; 0x63
    3f58:	e00c      	b.n	3f74 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x68>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    3f5a:	0f5b      	lsrs	r3, r3, #29
    3f5c:	2b02      	cmp	r3, #2
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    3f5e:	683b      	ldr	r3, [r7, #0]
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    3f60:	f000 809a 	beq.w	4098 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x18c>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    3f64:	0f5b      	lsrs	r3, r3, #29
    3f66:	2b05      	cmp	r3, #5
    3f68:	f000 80dd 	beq.w	4126 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x21a>
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    3f6c:	3401      	adds	r4, #1
    3f6e:	b2e2      	uxtb	r2, r4
    3f70:	4592      	cmp	sl, r2
    3f72:	d938      	bls.n	3fe6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( msg.mb == FIFO ) break; // don't distribute to fifo if fifo was the source
    3f74:	f996 3014 	ldrsb.w	r3, [r6, #20]
    3f78:	2b63      	cmp	r3, #99	; 0x63
    3f7a:	d034      	beq.n	3fe6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( !(fifo_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    3f7c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
    3f80:	eb05 0bc8 	add.w	fp, r5, r8, lsl #3
    3f84:	f50b 57f0 	add.w	r7, fp, #7680	; 0x1e00
    3f88:	683b      	ldr	r3, [r7, #0]
    3f8a:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    3f8e:	d0ed      	beq.n	3f6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    3f90:	683b      	ldr	r3, [r7, #0]
    3f92:	0f5b      	lsrs	r3, r3, #29
    3f94:	2b01      	cmp	r3, #1
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    3f96:	683b      	ldr	r3, [r7, #0]
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    3f98:	d1df      	bne.n	3f5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x4e>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    3f9a:	79f2      	ldrb	r2, [r6, #7]
    3f9c:	f3c3 4300 	ubfx	r3, r3, #16, #1
    3fa0:	429a      	cmp	r2, r3
    3fa2:	d1e3      	bne.n	3f6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    3fa4:	683b      	ldr	r3, [r7, #0]
    3fa6:	f413 7f60 	tst.w	r3, #896	; 0x380
    3faa:	d0df      	beq.n	3f6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    3fac:	ea4f 0b48 	mov.w	fp, r8, lsl #1
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    3fb0:	2300      	movs	r3, #0
    3fb2:	e006      	b.n	3fc2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb6>
    3fb4:	683a      	ldr	r2, [r7, #0]
    3fb6:	fa5f f388 	uxtb.w	r3, r8
    3fba:	f3c2 12c2 	ubfx	r2, r2, #7, #3
    3fbe:	4293      	cmp	r3, r2
    3fc0:	d2d4      	bcs.n	3f6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    3fc2:	f103 0801 	add.w	r8, r3, #1
    3fc6:	eb0b 0308 	add.w	r3, fp, r8
    3fca:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    3fce:	9a02      	ldr	r2, [sp, #8]
    3fd0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3fd4:	429a      	cmp	r2, r3
    3fd6:	d1ed      	bne.n	3fb4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
            struct2queueRx(frame);
    3fd8:	a902      	add	r1, sp, #8
    3fda:	4628      	mov	r0, r5
            frame.mb = FIFO;
    3fdc:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    3fe0:	f7ff ff36 	bl	3e50 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    3fe4:	e7e6      	b.n	3fb4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3fe6:	4f68      	ldr	r7, [pc, #416]	; (4188 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>)
  frame.idhit = 0;
    3fe8:	2300      	movs	r3, #0
    3fea:	f88d 300e 	strb.w	r3, [sp, #14]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3fee:	683c      	ldr	r4, [r7, #0]
    3ff0:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
    3ff4:	d03f      	beq.n	4076 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16a>
    3ff6:	f7fc fbe9 	bl	7cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    3ffa:	683b      	ldr	r3, [r7, #0]
    3ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4000:	3301      	adds	r3, #1
    4002:	4283      	cmp	r3, r0
    4004:	4604      	mov	r4, r0
    4006:	d933      	bls.n	4070 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x164>
    4008:	f8df 917c 	ldr.w	r9, [pc, #380]	; 4188 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    400c:	f242 1704 	movw	r7, #8452	; 0x2104
    4010:	f242 1808 	movw	r8, #8456	; 0x2108
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    4014:	f996 3014 	ldrsb.w	r3, [r6, #20]
    4018:	42a3      	cmp	r3, r4
    401a:	d020      	beq.n	405e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    401c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    4020:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
    4024:	f502 5a04 	add.w	sl, r2, #8448	; 0x2100
    4028:	f8da 3000 	ldr.w	r3, [sl]
    402c:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    4030:	d015      	beq.n	405e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    4032:	f8da 3000 	ldr.w	r3, [sl]
    4036:	79f0      	ldrb	r0, [r6, #7]
    4038:	f3c3 63c0 	ubfx	r3, r3, #27, #1
    403c:	4298      	cmp	r0, r3
    403e:	d10e      	bne.n	405e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    4040:	f8da 3000 	ldr.w	r3, [sl]
    4044:	0f5b      	lsrs	r3, r3, #29
    4046:	2b01      	cmp	r3, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    4048:	f8da 3000 	ldr.w	r3, [sl]
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    404c:	d041      	beq.n	40d2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c6>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    404e:	0f5b      	lsrs	r3, r3, #29
    4050:	2b02      	cmp	r3, #2
    4052:	d012      	beq.n	407a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16e>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    4054:	f8da 3000 	ldr.w	r3, [sl]
    4058:	0f5b      	lsrs	r3, r3, #29
    405a:	2b05      	cmp	r3, #5
    405c:	d05b      	beq.n	4116 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x20a>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    405e:	f8d9 3000 	ldr.w	r3, [r9]
    4062:	3401      	adds	r4, #1
    4064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4068:	b2e4      	uxtb	r4, r4
    406a:	3301      	adds	r3, #1
    406c:	429c      	cmp	r4, r3
    406e:	d3d1      	bcc.n	4014 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x108>
}
    4070:	b009      	add	sp, #36	; 0x24
    4072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    4076:	683b      	ldr	r3, [r7, #0]
    4078:	e7c6      	b.n	4008 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xfc>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    407a:	59d1      	ldr	r1, [r2, r7]
    407c:	9b02      	ldr	r3, [sp, #8]
    407e:	428b      	cmp	r3, r1
    4080:	d3ed      	bcc.n	405e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    4082:	f852 2008 	ldr.w	r2, [r2, r8]
    4086:	4293      	cmp	r3, r2
    4088:	d8e9      	bhi.n	405e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        struct2queueRx(frame);
    408a:	a902      	add	r1, sp, #8
    408c:	4628      	mov	r0, r5
        frame.mb = i;
    408e:	f88d 401c 	strb.w	r4, [sp, #28]
        struct2queueRx(frame);
    4092:	f7ff fedd 	bl	3e50 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    4096:	e7e2      	b.n	405e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    4098:	79f2      	ldrb	r2, [r6, #7]
    409a:	f3c3 4300 	ubfx	r3, r3, #16, #1
    409e:	429a      	cmp	r2, r3
    40a0:	f47f af64 	bne.w	3f6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
    40a4:	f641 6304 	movw	r3, #7684	; 0x1e04
    40a8:	f85b 2003 	ldr.w	r2, [fp, r3]
    40ac:	9b02      	ldr	r3, [sp, #8]
    40ae:	4293      	cmp	r3, r2
    40b0:	f4ff af5c 	bcc.w	3f6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    40b4:	f641 6208 	movw	r2, #7688	; 0x1e08
    40b8:	f85b 2002 	ldr.w	r2, [fp, r2]
    40bc:	4293      	cmp	r3, r2
    40be:	f63f af55 	bhi.w	3f6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          struct2queueRx(frame);
    40c2:	a902      	add	r1, sp, #8
    40c4:	4628      	mov	r0, r5
          frame.mb = FIFO;
    40c6:	f88d 901c 	strb.w	r9, [sp, #28]
          struct2queueRx(frame);
    40ca:	f7ff fec1 	bl	3e50 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    40ce:	e74d      	b.n	3f6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    40d0:	4770      	bx	lr
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    40d2:	f413 7f60 	tst.w	r3, #896	; 0x380
    40d6:	d0c2      	beq.n	405e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    40d8:	004a      	lsls	r2, r1, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    40da:	2300      	movs	r3, #0
    40dc:	e007      	b.n	40ee <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1e2>
    40de:	f8da 1000 	ldr.w	r1, [sl]
    40e2:	fa5f f38b 	uxtb.w	r3, fp
    40e6:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    40ea:	428b      	cmp	r3, r1
    40ec:	d2b7      	bcs.n	405e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    40ee:	f103 0b01 	add.w	fp, r3, #1
    40f2:	eb02 030b 	add.w	r3, r2, fp
    40f6:	f503 6304 	add.w	r3, r3, #2112	; 0x840
    40fa:	9902      	ldr	r1, [sp, #8]
    40fc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4100:	4299      	cmp	r1, r3
    4102:	d1ec      	bne.n	40de <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
          struct2queueRx(frame);
    4104:	a902      	add	r1, sp, #8
    4106:	4628      	mov	r0, r5
    4108:	9200      	str	r2, [sp, #0]
          frame.mb = i;
    410a:	f88d 401c 	strb.w	r4, [sp, #28]
          struct2queueRx(frame);
    410e:	f7ff fe9f 	bl	3e50 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    4112:	9a00      	ldr	r2, [sp, #0]
    4114:	e7e3      	b.n	40de <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
      if ( filter_match((FLEXCAN_MAILBOX)i, frame.id) ) {
    4116:	9a02      	ldr	r2, [sp, #8]
    4118:	4621      	mov	r1, r4
    411a:	4628      	mov	r0, r5
    411c:	f7ff f9c8 	bl	34b0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    4120:	2800      	cmp	r0, #0
    4122:	d09c      	beq.n	405e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    4124:	e7b1      	b.n	408a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17e>
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    4126:	683b      	ldr	r3, [r7, #0]
    4128:	f413 7f60 	tst.w	r3, #896	; 0x380
    412c:	f43f af1e 	beq.w	3f6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    4130:	f50b 53f0 	add.w	r3, fp, #7680	; 0x1e00
    4134:	3314      	adds	r3, #20
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    4136:	2701      	movs	r7, #1
    4138:	e00a      	b.n	4150 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x244>
    413a:	f50b 51f0 	add.w	r1, fp, #7680	; 0x1e00
    413e:	3701      	adds	r7, #1
    4140:	6809      	ldr	r1, [r1, #0]
    4142:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    4146:	b2ff      	uxtb	r7, r7
    4148:	3101      	adds	r1, #1
    414a:	428f      	cmp	r7, r1
    414c:	f4bf af0e 	bcs.w	3f6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    4150:	eb07 0148 	add.w	r1, r7, r8, lsl #1
    4154:	f501 61f0 	add.w	r1, r1, #1920	; 0x780
    4158:	6818      	ldr	r0, [r3, #0]
    415a:	f855 e021 	ldr.w	lr, [r5, r1, lsl #2]
    415e:	9902      	ldr	r1, [sp, #8]
    4160:	f8d3 c000 	ldr.w	ip, [r3]
    4164:	4008      	ands	r0, r1
    4166:	ea0e 010c 	and.w	r1, lr, ip
    416a:	4288      	cmp	r0, r1
    416c:	d1e5      	bne.n	413a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
            struct2queueRx(frame);
    416e:	a902      	add	r1, sp, #8
    4170:	4628      	mov	r0, r5
    4172:	9301      	str	r3, [sp, #4]
            frame.idhit = i;
    4174:	f88d 200e 	strb.w	r2, [sp, #14]
    4178:	9200      	str	r2, [sp, #0]
            frame.mb = FIFO;
    417a:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    417e:	f7ff fe67 	bl	3e50 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    4182:	e9dd 2300 	ldrd	r2, r3, [sp]
    4186:	e7d8      	b.n	413a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
    4188:	400a4000 	.word	0x400a4000

0000418c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()>:
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    418c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t msg; // setup a temporary storage buffer
    4190:	4db9      	ldr	r5, [pc, #740]	; (4478 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2ec>)
  return FLEXCANb_IMASK1(_bus);
    4192:	4fba      	ldr	r7, [pc, #744]	; (447c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    4194:	4681      	mov	r9, r0
  CAN_message_t msg; // setup a temporary storage buffer
    4196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    4198:	b097      	sub	sp, #92	; 0x5c
  CAN_message_t msg; // setup a temporary storage buffer
    419a:	ac04      	add	r4, sp, #16
    419c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    419e:	e895 0003 	ldmia.w	r5, {r0, r1}
    41a2:	e884 0003 	stmia.w	r4, {r0, r1}
  return FLEXCANb_IMASK1(_bus);
    41a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  return FLEXCANb_IFLAG1(_bus);
    41a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    41aa:	683b      	ldr	r3, [r7, #0]
  return FLEXCANb_IFLAG1(_bus);
    41ac:	9001      	str	r0, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    41ae:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
  return FLEXCANb_IMASK1(_bus);
    41b2:	f04f 0600 	mov.w	r6, #0
    41b6:	468b      	mov	fp, r1
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    41b8:	d103      	bne.n	41c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    41ba:	683a      	ldr	r2, [r7, #0]
    41bc:	0094      	lsls	r4, r2, #2
    41be:	f100 80eb 	bmi.w	4398 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x20c>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    41c2:	4dae      	ldr	r5, [pc, #696]	; (447c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    41c4:	9b01      	ldr	r3, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    41c6:	682c      	ldr	r4, [r5, #0]
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    41c8:	f043 0301 	orr.w	r3, r3, #1
    41cc:	fab3 f383 	clz	r3, r3
    41d0:	f1c3 0320 	rsb	r3, r3, #32
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    41d4:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    41d8:	fa5f fa83 	uxtb.w	sl, r3
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    41dc:	f000 824f 	beq.w	467e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f2>
    41e0:	f7fc faf4 	bl	7cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    41e4:	682b      	ldr	r3, [r5, #0]
    41e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    41ea:	3301      	adds	r3, #1
    41ec:	4283      	cmp	r3, r0
    41ee:	4604      	mov	r4, r0
    41f0:	f240 809e 	bls.w	4330 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    41f4:	4582      	cmp	sl, r0
    41f6:	f240 809b 	bls.w	4330 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    41fa:	1c67      	adds	r7, r4, #1
      (void)FLEXCANb_TIMER(_bus);
    41fc:	f8df 827c 	ldr.w	r8, [pc, #636]	; 447c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>
    4200:	b2fd      	uxtb	r5, r7
    4202:	e016      	b.n	4232 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xa6>
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    4204:	2906      	cmp	r1, #6
    4206:	f000 80ad 	beq.w	4364 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1d8>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_EMPTY ) {
    420a:	2904      	cmp	r1, #4
    420c:	f000 813e 	beq.w	448c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x300>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    4210:	2908      	cmp	r1, #8
    4212:	f000 81d7 	beq.w	45c4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x438>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    4216:	f8d8 3000 	ldr.w	r3, [r8]
    421a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    421e:	3301      	adds	r3, #1
    4220:	42ab      	cmp	r3, r5
    4222:	b2fc      	uxtb	r4, r7
    4224:	f240 8084 	bls.w	4330 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    4228:	45a2      	cmp	sl, r4
    422a:	f105 0501 	add.w	r5, r5, #1
    422e:	d97f      	bls.n	4330 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    4230:	1c67      	adds	r7, r4, #1
    if (!(imask & (1ULL << mb_num))) continue; /* don't read non-interrupt mailboxes */
    4232:	f1c4 0220 	rsb	r2, r4, #32
    4236:	f1a4 0320 	sub.w	r3, r4, #32
    423a:	fa06 f202 	lsl.w	r2, r6, r2
    423e:	fa2b f104 	lsr.w	r1, fp, r4
    4242:	fa26 f303 	lsr.w	r3, r6, r3
    4246:	4311      	orrs	r1, r2
    4248:	4319      	orrs	r1, r3
    424a:	07c9      	lsls	r1, r1, #31
    424c:	d5e3      	bpl.n	4216 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    424e:	9901      	ldr	r1, [sp, #4]
    4250:	40e1      	lsrs	r1, r4
    4252:	4311      	orrs	r1, r2
    4254:	4319      	orrs	r1, r3
    4256:	07c9      	lsls	r1, r1, #31
    4258:	d5dd      	bpl.n	4216 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    425a:	4b89      	ldr	r3, [pc, #548]	; (4480 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f4>)
    425c:	18e3      	adds	r3, r4, r3
    425e:	011b      	lsls	r3, r3, #4
    uint32_t code = mbxAddr[0];
    4260:	681a      	ldr	r2, [r3, #0]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    4262:	f3c2 6103 	ubfx	r1, r2, #24, #4
    4266:	2902      	cmp	r1, #2
    4268:	d1cc      	bne.n	4204 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x78>
      msg.flags.extended = (bool)(code & (1UL << 21));
    426a:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    426e:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    4270:	2900      	cmp	r1, #0
    4272:	bf14      	ite	ne
    4274:	f04f 0c01 	movne.w	ip, #1
    4278:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    427c:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    4280:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    4284:	d17f      	bne.n	4386 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
    4286:	0c80      	lsrs	r0, r0, #18
    4288:	9004      	str	r0, [sp, #16]
      msg.timestamp = code & 0xFFFF;
    428a:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    428e:	f3c2 4203 	ubfx	r2, r2, #16, #4
    4292:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    4296:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.mb = mb_num;
    429a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    429e:	f892 2915 	ldrb.w	r2, [r2, #2325]	; 0x915
    42a2:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    42a6:	689a      	ldr	r2, [r3, #8]
    42a8:	f88d 201f 	strb.w	r2, [sp, #31]
    42ac:	689a      	ldr	r2, [r3, #8]
    42ae:	0a12      	lsrs	r2, r2, #8
    42b0:	f88d 201e 	strb.w	r2, [sp, #30]
    42b4:	689a      	ldr	r2, [r3, #8]
    42b6:	0c12      	lsrs	r2, r2, #16
    42b8:	f88d 201d 	strb.w	r2, [sp, #29]
    42bc:	689a      	ldr	r2, [r3, #8]
    42be:	0e12      	lsrs	r2, r2, #24
    42c0:	f88d 201c 	strb.w	r2, [sp, #28]
    42c4:	68da      	ldr	r2, [r3, #12]
    42c6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    42ca:	68da      	ldr	r2, [r3, #12]
    42cc:	0a12      	lsrs	r2, r2, #8
    42ce:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    42d2:	68da      	ldr	r2, [r3, #12]
    42d4:	0c12      	lsrs	r2, r2, #16
    42d6:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    42da:	68da      	ldr	r2, [r3, #12]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    42dc:	2900      	cmp	r1, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    42de:	ea4f 6212 	mov.w	r2, r2, lsr #24
    42e2:	f88d 2020 	strb.w	r2, [sp, #32]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    42e6:	bf14      	ite	ne
    42e8:	f04f 628c 	movne.w	r2, #73400320	; 0x4600000
    42ec:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
    42f0:	601a      	str	r2, [r3, #0]
      (void)FLEXCANb_TIMER(_bus);
    42f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    42f6:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    42fa:	2301      	movs	r3, #1
    42fc:	40a3      	lsls	r3, r4
    42fe:	4313      	orrs	r3, r2
    4300:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    4304:	9a04      	ldr	r2, [sp, #16]
    4306:	4621      	mov	r1, r4
    4308:	4648      	mov	r0, r9
    430a:	f7ff f8d1 	bl	34b0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    430e:	2800      	cmp	r0, #0
    4310:	f040 8153 	bne.w	45ba <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x42e>
      frame_distribution(msg);
    4314:	a904      	add	r1, sp, #16
    4316:	4648      	mov	r0, r9
    4318:	f7ff fdf8 	bl	3f0c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    431c:	a804      	add	r0, sp, #16
    431e:	f3af 8000 	nop.w
      ext_output2(msg);
    4322:	a804      	add	r0, sp, #16
    4324:	f3af 8000 	nop.w
      ext_output3(msg);
    4328:	a804      	add	r0, sp, #16
    432a:	f3af 8000 	nop.w
    }
    432e:	e772      	b.n	4216 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    4330:	4e52      	ldr	r6, [pc, #328]	; (447c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    4332:	4d54      	ldr	r5, [pc, #336]	; (4484 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f8>)
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    4334:	6a34      	ldr	r4, [r6, #32]
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    4336:	682b      	ldr	r3, [r5, #0]
    4338:	ea84 0203 	eor.w	r2, r4, r3
    433c:	4b52      	ldr	r3, [pc, #328]	; (4488 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2fc>)
    433e:	4013      	ands	r3, r2
    4340:	b13b      	cbz	r3, 4352 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
        uint16_t size() { return _available; }
    4342:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    4346:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
    434a:	b29b      	uxth	r3, r3
    if ( busESR1.size() < busESR1.capacity() ) {
    434c:	2b0f      	cmp	r3, #15
    434e:	f240 8198 	bls.w	4682 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f6>
  FLEXCANb_ESR1(_bus) |= esr1;
    4352:	4a4a      	ldr	r2, [pc, #296]	; (447c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    4354:	6a13      	ldr	r3, [r2, #32]
    4356:	4323      	orrs	r3, r4
    4358:	6213      	str	r3, [r2, #32]
  asm volatile ("dsb");	
    435a:	f3bf 8f4f 	dsb	sy
}
    435e:	b017      	add	sp, #92	; 0x5c
    4360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      msg.flags.extended = (bool)(code & (1UL << 21));
    4364:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    4368:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    436a:	2900      	cmp	r1, #0
    436c:	bf14      	ite	ne
    436e:	f04f 0c01 	movne.w	ip, #1
    4372:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    4376:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    437a:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    437e:	d105      	bne.n	438c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x200>
    4380:	0c80      	lsrs	r0, r0, #18
    4382:	9004      	str	r0, [sp, #16]
    4384:	e004      	b.n	4390 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x204>
    4386:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    4388:	2101      	movs	r1, #1
    438a:	e77e      	b.n	428a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    438c:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    438e:	2101      	movs	r1, #1
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    4390:	2001      	movs	r0, #1
    4392:	f88d 0019 	strb.w	r0, [sp, #25]
    4396:	e778      	b.n	428a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    4398:	068a      	lsls	r2, r1, #26
    439a:	f57f af12 	bpl.w	41c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    439e:	0685      	lsls	r5, r0, #26
    43a0:	f57f af0f 	bpl.w	41c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
      uint32_t code = mbxAddr[0];
    43a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
      msg.timestamp = code & 0xFFFF;
    43a8:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    43ac:	f3c2 4103 	ubfx	r1, r2, #16, #4
    43b0:	f88d 101b 	strb.w	r1, [sp, #27]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    43b4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    43b8:	4c30      	ldr	r4, [pc, #192]	; (447c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
      msg.flags.extended = (bool)(code & (1UL << 21));
    43ba:	f402 1000 	and.w	r0, r2, #2097152	; 0x200000
    43be:	42b0      	cmp	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    43c0:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
      msg.flags.remote = (bool)(code & (1UL << 20));
    43c4:	f3c2 5000 	ubfx	r0, r2, #20, #1
    43c8:	f88d 0018 	strb.w	r0, [sp, #24]
      msg.idhit = code >> 23;
    43cc:	ea4f 52d2 	mov.w	r2, r2, lsr #23
      msg.flags.extended = (bool)(code & (1UL << 21));
    43d0:	bf12      	itee	ne
    43d2:	2001      	movne	r0, #1
    43d4:	4630      	moveq	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    43d6:	0c89      	lsreq	r1, r1, #18
      msg.flags.extended = (bool)(code & (1UL << 21));
    43d8:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.idhit = code >> 23;
    43dc:	f88d 2016 	strb.w	r2, [sp, #22]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    43e0:	9104      	str	r1, [sp, #16]
    43e2:	a808      	add	r0, sp, #32
      msg.idhit = code >> 23;
    43e4:	2200      	movs	r2, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    43e6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    43ea:	40d1      	lsrs	r1, r2
    43ec:	3208      	adds	r2, #8
    43ee:	2a20      	cmp	r2, #32
    43f0:	f800 1d01 	strb.w	r1, [r0, #-1]!
    43f4:	d1f7      	bne.n	43e6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x25a>
    43f6:	4821      	ldr	r0, [pc, #132]	; (447c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    43f8:	a909      	add	r1, sp, #36	; 0x24
    43fa:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    43fe:	40da      	lsrs	r2, r3
    4400:	3308      	adds	r3, #8
    4402:	2b20      	cmp	r3, #32
    4404:	f801 2d01 	strb.w	r2, [r1, #-1]!
    4408:	d1f7      	bne.n	43fa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x26e>
      msg.bus = busNumber;
    440a:	f509 5300 	add.w	r3, r9, #8192	; 0x2000
    440e:	f893 3915 	ldrb.w	r3, [r3, #2325]	; 0x915
    4412:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
    4416:	2363      	movs	r3, #99	; 0x63
    4418:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      (void)FLEXCANb_TIMER(_bus);
    441c:	6883      	ldr	r3, [r0, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    441e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4420:	f043 0320 	orr.w	r3, r3, #32
    4424:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF6I ) writeIFLAGBit(6); /* clear FIFO bit only! */
    4426:	9b01      	ldr	r3, [sp, #4]
    4428:	065c      	lsls	r4, r3, #25
    442a:	d503      	bpl.n	4434 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2a8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    442c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    442e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4432:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
    4434:	9b01      	ldr	r3, [sp, #4]
    4436:	0618      	lsls	r0, r3, #24
    4438:	d504      	bpl.n	4444 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2b8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    443a:	4a10      	ldr	r2, [pc, #64]	; (447c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    443c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    443e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4442:	6313      	str	r3, [r2, #48]	; 0x30
      frame_distribution(msg);
    4444:	a904      	add	r1, sp, #16
    4446:	4648      	mov	r0, r9
    4448:	f7ff fd60 	bl	3f0c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    444c:	a804      	add	r0, sp, #16
    444e:	f3af 8000 	nop.w
      ext_output2(msg);
    4452:	a804      	add	r0, sp, #16
    4454:	f3af 8000 	nop.w
      ext_output3(msg);
    4458:	a804      	add	r0, sp, #16
    445a:	f3af 8000 	nop.w
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    445e:	9904      	ldr	r1, [sp, #16]
    4460:	4648      	mov	r0, r9
    4462:	f7fe ffab 	bl	33bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>
    4466:	2800      	cmp	r0, #0
    4468:	f43f aeab 	beq.w	41c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    446c:	a904      	add	r1, sp, #16
    446e:	4648      	mov	r0, r9
    4470:	f7ff fcee 	bl	3e50 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    4474:	e6a5      	b.n	41c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    4476:	bf00      	nop
    4478:	0000d4ac 	.word	0x0000d4ac
    447c:	400a4000 	.word	0x400a4000
    4480:	0400a408 	.word	0x0400a408
    4484:	1fff0ef8 	.word	0x1fff0ef8
    4488:	0007ffbf 	.word	0x0007ffbf
      msg.flags.extended = (bool)(code & (1UL << 21));
    448c:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    4490:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    4492:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    4494:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    4498:	f3c2 4203 	ubfx	r2, r2, #16, #4
    449c:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    44a0:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    44a4:	bf14      	ite	ne
    44a6:	2001      	movne	r0, #1
    44a8:	2000      	moveq	r0, #0
    44aa:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    44ae:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    44b2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    44b6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    44ba:	6898      	ldr	r0, [r3, #8]
    44bc:	f88d 001f 	strb.w	r0, [sp, #31]
    44c0:	6898      	ldr	r0, [r3, #8]
    44c2:	ea4f 2010 	mov.w	r0, r0, lsr #8
    44c6:	f88d 001e 	strb.w	r0, [sp, #30]
    44ca:	6898      	ldr	r0, [r3, #8]
    44cc:	ea4f 4010 	mov.w	r0, r0, lsr #16
    44d0:	f88d 001d 	strb.w	r0, [sp, #29]
    44d4:	6898      	ldr	r0, [r3, #8]
    44d6:	ea4f 6010 	mov.w	r0, r0, lsr #24
    44da:	f88d 001c 	strb.w	r0, [sp, #28]
    44de:	68d8      	ldr	r0, [r3, #12]
    44e0:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    44e4:	68d8      	ldr	r0, [r3, #12]
    44e6:	ea4f 2010 	mov.w	r0, r0, lsr #8
    44ea:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    44ee:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    44f0:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    44f4:	bf08      	it	eq
    44f6:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    44f8:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    44fa:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    44fc:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    4500:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    4504:	68d8      	ldr	r0, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    4506:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    450a:	0e00      	lsrs	r0, r0, #24
    450c:	f88d 0020 	strb.w	r0, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    4510:	b129      	cbz	r1, 451e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x392>
    4512:	a804      	add	r0, sp, #16
    4514:	9203      	str	r2, [sp, #12]
    4516:	9302      	str	r3, [sp, #8]
    4518:	4788      	blx	r1
    451a:	9a03      	ldr	r2, [sp, #12]
    451c:	9b02      	ldr	r3, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    451e:	f8d2 2908 	ldr.w	r2, [r2, #2312]	; 0x908
    4522:	b11a      	cbz	r2, 452c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3a0>
    4524:	a804      	add	r0, sp, #16
    4526:	9302      	str	r3, [sp, #8]
    4528:	4790      	blx	r2
    452a:	9b02      	ldr	r3, [sp, #8]
    452c:	f509 5280 	add.w	r2, r9, #4096	; 0x1000
    4530:	9202      	str	r2, [sp, #8]
    4532:	f8b2 2b1e 	ldrh.w	r2, [r2, #2846]	; 0xb1e
    4536:	b292      	uxth	r2, r2
      if ( txBuffer.size() ) {
    4538:	2a00      	cmp	r2, #0
    453a:	f000 80b1 	beq.w	46a0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x514>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    453e:	9b02      	ldr	r3, [sp, #8]
    4540:	f8b3 1b1a 	ldrh.w	r1, [r3, #2842]	; 0xb1a
    4544:	231a      	movs	r3, #26
    4546:	f001 010f 	and.w	r1, r1, #15
    454a:	fb03 9101 	mla	r1, r3, r1, r9
    454e:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    4552:	3112      	adds	r1, #18
    4554:	2218      	movs	r2, #24
    4556:	a810      	add	r0, sp, #64	; 0x40
    4558:	f000 fb44 	bl	4be4 <memcpy>
        memmove(&frame, buf, sizeof(frame));
    455c:	ab0a      	add	r3, sp, #40	; 0x28
    455e:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    4562:	469e      	mov	lr, r3
    4564:	9303      	str	r3, [sp, #12]
    4566:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    456a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    456e:	e89c 0003 	ldmia.w	ip, {r0, r1}
    4572:	e88e 0003 	stmia.w	lr, {r0, r1}
        if ( frame.mb == -1 ) {
    4576:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
    457a:	1c5a      	adds	r2, r3, #1
    457c:	f000 809b 	beq.w	46b6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x52a>
        else if ( frame.mb == mb_num ) {
    4580:	429c      	cmp	r4, r3
    4582:	f47f ae48 	bne.w	4216 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(frame.mb, frame);
    4586:	9a03      	ldr	r2, [sp, #12]
    4588:	b2e1      	uxtb	r1, r4
    458a:	4648      	mov	r0, r9
    458c:	f7fe f98e 	bl	28ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    4590:	9a02      	ldr	r2, [sp, #8]
    4592:	f8b2 3b1a 	ldrh.w	r3, [r2, #2842]	; 0xb1a
    4596:	3301      	adds	r3, #1
    4598:	f003 031f 	and.w	r3, r3, #31
    459c:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    if ( _available ) _available--;
    45a0:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    45a4:	b29b      	uxth	r3, r3
    45a6:	2b00      	cmp	r3, #0
    45a8:	f43f ae35 	beq.w	4216 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    45ac:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    45b0:	3b01      	subs	r3, #1
    45b2:	b29b      	uxth	r3, r3
    45b4:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    45b8:	e62d      	b.n	4216 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    45ba:	a904      	add	r1, sp, #16
    45bc:	4648      	mov	r0, r9
    45be:	f7ff fc47 	bl	3e50 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    45c2:	e6a7      	b.n	4314 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x188>
      msg.flags.extended = (bool)(code & (1UL << 21));
    45c4:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    45c8:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    45ca:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    45cc:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    45d0:	f3c2 4203 	ubfx	r2, r2, #16, #4
    45d4:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    45d8:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    45dc:	bf14      	ite	ne
    45de:	2001      	movne	r0, #1
    45e0:	2000      	moveq	r0, #0
    45e2:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    45e6:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    45ea:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    45ee:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    45f2:	6898      	ldr	r0, [r3, #8]
    45f4:	f88d 001f 	strb.w	r0, [sp, #31]
    45f8:	6898      	ldr	r0, [r3, #8]
    45fa:	ea4f 2010 	mov.w	r0, r0, lsr #8
    45fe:	f88d 001e 	strb.w	r0, [sp, #30]
    4602:	6898      	ldr	r0, [r3, #8]
    4604:	ea4f 4010 	mov.w	r0, r0, lsr #16
    4608:	f88d 001d 	strb.w	r0, [sp, #29]
    460c:	6898      	ldr	r0, [r3, #8]
    460e:	ea4f 6010 	mov.w	r0, r0, lsr #24
    4612:	f88d 001c 	strb.w	r0, [sp, #28]
    4616:	68d8      	ldr	r0, [r3, #12]
    4618:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    461c:	68d8      	ldr	r0, [r3, #12]
    461e:	ea4f 2010 	mov.w	r0, r0, lsr #8
    4622:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    4626:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    4628:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    462c:	bf08      	it	eq
    462e:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    4630:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    4632:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    4634:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    4638:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    463c:	68db      	ldr	r3, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    463e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    4642:	0e1b      	lsrs	r3, r3, #24
    4644:	f88d 3020 	strb.w	r3, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    4648:	b119      	cbz	r1, 4652 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4c6>
    464a:	a804      	add	r0, sp, #16
    464c:	9202      	str	r2, [sp, #8]
    464e:	4788      	blx	r1
    4650:	9a02      	ldr	r2, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    4652:	f8d2 3908 	ldr.w	r3, [r2, #2312]	; 0x908
    4656:	b10b      	cbz	r3, 465c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4d0>
    4658:	a804      	add	r0, sp, #16
    465a:	4798      	blx	r3
        uint16_t size() { return _available; }
    465c:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    4660:	9302      	str	r3, [sp, #8]
    4662:	f8b3 3b1e 	ldrh.w	r3, [r3, #2846]	; 0xb1e
    4666:	b29b      	uxth	r3, r3
      if ( txBuffer.size() ) {
    4668:	2b00      	cmp	r3, #0
    466a:	f47f af68 	bne.w	453e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3b2>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    466e:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    4672:	2301      	movs	r3, #1
    4674:	40a3      	lsls	r3, r4
    4676:	4313      	orrs	r3, r2
    4678:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    467c:	e5cb      	b.n	4216 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    467e:	682b      	ldr	r3, [r5, #0]
    4680:	e5bb      	b.n	41fa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6e>
      busESR1.write(esr1);
    4682:	f509 50e6 	add.w	r0, r9, #7360	; 0x1cc0
    4686:	4621      	mov	r1, r4
    4688:	3010      	adds	r0, #16
    468a:	f7fe fe4f 	bl	332c <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)>
      busECR.write(FLEXCANb_ECR(_bus));
    468e:	69f1      	ldr	r1, [r6, #28]
    4690:	f509 50ec 	add.w	r0, r9, #7552	; 0x1d80
    4694:	b289      	uxth	r1, r1
    4696:	3018      	adds	r0, #24
    4698:	f7fe fe6c 	bl	3374 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)>
      last_esr1 = esr1;
    469c:	602c      	str	r4, [r5, #0]
    469e:	e658      	b.n	4352 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    46a0:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
    46a4:	2201      	movs	r2, #1
    46a6:	40a2      	lsls	r2, r4
    46a8:	430a      	orrs	r2, r1
    46aa:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE); /* set it back to a TX mailbox */
    46ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    46b2:	601a      	str	r2, [r3, #0]
    46b4:	e5af      	b.n	4216 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(mb_num, frame);
    46b6:	9a03      	ldr	r2, [sp, #12]
    46b8:	4621      	mov	r1, r4
    46ba:	e766      	b.n	458a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3fe>

000046bc <_GLOBAL__sub_I_Can1>:
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    46bc:	4849      	ldr	r0, [pc, #292]	; (47e4 <_GLOBAL__sub_I_Can1+0x128>)
    46be:	494a      	ldr	r1, [pc, #296]	; (47e8 <_GLOBAL__sub_I_Can1+0x12c>)
}
    46c0:	b570      	push	{r4, r5, r6, lr}
class Circular_Buffer {
    46c2:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
  if ( _bus == CAN1 ) _CAN1 = this;
    46c6:	4d49      	ldr	r5, [pc, #292]	; (47ec <_GLOBAL__sub_I_Can1+0x130>)
    46c8:	2200      	movs	r2, #0
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    46ca:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    46ce:	8282      	strh	r2, [r0, #20]
  if ( _bus == CAN1 ) _CAN1 = this;
    46d0:	6028      	str	r0, [r5, #0]
    46d2:	82c2      	strh	r2, [r0, #22]
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    46d4:	4d46      	ldr	r5, [pc, #280]	; (47f0 <_GLOBAL__sub_I_Can1+0x134>)
    46d6:	8302      	strh	r2, [r0, #24]
    46d8:	f8a3 2b1a 	strh.w	r2, [r3, #2842]	; 0xb1a
    46dc:	f8a3 2b1c 	strh.w	r2, [r3, #2844]	; 0xb1c
    46e0:	f8a3 2b1e 	strh.w	r2, [r3, #2846]	; 0xb1e
    46e4:	f8a3 2cd0 	strh.w	r2, [r3, #3280]	; 0xcd0
    46e8:	f8a3 2cd2 	strh.w	r2, [r3, #3282]	; 0xcd2
    46ec:	f8a3 2cd4 	strh.w	r2, [r3, #3284]	; 0xcd4
    46f0:	f8a3 2d98 	strh.w	r2, [r3, #3480]	; 0xd98
    46f4:	f8a3 2d9a 	strh.w	r2, [r3, #3482]	; 0xd9a
    46f8:	f8a3 2d9c 	strh.w	r2, [r3, #3484]	; 0xd9c
    46fc:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
    4700:	f884 2700 	strb.w	r2, [r4, #1792]	; 0x700
    4704:	6005      	str	r5, [r0, #0]
    4706:	f884 2701 	strb.w	r2, [r4, #1793]	; 0x701
    470a:	f501 5000 	add.w	r0, r1, #8192	; 0x2000
    470e:	f8c4 290c 	str.w	r2, [r4, #2316]	; 0x90c
    4712:	f8c4 2910 	str.w	r2, [r4, #2320]	; 0x910
    4716:	f884 2914 	strb.w	r2, [r4, #2324]	; 0x914
    471a:	4d36      	ldr	r5, [pc, #216]	; (47f4 <_GLOBAL__sub_I_Can1+0x138>)
  if ( _bus == CAN0 ) _CAN0 = this;
    471c:	4c36      	ldr	r4, [pc, #216]	; (47f8 <_GLOBAL__sub_I_Can1+0x13c>)
    471e:	828a      	strh	r2, [r1, #20]
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    4720:	600d      	str	r5, [r1, #0]
    4722:	82ca      	strh	r2, [r1, #22]
    4724:	830a      	strh	r2, [r1, #24]
    4726:	f8a3 2b1a 	strh.w	r2, [r3, #2842]	; 0xb1a
    472a:	f8a3 2b1c 	strh.w	r2, [r3, #2844]	; 0xb1c
    472e:	f8a3 2b1e 	strh.w	r2, [r3, #2846]	; 0xb1e
    4732:	f8a3 2cd0 	strh.w	r2, [r3, #3280]	; 0xcd0
    4736:	f8a3 2cd2 	strh.w	r2, [r3, #3282]	; 0xcd2
    473a:	f8a3 2cd4 	strh.w	r2, [r3, #3284]	; 0xcd4
    473e:	f8a3 2d98 	strh.w	r2, [r3, #3480]	; 0xd98
    4742:	f8a3 2d9a 	strh.w	r2, [r3, #3482]	; 0xd9a
    4746:	f8a3 2d9c 	strh.w	r2, [r3, #3484]	; 0xd9c
OneButton button(BUTTON_PIN, true);
    474a:	2301      	movs	r3, #1
}
    474c:	b08a      	sub	sp, #40	; 0x28
    474e:	f880 2700 	strb.w	r2, [r0, #1792]	; 0x700
    4752:	f8c0 290c 	str.w	r2, [r0, #2316]	; 0x90c
    4756:	f880 2701 	strb.w	r2, [r0, #1793]	; 0x701
    475a:	f8c0 2910 	str.w	r2, [r0, #2320]	; 0x910
    475e:	f880 2914 	strb.w	r2, [r0, #2324]	; 0x914
  if ( _bus == CAN0 ) _CAN0 = this;
    4762:	6021      	str	r1, [r4, #0]
OneButton button(BUTTON_PIN, true);
    4764:	461a      	mov	r2, r3
    4766:	211c      	movs	r1, #28
    4768:	4824      	ldr	r0, [pc, #144]	; (47fc <_GLOBAL__sub_I_Can1+0x140>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    476a:	4c25      	ldr	r4, [pc, #148]	; (4800 <_GLOBAL__sub_I_Can1+0x144>)
    476c:	f000 f8d2 	bl	4914 <OneButton::OneButton(int, bool, bool)>
OneButton right_button(BUTTON_PIN, true);
    4770:	2301      	movs	r3, #1
    4772:	461a      	mov	r2, r3
    4774:	211c      	movs	r1, #28
    4776:	4823      	ldr	r0, [pc, #140]	; (4804 <_GLOBAL__sub_I_Can1+0x148>)
    4778:	f000 f8cc 	bl	4914 <OneButton::OneButton(int, bool, bool)>
    477c:	6823      	ldr	r3, [r4, #0]
    477e:	9301      	str	r3, [sp, #4]
	return ret;
    4780:	9901      	ldr	r1, [sp, #4]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4782:	6823      	ldr	r3, [r4, #0]
    4784:	9302      	str	r3, [sp, #8]
	return ret;
    4786:	9802      	ldr	r0, [sp, #8]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4788:	6823      	ldr	r3, [r4, #0]
    478a:	9303      	str	r3, [sp, #12]
	elapsedMillis(void) { ms = millis(); }
    478c:	4b1e      	ldr	r3, [pc, #120]	; (4808 <_GLOBAL__sub_I_Can1+0x14c>)
	return ret;
    478e:	9a03      	ldr	r2, [sp, #12]
    4790:	6019      	str	r1, [r3, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4792:	6823      	ldr	r3, [r4, #0]
    4794:	9304      	str	r3, [sp, #16]
    4796:	4b1d      	ldr	r3, [pc, #116]	; (480c <_GLOBAL__sub_I_Can1+0x150>)
    4798:	491d      	ldr	r1, [pc, #116]	; (4810 <_GLOBAL__sub_I_Can1+0x154>)
    479a:	601a      	str	r2, [r3, #0]
    479c:	4b1d      	ldr	r3, [pc, #116]	; (4814 <_GLOBAL__sub_I_Can1+0x158>)
	return ret;
    479e:	9a04      	ldr	r2, [sp, #16]
    47a0:	601a      	str	r2, [r3, #0]
    47a2:	6008      	str	r0, [r1, #0]
	elapsedMicros(void) { us = micros(); }
    47a4:	f000 fca4 	bl	50f0 <micros>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47a8:	6823      	ldr	r3, [r4, #0]
    47aa:	9305      	str	r3, [sp, #20]
	return ret;
    47ac:	9e05      	ldr	r6, [sp, #20]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47ae:	6823      	ldr	r3, [r4, #0]
    47b0:	9306      	str	r3, [sp, #24]
    47b2:	4b19      	ldr	r3, [pc, #100]	; (4818 <_GLOBAL__sub_I_Can1+0x15c>)
	return ret;
    47b4:	9d06      	ldr	r5, [sp, #24]
    47b6:	6018      	str	r0, [r3, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47b8:	6823      	ldr	r3, [r4, #0]
    47ba:	9307      	str	r3, [sp, #28]
	return ret;
    47bc:	9907      	ldr	r1, [sp, #28]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47be:	6823      	ldr	r3, [r4, #0]
    47c0:	9308      	str	r3, [sp, #32]
	return ret;
    47c2:	9808      	ldr	r0, [sp, #32]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47c4:	6823      	ldr	r3, [r4, #0]
    47c6:	9309      	str	r3, [sp, #36]	; 0x24
	elapsedMillis(void) { ms = millis(); }
    47c8:	4b14      	ldr	r3, [pc, #80]	; (481c <_GLOBAL__sub_I_Can1+0x160>)
	return ret;
    47ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    47cc:	601e      	str	r6, [r3, #0]
    47ce:	4b14      	ldr	r3, [pc, #80]	; (4820 <_GLOBAL__sub_I_Can1+0x164>)
    47d0:	601d      	str	r5, [r3, #0]
    47d2:	4b14      	ldr	r3, [pc, #80]	; (4824 <_GLOBAL__sub_I_Can1+0x168>)
    47d4:	6019      	str	r1, [r3, #0]
    47d6:	4914      	ldr	r1, [pc, #80]	; (4828 <_GLOBAL__sub_I_Can1+0x16c>)
    47d8:	4b14      	ldr	r3, [pc, #80]	; (482c <_GLOBAL__sub_I_Can1+0x170>)
    47da:	6008      	str	r0, [r1, #0]
    47dc:	601a      	str	r2, [r3, #0]
}
    47de:	b00a      	add	sp, #40	; 0x28
    47e0:	bd70      	pop	{r4, r5, r6, pc}
    47e2:	bf00      	nop
    47e4:	1fff3824 	.word	0x1fff3824
    47e8:	1fff0f08 	.word	0x1fff0f08
    47ec:	1fff616c 	.word	0x1fff616c
    47f0:	0000d3ec 	.word	0x0000d3ec
    47f4:	0000d410 	.word	0x0000d410
    47f8:	1fff6168 	.word	0x1fff6168
    47fc:	1fff6170 	.word	0x1fff6170
    4800:	1fff628c 	.word	0x1fff628c
    4804:	1fff61f8 	.word	0x1fff61f8
    4808:	1fff6140 	.word	0x1fff6140
    480c:	1fff6160 	.word	0x1fff6160
    4810:	1fff6148 	.word	0x1fff6148
    4814:	1fff0f00 	.word	0x1fff0f00
    4818:	1fff61f4 	.word	0x1fff61f4
    481c:	1fff615c 	.word	0x1fff615c
    4820:	1fff6158 	.word	0x1fff6158
    4824:	1fff61ec 	.word	0x1fff61ec
    4828:	1fff61f0 	.word	0x1fff61f0
    482c:	1fff6274 	.word	0x1fff6274

00004830 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    4830:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4832:	4d23      	ldr	r5, [pc, #140]	; (48c0 <now()+0x90>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    4834:	4e23      	ldr	r6, [pc, #140]	; (48c4 <now()+0x94>)
    4836:	682b      	ldr	r3, [r5, #0]
    4838:	6832      	ldr	r2, [r6, #0]
    483a:	4f23      	ldr	r7, [pc, #140]	; (48c8 <now()+0x98>)
time_t now() {
    483c:	b083      	sub	sp, #12
    483e:	9300      	str	r3, [sp, #0]
	return ret;
    4840:	9b00      	ldr	r3, [sp, #0]
  while (millis() - prevMillis >= 1000) {
    4842:	1a9b      	subs	r3, r3, r2
    4844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    4848:	d337      	bcc.n	48ba <now()+0x8a>
    484a:	6839      	ldr	r1, [r7, #0]
    484c:	3101      	adds	r1, #1
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    484e:	682c      	ldr	r4, [r5, #0]
    4850:	9400      	str	r4, [sp, #0]
	return ret;
    4852:	9b00      	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    4854:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
  while (millis() - prevMillis >= 1000) {
    4858:	1a9b      	subs	r3, r3, r2
    485a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    485e:	4608      	mov	r0, r1
    4860:	f101 0101 	add.w	r1, r1, #1
    4864:	d2f3      	bcs.n	484e <now()+0x1e>
    4866:	6032      	str	r2, [r6, #0]
    4868:	6038      	str	r0, [r7, #0]
    486a:	9400      	str	r4, [sp, #0]
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    486c:	4c17      	ldr	r4, [pc, #92]	; (48cc <now()+0x9c>)
    486e:	6823      	ldr	r3, [r4, #0]
    4870:	4283      	cmp	r3, r0
    4872:	d811      	bhi.n	4898 <now()+0x68>
    if (getTimePtr != 0) {
    4874:	4b16      	ldr	r3, [pc, #88]	; (48d0 <now()+0xa0>)
    4876:	681b      	ldr	r3, [r3, #0]
    4878:	b173      	cbz	r3, 4898 <now()+0x68>
      time_t t = getTimePtr();
    487a:	4798      	blx	r3
      if (t != 0) {
    487c:	4301      	orrs	r1, r0
    487e:	d00e      	beq.n	489e <now()+0x6e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4880:	682b      	ldr	r3, [r5, #0]
    4882:	9301      	str	r3, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    4884:	4b13      	ldr	r3, [pc, #76]	; (48d4 <now()+0xa4>)
	return ret;
    4886:	9a01      	ldr	r2, [sp, #4]
    4888:	681b      	ldr	r3, [r3, #0]
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    488a:	6032      	str	r2, [r6, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    488c:	4403      	add	r3, r0
    488e:	6023      	str	r3, [r4, #0]
  Status = timeSet;
    4890:	4b11      	ldr	r3, [pc, #68]	; (48d8 <now()+0xa8>)
  sysTime = (uint32_t)t;  
    4892:	6038      	str	r0, [r7, #0]
  Status = timeSet;
    4894:	2202      	movs	r2, #2
    4896:	701a      	strb	r2, [r3, #0]
}
    4898:	2100      	movs	r1, #0
    489a:	b003      	add	sp, #12
    489c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    489e:	490e      	ldr	r1, [pc, #56]	; (48d8 <now()+0xa8>)
        nextSyncTime = sysTime + syncInterval;
    48a0:	4a0c      	ldr	r2, [pc, #48]	; (48d4 <now()+0xa4>)
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    48a2:	780b      	ldrb	r3, [r1, #0]
        nextSyncTime = sysTime + syncInterval;
    48a4:	6838      	ldr	r0, [r7, #0]
    48a6:	6812      	ldr	r2, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    48a8:	3b00      	subs	r3, #0
    48aa:	bf18      	it	ne
    48ac:	2301      	movne	r3, #1
        nextSyncTime = sysTime + syncInterval;
    48ae:	4402      	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    48b0:	700b      	strb	r3, [r1, #0]
}
    48b2:	2100      	movs	r1, #0
        nextSyncTime = sysTime + syncInterval;
    48b4:	6022      	str	r2, [r4, #0]
}
    48b6:	b003      	add	sp, #12
    48b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48ba:	6838      	ldr	r0, [r7, #0]
    48bc:	e7d6      	b.n	486c <now()+0x3c>
    48be:	bf00      	nop
    48c0:	1fff628c 	.word	0x1fff628c
    48c4:	1fff6278 	.word	0x1fff6278
    48c8:	1fff6284 	.word	0x1fff6284
    48cc:	1fff627c 	.word	0x1fff627c
    48d0:	1fff6288 	.word	0x1fff6288
    48d4:	1fff0768 	.word	0x1fff0768
    48d8:	1fff6280 	.word	0x1fff6280

000048dc <setSyncProvider(long long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    48dc:	4a03      	ldr	r2, [pc, #12]	; (48ec <setSyncProvider(long long (*)())+0x10>)
  getTimePtr = getTimeFunction;  
    48de:	4904      	ldr	r1, [pc, #16]	; (48f0 <setSyncProvider(long long (*)())+0x14>)
  nextSyncTime = sysTime;
    48e0:	4b04      	ldr	r3, [pc, #16]	; (48f4 <setSyncProvider(long long (*)())+0x18>)
    48e2:	6812      	ldr	r2, [r2, #0]
  getTimePtr = getTimeFunction;  
    48e4:	6008      	str	r0, [r1, #0]
  nextSyncTime = sysTime;
    48e6:	601a      	str	r2, [r3, #0]
  now(); // this will sync the clock
    48e8:	f7ff bfa2 	b.w	4830 <now()>
    48ec:	1fff6284 	.word	0x1fff6284
    48f0:	1fff6288 	.word	0x1fff6288
    48f4:	1fff627c 	.word	0x1fff627c

000048f8 <setSyncInterval(long long)>:
}

void setSyncInterval(time_t interval){ // set the number of seconds between re-sync
  syncInterval = (uint32_t)interval;
  nextSyncTime = sysTime + syncInterval;
    48f8:	4b03      	ldr	r3, [pc, #12]	; (4908 <setSyncInterval(long long)+0x10>)
  syncInterval = (uint32_t)interval;
    48fa:	4904      	ldr	r1, [pc, #16]	; (490c <setSyncInterval(long long)+0x14>)
  nextSyncTime = sysTime + syncInterval;
    48fc:	681b      	ldr	r3, [r3, #0]
    48fe:	4a04      	ldr	r2, [pc, #16]	; (4910 <setSyncInterval(long long)+0x18>)
  syncInterval = (uint32_t)interval;
    4900:	6008      	str	r0, [r1, #0]
  nextSyncTime = sysTime + syncInterval;
    4902:	4403      	add	r3, r0
    4904:	6013      	str	r3, [r2, #0]
}
    4906:	4770      	bx	lr
    4908:	1fff6284 	.word	0x1fff6284
    490c:	1fff0768 	.word	0x1fff0768
    4910:	1fff627c 	.word	0x1fff627c

00004914 <OneButton::OneButton(int, bool, bool)>:
 * Initialize the OneButton library.
 * @param pin The pin to be used for input from a momentary button.
 * @param activeLow Set to true when the input level is LOW when the button is pressed, Default is true.
 * @param pullupActive Activate the internal pullup when available. Default is true.
 */
OneButton::OneButton(const int pin, const boolean activeLow, const bool pullupActive)
    4914:	b538      	push	{r3, r4, r5, lr}
    4916:	4604      	mov	r4, r0
    // the button connects the input pin to GND when pressed.
    _buttonPressed = LOW;

  } else {
    // the button connects the input pin to VCC when pressed.
    _buttonPressed = HIGH;
    4918:	f082 0201 	eor.w	r2, r2, #1
OneButton::OneButton(const int pin, const boolean activeLow, const bool pullupActive)
    491c:	4608      	mov	r0, r1
    491e:	2132      	movs	r1, #50	; 0x32
    _buttonPressed = HIGH;
    4920:	6122      	str	r2, [r4, #16]
OneButton::OneButton(const int pin, const boolean activeLow, const bool pullupActive)
    4922:	6061      	str	r1, [r4, #4]
    4924:	2200      	movs	r2, #0
    4926:	f04f 31ff 	mov.w	r1, #4294967295
    492a:	f44f 75c8 	mov.w	r5, #400	; 0x190
    492e:	6162      	str	r2, [r4, #20]
    4930:	61a2      	str	r2, [r4, #24]
    4932:	61e2      	str	r2, [r4, #28]
    4934:	6222      	str	r2, [r4, #32]
    4936:	6262      	str	r2, [r4, #36]	; 0x24
    4938:	62a2      	str	r2, [r4, #40]	; 0x28
    493a:	62e2      	str	r2, [r4, #44]	; 0x2c
    493c:	6322      	str	r2, [r4, #48]	; 0x30
    493e:	6362      	str	r2, [r4, #52]	; 0x34
    4940:	63a2      	str	r2, [r4, #56]	; 0x38
    4942:	63e2      	str	r2, [r4, #60]	; 0x3c
    4944:	6422      	str	r2, [r4, #64]	; 0x40
    4946:	6462      	str	r2, [r4, #68]	; 0x44
    4948:	64a2      	str	r2, [r4, #72]	; 0x48
    494a:	64e2      	str	r2, [r4, #76]	; 0x4c
    494c:	6522      	str	r2, [r4, #80]	; 0x50
    494e:	6562      	str	r2, [r4, #84]	; 0x54
    4950:	65a2      	str	r2, [r4, #88]	; 0x58
    4952:	65e2      	str	r2, [r4, #92]	; 0x5c
    4954:	6621      	str	r1, [r4, #96]	; 0x60
    4956:	6661      	str	r1, [r4, #100]	; 0x64
    4958:	66a2      	str	r2, [r4, #104]	; 0x68
    495a:	2101      	movs	r1, #1
    495c:	66e2      	str	r2, [r4, #108]	; 0x6c
    495e:	6722      	str	r2, [r4, #112]	; 0x70
    4960:	6762      	str	r2, [r4, #116]	; 0x74
    4962:	f44f 7248 	mov.w	r2, #800	; 0x320
    4966:	60a5      	str	r5, [r4, #8]
    4968:	67a1      	str	r1, [r4, #120]	; 0x78
  _pin = pin;
    496a:	6020      	str	r0, [r4, #0]
OneButton::OneButton(const int pin, const boolean activeLow, const bool pullupActive)
    496c:	60e2      	str	r2, [r4, #12]
  }

  if (pullupActive) {
    496e:	b12b      	cbz	r3, 497c <OneButton::OneButton(int, bool, bool)+0x68>
    // use the given pin as input and activate internal PULLUP resistor.
    pinMode(pin, INPUT_PULLUP);
    4970:	2102      	movs	r1, #2
    4972:	b2c0      	uxtb	r0, r0
    4974:	f000 fb80 	bl	5078 <pinMode>
  } else {
    // use the given pin as input
    pinMode(pin, INPUT);
  }
} // OneButton
    4978:	4620      	mov	r0, r4
    497a:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(pin, INPUT);
    497c:	4619      	mov	r1, r3
    497e:	b2c0      	uxtb	r0, r0
    4980:	f000 fb7a 	bl	5078 <pinMode>
} // OneButton
    4984:	4620      	mov	r0, r4
    4986:	bd38      	pop	{r3, r4, r5, pc}

00004988 <OneButton::attachClick(void (*)())>:


// save function for click event
void OneButton::attachClick(callbackFunction newFunction)
{
  _clickFunc = newFunction;
    4988:	6141      	str	r1, [r0, #20]
} // attachClick
    498a:	4770      	bx	lr

0000498c <OneButton::attachLongPressStart(void (*)())>:


// save function for longPressStart event
void OneButton::attachLongPressStart(callbackFunction newFunction)
{
  _longPressStartFunc = newFunction;
    498c:	6381      	str	r1, [r0, #56]	; 0x38
} // attachLongPressStart
    498e:	4770      	bx	lr

00004990 <OneButton::attachLongPressStop(void (*)())>:


// save function for longPressStop event
void OneButton::attachLongPressStop(callbackFunction newFunction)
{
  _longPressStopFunc = newFunction;
    4990:	6441      	str	r1, [r0, #68]	; 0x44
} // attachLongPressStop
    4992:	4770      	bx	lr

00004994 <OneButton::_fsm(bool)>:

/**
 * @brief Run the finite state machine (FSM) using the given level.
 */
void OneButton::_fsm(bool activeLevel)
{
    4994:	b510      	push	{r4, lr}
    4996:	4604      	mov	r4, r0
  unsigned long waitTime = (now - _startTime);
    4998:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    499a:	6f23      	ldr	r3, [r4, #112]	; 0x70

  // Implementation of the state machine
  switch (_state) {
    499c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  unsigned long waitTime = (now - _startTime);
    499e:	1ac3      	subs	r3, r0, r3
  switch (_state) {
    49a0:	2a07      	cmp	r2, #7
    49a2:	d811      	bhi.n	49c8 <OneButton::_fsm(bool)+0x34>
    49a4:	e8df f002 	tbb	[pc, r2]
    49a8:	26201b13 	.word	0x26201b13
    49ac:	042b1010 	.word	0x042b1010
    break;

  case OneButton::OCS_PRESSEND:
    // button was released.

    if (_longPressStopFunc) _longPressStopFunc();
    49b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    49b2:	b103      	cbz	r3, 49b6 <OneButton::_fsm(bool)+0x22>
    49b4:	4798      	blx	r3
    if (_paramLongPressStopFunc) _paramLongPressStopFunc(_longPressStopFuncParam);
    49b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    49b8:	b10b      	cbz	r3, 49be <OneButton::_fsm(bool)+0x2a>
    49ba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    49bc:	4798      	blx	r3
  _state = OneButton::OCS_INIT;
    49be:	2300      	movs	r3, #0
    49c0:	65e3      	str	r3, [r4, #92]	; 0x5c
  _nClicks = 0;
    49c2:	6763      	str	r3, [r4, #116]	; 0x74
  _startTime = 0;
    49c4:	6723      	str	r3, [r4, #112]	; 0x70
    // unknown state detected -> reset state machine
    _newState(OneButton::OCS_INIT);
    break;
  } // if

} // OneButton.tick()
    49c6:	bd10      	pop	{r4, pc}
  _state = nextState;
    49c8:	2300      	movs	r3, #0
    49ca:	65e3      	str	r3, [r4, #92]	; 0x5c
} // OneButton.tick()
    49cc:	bd10      	pop	{r4, pc}
    if (activeLevel) {
    49ce:	2900      	cmp	r1, #0
    49d0:	d0f9      	beq.n	49c6 <OneButton::_fsm(bool)+0x32>
  _state = nextState;
    49d2:	2201      	movs	r2, #1
      _nClicks = 0;
    49d4:	2300      	movs	r3, #0
  _state = nextState;
    49d6:	65e2      	str	r2, [r4, #92]	; 0x5c
      _startTime = now; // remember starting time
    49d8:	6720      	str	r0, [r4, #112]	; 0x70
      _nClicks = 0;
    49da:	6763      	str	r3, [r4, #116]	; 0x74
} // OneButton.tick()
    49dc:	bd10      	pop	{r4, pc}
    if (!activeLevel) {
    49de:	b999      	cbnz	r1, 4a08 <OneButton::_fsm(bool)+0x74>
  _state = nextState;
    49e0:	2302      	movs	r3, #2
    49e2:	65e3      	str	r3, [r4, #92]	; 0x5c
      _startTime = now; // remember starting time
    49e4:	6720      	str	r0, [r4, #112]	; 0x70
} // OneButton.tick()
    49e6:	bd10      	pop	{r4, pc}
    _nClicks++;
    49e8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  _state = nextState;
    49ea:	2203      	movs	r2, #3
    _nClicks++;
    49ec:	3301      	adds	r3, #1
    49ee:	6763      	str	r3, [r4, #116]	; 0x74
  _state = nextState;
    49f0:	65e2      	str	r2, [r4, #92]	; 0x5c
} // OneButton.tick()
    49f2:	bd10      	pop	{r4, pc}
    if (activeLevel) {
    49f4:	b1a9      	cbz	r1, 4a22 <OneButton::_fsm(bool)+0x8e>
  _state = nextState;
    49f6:	2301      	movs	r3, #1
    49f8:	65e3      	str	r3, [r4, #92]	; 0x5c
      _startTime = now; // remember starting time
    49fa:	6720      	str	r0, [r4, #112]	; 0x70
} // OneButton.tick()
    49fc:	bd10      	pop	{r4, pc}
    if (!activeLevel) {
    49fe:	bb21      	cbnz	r1, 4a4a <OneButton::_fsm(bool)+0xb6>
  _state = nextState;
    4a00:	2307      	movs	r3, #7
    4a02:	65e3      	str	r3, [r4, #92]	; 0x5c
      _startTime = now;
    4a04:	6720      	str	r0, [r4, #112]	; 0x70
} // OneButton.tick()
    4a06:	bd10      	pop	{r4, pc}
    } else if ((activeLevel) && (waitTime > _press_ms)) {
    4a08:	68e2      	ldr	r2, [r4, #12]
    4a0a:	429a      	cmp	r2, r3
    4a0c:	d2db      	bcs.n	49c6 <OneButton::_fsm(bool)+0x32>
      if (_longPressStartFunc) _longPressStartFunc();
    4a0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4a10:	b103      	cbz	r3, 4a14 <OneButton::_fsm(bool)+0x80>
    4a12:	4798      	blx	r3
      if (_paramLongPressStartFunc) _paramLongPressStartFunc(_longPressStartFuncParam);
    4a14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4a16:	b10b      	cbz	r3, 4a1c <OneButton::_fsm(bool)+0x88>
    4a18:	6c20      	ldr	r0, [r4, #64]	; 0x40
    4a1a:	4798      	blx	r3
  _state = nextState;
    4a1c:	2306      	movs	r3, #6
    4a1e:	65e3      	str	r3, [r4, #92]	; 0x5c
} // OneButton.tick()
    4a20:	bd10      	pop	{r4, pc}
    } else if ((waitTime >= _click_ms) || (_nClicks == _maxClicks)) {
    4a22:	68a2      	ldr	r2, [r4, #8]
    4a24:	429a      	cmp	r2, r3
    4a26:	d91a      	bls.n	4a5e <OneButton::_fsm(bool)+0xca>
    4a28:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    4a2a:	6f62      	ldr	r2, [r4, #116]	; 0x74
    4a2c:	429a      	cmp	r2, r3
    4a2e:	d1ca      	bne.n	49c6 <OneButton::_fsm(bool)+0x32>
      if (_nClicks == 1) {
    4a30:	2b01      	cmp	r3, #1
    4a32:	d016      	beq.n	4a62 <OneButton::_fsm(bool)+0xce>
      } else if (_nClicks == 2) {
    4a34:	2b02      	cmp	r3, #2
    4a36:	d01d      	beq.n	4a74 <OneButton::_fsm(bool)+0xe0>
        if (_multiClickFunc) _multiClickFunc();
    4a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4a3a:	b103      	cbz	r3, 4a3e <OneButton::_fsm(bool)+0xaa>
    4a3c:	4798      	blx	r3
        if (_paramMultiClickFunc) _paramMultiClickFunc(_multiClickFuncParam);
    4a3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4a40:	2b00      	cmp	r3, #0
    4a42:	d0bc      	beq.n	49be <OneButton::_fsm(bool)+0x2a>
    4a44:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4a46:	4798      	blx	r3
    4a48:	e7b9      	b.n	49be <OneButton::_fsm(bool)+0x2a>
      if (_duringLongPressFunc) _duringLongPressFunc();
    4a4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    4a4c:	b103      	cbz	r3, 4a50 <OneButton::_fsm(bool)+0xbc>
    4a4e:	4798      	blx	r3
      if (_paramDuringLongPressFunc) _paramDuringLongPressFunc(_duringLongPressFuncParam);
    4a50:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4a52:	2b00      	cmp	r3, #0
    4a54:	d0b7      	beq.n	49c6 <OneButton::_fsm(bool)+0x32>
    4a56:	6da0      	ldr	r0, [r4, #88]	; 0x58
} // OneButton.tick()
    4a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      if (_paramDuringLongPressFunc) _paramDuringLongPressFunc(_duringLongPressFuncParam);
    4a5c:	4718      	bx	r3
    _nClicks++;
    4a5e:	6f63      	ldr	r3, [r4, #116]	; 0x74
    4a60:	e7e6      	b.n	4a30 <OneButton::_fsm(bool)+0x9c>
        if (_clickFunc) _clickFunc();
    4a62:	6963      	ldr	r3, [r4, #20]
    4a64:	b103      	cbz	r3, 4a68 <OneButton::_fsm(bool)+0xd4>
    4a66:	4798      	blx	r3
        if (_paramClickFunc) _paramClickFunc(_clickFuncParam);
    4a68:	69a3      	ldr	r3, [r4, #24]
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d0a7      	beq.n	49be <OneButton::_fsm(bool)+0x2a>
    4a6e:	69e0      	ldr	r0, [r4, #28]
    4a70:	4798      	blx	r3
    4a72:	e7a4      	b.n	49be <OneButton::_fsm(bool)+0x2a>
        if (_doubleClickFunc) _doubleClickFunc();
    4a74:	6a23      	ldr	r3, [r4, #32]
    4a76:	b103      	cbz	r3, 4a7a <OneButton::_fsm(bool)+0xe6>
    4a78:	4798      	blx	r3
        if (_paramDoubleClickFunc) _paramDoubleClickFunc(_doubleClickFuncParam);
    4a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	d09e      	beq.n	49be <OneButton::_fsm(bool)+0x2a>
    4a80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4a82:	4798      	blx	r3
    4a84:	e79b      	b.n	49be <OneButton::_fsm(bool)+0x2a>
    4a86:	bf00      	nop

00004a88 <OneButton::tick()>:
{
    4a88:	b510      	push	{r4, lr}
    4a8a:	4604      	mov	r4, r0
  if (_pin >= 0) {
    4a8c:	6800      	ldr	r0, [r0, #0]
    4a8e:	2800      	cmp	r0, #0
{
    4a90:	b082      	sub	sp, #8
  if (_pin >= 0) {
    4a92:	da01      	bge.n	4a98 <OneButton::tick()+0x10>
} // tick()
    4a94:	b002      	add	sp, #8
    4a96:	bd10      	pop	{r4, pc}
    _fsm(debounce(digitalRead(_pin)) == _buttonPressed);
    4a98:	b2c0      	uxtb	r0, r0
    4a9a:	f000 fadf 	bl	505c <digitalRead>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4a9e:	4b0f      	ldr	r3, [pc, #60]	; (4adc <OneButton::tick()+0x54>)
    if (_lastDebouncePinLevel == value) {
    4aa0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    4aa2:	681b      	ldr	r3, [r3, #0]
    4aa4:	9301      	str	r3, [sp, #4]
	return ret;
    4aa6:	9b01      	ldr	r3, [sp, #4]
    now = millis(); // current (relative) time in msecs.
    4aa8:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (_lastDebouncePinLevel == value) {
    4aaa:	4290      	cmp	r0, r2
    _fsm(debounce(digitalRead(_pin)) == _buttonPressed);
    4aac:	4601      	mov	r1, r0
    if (_lastDebouncePinLevel == value) {
    4aae:	d00d      	beq.n	4acc <OneButton::tick()+0x44>
    return debouncedPinLevel;
    4ab0:	6e21      	ldr	r1, [r4, #96]	; 0x60
      _lastDebouncePinLevel = value;
    4ab2:	6660      	str	r0, [r4, #100]	; 0x64
      _lastDebounceTime = now;
    4ab4:	66a3      	str	r3, [r4, #104]	; 0x68
    _fsm(debounce(digitalRead(_pin)) == _buttonPressed);
    4ab6:	6923      	ldr	r3, [r4, #16]
    4ab8:	1a59      	subs	r1, r3, r1
    4aba:	fab1 f181 	clz	r1, r1
    4abe:	4620      	mov	r0, r4
    4ac0:	0949      	lsrs	r1, r1, #5
} // tick()
    4ac2:	b002      	add	sp, #8
    4ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _fsm(debounce(digitalRead(_pin)) == _buttonPressed);
    4ac8:	f7ff bf64 	b.w	4994 <OneButton::_fsm(bool)>
      if (now - _lastDebounceTime >= _debounce_ms)
    4acc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    4ace:	6862      	ldr	r2, [r4, #4]
    4ad0:	1a1b      	subs	r3, r3, r0
    4ad2:	4293      	cmp	r3, r2
    return debouncedPinLevel;
    4ad4:	bf34      	ite	cc
    4ad6:	6e21      	ldrcc	r1, [r4, #96]	; 0x60
        debouncedPinLevel = value;
    4ad8:	6621      	strcs	r1, [r4, #96]	; 0x60
    4ada:	e7ec      	b.n	4ab6 <OneButton::tick()+0x2e>
    4adc:	1fff628c 	.word	0x1fff628c

00004ae0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    4ae0:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    4ae2:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    4ae4:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    4ae6:	bf08      	it	eq
    4ae8:	220a      	moveq	r2, #10
	if (n == 0) {
    4aea:	b3a1      	cbz	r1, 4b56 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		i = sizeof(buf) - 1;
    4aec:	f04f 0e21 	mov.w	lr, #33	; 0x21
    4af0:	e002      	b.n	4af8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
			i--;
    4af2:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    4af6:	4629      	mov	r1, r5
			digit = n % base;
    4af8:	fbb1 f5f2 	udiv	r5, r1, r2
    4afc:	fb02 1415 	mls	r4, r2, r5, r1
    4b00:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4b04:	2c09      	cmp	r4, #9
    4b06:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    4b0a:	bf98      	it	ls
    4b0c:	fa5f fc84 	uxtbls.w	ip, r4
    4b10:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    4b14:	bf88      	it	hi
    4b16:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    4b1a:	446c      	add	r4, sp
    4b1c:	bf88      	it	hi
    4b1e:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    4b22:	4291      	cmp	r1, r2
			i--;
    4b24:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4b28:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    4b2c:	d2e1      	bcs.n	4af2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    4b2e:	b14b      	cbz	r3, 4b44 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    4b30:	f10e 3eff 	add.w	lr, lr, #4294967295
    4b34:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    4b38:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    4b3c:	446b      	add	r3, sp
    4b3e:	222d      	movs	r2, #45	; 0x2d
    4b40:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    4b44:	6803      	ldr	r3, [r0, #0]
    4b46:	a901      	add	r1, sp, #4
    4b48:	685b      	ldr	r3, [r3, #4]
    4b4a:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    4b4e:	4471      	add	r1, lr
    4b50:	4798      	blx	r3
}
    4b52:	b00a      	add	sp, #40	; 0x28
    4b54:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    4b56:	2230      	movs	r2, #48	; 0x30
    4b58:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    4b5c:	f04f 0e21 	mov.w	lr, #33	; 0x21
    4b60:	e7e5      	b.n	4b2e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    4b62:	bf00      	nop

00004b64 <Print::print(long)>:
	if (n < 0) {
    4b64:	2900      	cmp	r1, #0
		n = -n;
    4b66:	bfba      	itte	lt
    4b68:	4249      	neglt	r1, r1
		sign = '-';
    4b6a:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    4b6c:	2300      	movge	r3, #0
	if (base == 0) {
    4b6e:	220a      	movs	r2, #10
    4b70:	f7ff bfb6 	b.w	4ae0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00004b74 <Print::println()>:
{
    4b74:	b500      	push	{lr}
	return write(buf, 2);
    4b76:	6803      	ldr	r3, [r0, #0]
{
    4b78:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    4b7a:	f640 220d 	movw	r2, #2573	; 0xa0d
    4b7e:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    4b82:	685b      	ldr	r3, [r3, #4]
    4b84:	2202      	movs	r2, #2
    4b86:	a901      	add	r1, sp, #4
    4b88:	4798      	blx	r3
}
    4b8a:	b003      	add	sp, #12
    4b8c:	f85d fb04 	ldr.w	pc, [sp], #4

00004b90 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    4b90:	4b03      	ldr	r3, [pc, #12]	; (4ba0 <_write+0x10>)
    4b92:	2802      	cmp	r0, #2
    4b94:	bf88      	it	hi
    4b96:	4603      	movhi	r3, r0
    4b98:	4618      	mov	r0, r3
    4b9a:	681b      	ldr	r3, [r3, #0]
    4b9c:	685b      	ldr	r3, [r3, #4]
    4b9e:	4718      	bx	r3
    4ba0:	1fff0770 	.word	0x1fff0770

00004ba4 <Print::printf(char const*, ...)>:
{
    4ba4:	b40e      	push	{r1, r2, r3}
    4ba6:	b500      	push	{lr}
    4ba8:	b082      	sub	sp, #8
    4baa:	aa03      	add	r2, sp, #12
    4bac:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    4bb0:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    4bb2:	f002 fd07 	bl	75c4 <vdprintf>
}
    4bb6:	b002      	add	sp, #8
    4bb8:	f85d eb04 	ldr.w	lr, [sp], #4
    4bbc:	b003      	add	sp, #12
    4bbe:	4770      	bx	lr

00004bc0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    4bc0:	b932      	cbnz	r2, 4bd0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    4bc2:	6803      	ldr	r3, [r0, #0]
{
    4bc4:	b500      	push	{lr}
		return write((uint8_t)n);
    4bc6:	681b      	ldr	r3, [r3, #0]
}
    4bc8:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    4bcc:	b2c9      	uxtb	r1, r1
    4bce:	4718      	bx	r3
    4bd0:	f7ff bf86 	b.w	4ae0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00004bd4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    4bd4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    4bd6:	f7fc fd93 	bl	1700 <setup>
	while (1) {
		loop();
    4bda:	f7fe fa43 	bl	3064 <loop>
		yield();
    4bde:	f001 f947 	bl	5e70 <yield>
	while (1) {
    4be2:	e7fa      	b.n	4bda <main+0x6>

00004be4 <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    4be4:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    4be6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    4bea:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    4bee:	d16f      	bne.n	4cd0 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4bf0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    4bf2:	d341      	bcc.n	4c78 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4bf4:	f851 3b04 	ldr.w	r3, [r1], #4
    4bf8:	f840 3b04 	str.w	r3, [r0], #4
    4bfc:	f851 3b04 	ldr.w	r3, [r1], #4
    4c00:	f840 3b04 	str.w	r3, [r0], #4
    4c04:	f851 3b04 	ldr.w	r3, [r1], #4
    4c08:	f840 3b04 	str.w	r3, [r0], #4
    4c0c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c10:	f840 3b04 	str.w	r3, [r0], #4
    4c14:	f851 3b04 	ldr.w	r3, [r1], #4
    4c18:	f840 3b04 	str.w	r3, [r0], #4
    4c1c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c20:	f840 3b04 	str.w	r3, [r0], #4
    4c24:	f851 3b04 	ldr.w	r3, [r1], #4
    4c28:	f840 3b04 	str.w	r3, [r0], #4
    4c2c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c30:	f840 3b04 	str.w	r3, [r0], #4
    4c34:	f851 3b04 	ldr.w	r3, [r1], #4
    4c38:	f840 3b04 	str.w	r3, [r0], #4
    4c3c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c40:	f840 3b04 	str.w	r3, [r0], #4
    4c44:	f851 3b04 	ldr.w	r3, [r1], #4
    4c48:	f840 3b04 	str.w	r3, [r0], #4
    4c4c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c50:	f840 3b04 	str.w	r3, [r0], #4
    4c54:	f851 3b04 	ldr.w	r3, [r1], #4
    4c58:	f840 3b04 	str.w	r3, [r0], #4
    4c5c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c60:	f840 3b04 	str.w	r3, [r0], #4
    4c64:	f851 3b04 	ldr.w	r3, [r1], #4
    4c68:	f840 3b04 	str.w	r3, [r0], #4
    4c6c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c70:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4c74:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    4c76:	d2bd      	bcs.n	4bf4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    4c78:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    4c7a:	d311      	bcc.n	4ca0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4c7c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c80:	f840 3b04 	str.w	r3, [r0], #4
    4c84:	f851 3b04 	ldr.w	r3, [r1], #4
    4c88:	f840 3b04 	str.w	r3, [r0], #4
    4c8c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c90:	f840 3b04 	str.w	r3, [r0], #4
    4c94:	f851 3b04 	ldr.w	r3, [r1], #4
    4c98:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    4c9c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    4c9e:	d2ed      	bcs.n	4c7c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    4ca0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    4ca2:	d305      	bcc.n	4cb0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    4ca4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    4ca8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    4cac:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    4cae:	d2f9      	bcs.n	4ca4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    4cb0:	3204      	adds	r2, #4
	beq	.Ldone
    4cb2:	d00a      	beq.n	4cca <memcpy+0xe6>

	lsls	r2, r2, #31
    4cb4:	07d2      	lsls	r2, r2, #31
	itt ne
    4cb6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4cb8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4cbc:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    4cc0:	d303      	bcc.n	4cca <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    4cc2:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    4cc4:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    4cc6:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    4cc8:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    4cca:	bc01      	pop	{r0}
#endif
	bx	lr
    4ccc:	4770      	bx	lr
    4cce:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    4cd0:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    4cd2:	d34a      	bcc.n	4d6a <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    4cd4:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    4cd8:	d011      	beq.n	4cfe <memcpy+0x11a>

	rsb	r3, #4
    4cda:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    4cde:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    4ce0:	07db      	lsls	r3, r3, #31
	itt ne
    4ce2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4ce4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4ce8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    4cec:	d307      	bcc.n	4cfe <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    4cee:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    4cf2:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    4cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    4cfa:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    4cfe:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    4d02:	f43f af75 	beq.w	4bf0 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    4d06:	b430      	push	{r4, r5}
	subs	r2, #4
    4d08:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    4d0a:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    4d0c:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    4d10:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    4d14:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    4d16:	d019      	beq.n	4d4c <memcpy+0x168>
	cmp	r3, #3
    4d18:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    4d1a:	d00b      	beq.n	4d34 <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    4d1c:	0a24      	lsrs	r4, r4, #8
    4d1e:	f851 3b04 	ldr.w	r3, [r1], #4
    4d22:	061d      	lsls	r5, r3, #24
    4d24:	ea44 0405 	orr.w	r4, r4, r5
    4d28:	f840 4b04 	str.w	r4, [r0], #4
    4d2c:	461c      	mov	r4, r3
    4d2e:	3a04      	subs	r2, #4
    4d30:	d2f4      	bcs.n	4d1c <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    4d32:	e016      	b.n	4d62 <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    4d34:	0e24      	lsrs	r4, r4, #24
    4d36:	f851 3b04 	ldr.w	r3, [r1], #4
    4d3a:	021d      	lsls	r5, r3, #8
    4d3c:	ea44 0405 	orr.w	r4, r4, r5
    4d40:	f840 4b04 	str.w	r4, [r0], #4
    4d44:	461c      	mov	r4, r3
    4d46:	3a04      	subs	r2, #4
    4d48:	d2f4      	bcs.n	4d34 <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    4d4a:	e00a      	b.n	4d62 <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    4d4c:	0c24      	lsrs	r4, r4, #16
    4d4e:	f851 3b04 	ldr.w	r3, [r1], #4
    4d52:	041d      	lsls	r5, r3, #16
    4d54:	ea44 0405 	orr.w	r4, r4, r5
    4d58:	f840 4b04 	str.w	r4, [r0], #4
    4d5c:	461c      	mov	r4, r3
    4d5e:	3a04      	subs	r2, #4
    4d60:	d2f4      	bcs.n	4d4c <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    4d62:	3204      	adds	r2, #4
	subs	r1, ip
    4d64:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    4d68:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    4d6a:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    4d6c:	d3a0      	bcc.n	4cb0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    4d6e:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    4d70:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    4d74:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    4d78:	d2f9      	bcs.n	4d6e <memcpy+0x18a>

	ldrb	r3, [r1]
    4d7a:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    4d7c:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    4d7e:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    4d80:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    4d82:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    4d84:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    4d86:	bc01      	pop	{r0}
#endif
	bx	lr
    4d88:	4770      	bx	lr
    4d8a:	bf00      	nop

00004d8c <fault_isr>:
{
    4d8c:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4d8e:	4c0f      	ldr	r4, [pc, #60]	; (4dcc <fault_isr+0x40>)
    4d90:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d92:	0358      	lsls	r0, r3, #13
    4d94:	d40d      	bmi.n	4db2 <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    4d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d98:	0559      	lsls	r1, r3, #21
    4d9a:	d40f      	bmi.n	4dbc <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4d9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d9e:	051a      	lsls	r2, r3, #20
    4da0:	d411      	bmi.n	4dc6 <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    4da2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4da4:	04db      	lsls	r3, r3, #19
    4da6:	d5f3      	bpl.n	4d90 <fault_isr+0x4>
    4da8:	f000 f812 	bl	4dd0 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4dac:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4dae:	0358      	lsls	r0, r3, #13
    4db0:	d5f1      	bpl.n	4d96 <fault_isr+0xa>
    4db2:	f000 fa7b 	bl	52ac <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    4db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4db8:	0559      	lsls	r1, r3, #21
    4dba:	d5ef      	bpl.n	4d9c <fault_isr+0x10>
    4dbc:	f000 f808 	bl	4dd0 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4dc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4dc2:	051a      	lsls	r2, r3, #20
    4dc4:	d5ed      	bpl.n	4da2 <fault_isr+0x16>
    4dc6:	f000 f803 	bl	4dd0 <unused_isr>
    4dca:	e7ea      	b.n	4da2 <fault_isr+0x16>
    4dcc:	40048000 	.word	0x40048000

00004dd0 <unused_isr>:
{
    4dd0:	b508      	push	{r3, lr}
	fault_isr();
    4dd2:	f7ff ffdb 	bl	4d8c <fault_isr>
    4dd6:	bf00      	nop

00004dd8 <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4dd8:	4b01      	ldr	r3, [pc, #4]	; (4de0 <startup_early_hook+0x8>)
    4dda:	2210      	movs	r2, #16
    4ddc:	801a      	strh	r2, [r3, #0]
}
    4dde:	4770      	bx	lr
    4de0:	40052000 	.word	0x40052000

00004de4 <startup_late_hook>:
static void startup_default_late_hook(void) {}
    4de4:	4770      	bx	lr
    4de6:	bf00      	nop

00004de8 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    4de8:	490b      	ldr	r1, [pc, #44]	; (4e18 <_sbrk+0x30>)
    4dea:	680a      	ldr	r2, [r1, #0]
	if (incr != 0) {
    4dec:	b148      	cbz	r0, 4e02 <_sbrk+0x1a>
{
    4dee:	b508      	push	{r3, lr}
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    4df0:	46ec      	mov	ip, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    4df2:	1813      	adds	r3, r2, r0
    4df4:	f5ac 5000 	sub.w	r0, ip, #8192	; 0x2000
    4df8:	4283      	cmp	r3, r0
    4dfa:	d204      	bcs.n	4e06 <_sbrk+0x1e>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    4dfc:	600b      	str	r3, [r1, #0]
	}
	return prev;
}
    4dfe:	4610      	mov	r0, r2
    4e00:	bd08      	pop	{r3, pc}
    4e02:	4610      	mov	r0, r2
    4e04:	4770      	bx	lr
			errno = ENOMEM;
    4e06:	f002 fd89 	bl	791c <__errno>
    4e0a:	230c      	movs	r3, #12
			return (void *)-1;
    4e0c:	f04f 32ff 	mov.w	r2, #4294967295
			errno = ENOMEM;
    4e10:	6003      	str	r3, [r0, #0]
}
    4e12:	4610      	mov	r0, r2
    4e14:	bd08      	pop	{r3, pc}
    4e16:	bf00      	nop
    4e18:	1fff076c 	.word	0x1fff076c

00004e1c <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    4e1c:	2000      	movs	r0, #0
    4e1e:	4770      	bx	lr

00004e20 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    4e20:	f04f 30ff 	mov.w	r0, #4294967295
    4e24:	4770      	bx	lr
    4e26:	bf00      	nop

00004e28 <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    4e2c:	604b      	str	r3, [r1, #4]
	return 0;
}
    4e2e:	2000      	movs	r0, #0
    4e30:	4770      	bx	lr
    4e32:	bf00      	nop

00004e34 <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    4e34:	2001      	movs	r0, #1
    4e36:	4770      	bx	lr

00004e38 <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    4e38:	f04f 30ff 	mov.w	r0, #4294967295
    4e3c:	4770      	bx	lr
    4e3e:	bf00      	nop

00004e40 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    4e40:	e7fe      	b.n	4e40 <abort>
    4e42:	Address 0x00004e42 is out of bounds.


00004e44 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    4e44:	4b07      	ldr	r3, [pc, #28]	; (4e64 <kinetis_hsrun_disable+0x20>)
    4e46:	78da      	ldrb	r2, [r3, #3]
    4e48:	2a80      	cmp	r2, #128	; 0x80
    4e4a:	d001      	beq.n	4e50 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    4e4c:	2000      	movs	r0, #0
}
    4e4e:	4770      	bx	lr
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    4e50:	4905      	ldr	r1, [pc, #20]	; (4e68 <kinetis_hsrun_disable+0x24>)
    4e52:	4806      	ldr	r0, [pc, #24]	; (4e6c <kinetis_hsrun_disable+0x28>)
    4e54:	6448      	str	r0, [r1, #68]	; 0x44
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    4e56:	2200      	movs	r2, #0
    4e58:	705a      	strb	r2, [r3, #1]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    4e5a:	78da      	ldrb	r2, [r3, #3]
    4e5c:	2a80      	cmp	r2, #128	; 0x80
    4e5e:	d0fc      	beq.n	4e5a <kinetis_hsrun_disable+0x16>
		return 1;
    4e60:	2001      	movs	r0, #1
    4e62:	4770      	bx	lr
    4e64:	4007e000 	.word	0x4007e000
    4e68:	40048000 	.word	0x40048000
    4e6c:	22280000 	.word	0x22280000

00004e70 <kinetis_hsrun_enable>:

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    4e70:	4b07      	ldr	r3, [pc, #28]	; (4e90 <kinetis_hsrun_enable+0x20>)
    4e72:	78da      	ldrb	r2, [r3, #3]
    4e74:	2a01      	cmp	r2, #1
    4e76:	d001      	beq.n	4e7c <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    4e78:	2000      	movs	r0, #0
}
    4e7a:	4770      	bx	lr
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    4e7c:	2260      	movs	r2, #96	; 0x60
    4e7e:	705a      	strb	r2, [r3, #1]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    4e80:	78da      	ldrb	r2, [r3, #3]
    4e82:	2a80      	cmp	r2, #128	; 0x80
    4e84:	d1fc      	bne.n	4e80 <kinetis_hsrun_enable+0x10>
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    4e86:	4b03      	ldr	r3, [pc, #12]	; (4e94 <kinetis_hsrun_enable+0x24>)
    4e88:	4a03      	ldr	r2, [pc, #12]	; (4e98 <kinetis_hsrun_enable+0x28>)
    4e8a:	645a      	str	r2, [r3, #68]	; 0x44
		return 1;
    4e8c:	2001      	movs	r0, #1
    4e8e:	4770      	bx	lr
    4e90:	4007e000 	.word	0x4007e000
    4e94:	40048000 	.word	0x40048000
    4e98:	02060000 	.word	0x02060000

00004e9c <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    4e9c:	f101 3cff 	add.w	ip, r1, #4294967295
{
    4ea0:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    4ea2:	4665      	mov	r5, ip
	int i=0, j;
    4ea4:	2400      	movs	r4, #0
    4ea6:	e001      	b.n	4eac <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    4ea8:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    4eaa:	3401      	adds	r4, #1
		digit = val % radix;
    4eac:	fbb0 fef2 	udiv	lr, r0, r2
    4eb0:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4eb4:	2b09      	cmp	r3, #9
    4eb6:	f103 0630 	add.w	r6, r3, #48	; 0x30
    4eba:	bf8a      	itet	hi
    4ebc:	3337      	addhi	r3, #55	; 0x37
    4ebe:	b2f3      	uxtbls	r3, r6
    4ec0:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    4ec2:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4ec4:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    4ec8:	d2ee      	bcs.n	4ea8 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    4eca:	1c63      	adds	r3, r4, #1
    4ecc:	2200      	movs	r2, #0
    4ece:	54ca      	strb	r2, [r1, r3]
    4ed0:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    4ed2:	b17c      	cbz	r4, 4ef4 <ultoa+0x58>
		t = buf[j];
    4ed4:	4662      	mov	r2, ip
    4ed6:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    4eda:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    4ede:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    4ee2:	eba1 030c 	sub.w	r3, r1, ip
    4ee6:	3202      	adds	r2, #2
    4ee8:	3b01      	subs	r3, #1
    4eea:	1a52      	subs	r2, r2, r1
    4eec:	4423      	add	r3, r4
    4eee:	429a      	cmp	r2, r3
		buf[i] = t;
    4ef0:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    4ef2:	dbef      	blt.n	4ed4 <ultoa+0x38>
	}
	return buf;
}
    4ef4:	4608      	mov	r0, r1
    4ef6:	bd70      	pop	{r4, r5, r6, pc}

00004ef8 <rtc_set>:
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    4ef8:	4b03      	ldr	r3, [pc, #12]	; (4f08 <rtc_set+0x10>)
    4efa:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    4efc:	2110      	movs	r1, #16
	RTC_SR = 0;
    4efe:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    4f00:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    4f02:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    4f04:	6159      	str	r1, [r3, #20]
}
    4f06:	4770      	bx	lr
    4f08:	4003d000 	.word	0x4003d000

00004f0c <startup_middle_hook>:
}
#endif

extern void usb_init(void);

static void startup_default_middle_hook(void) {}
    4f0c:	4770      	bx	lr
    4f0e:	bf00      	nop

00004f10 <_init_Teensyduino_internal_>:
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4f10:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
{
    4f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4f18:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    4f1c:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    4f20:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
    4f24:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    4f28:	f04f 5800 	mov.w	r8, #536870912	; 0x20000000
    4f2c:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    4f30:	4a2f      	ldr	r2, [pc, #188]	; (4ff0 <_init_Teensyduino_internal_+0xe0>)
	FTM0_CNT = 0;
    4f32:	4930      	ldr	r1, [pc, #192]	; (4ff4 <_init_Teensyduino_internal_+0xe4>)
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    4f34:	4c30      	ldr	r4, [pc, #192]	; (4ff8 <_init_Teensyduino_internal_+0xe8>)
	FTM1_CNT = 0;
    4f36:	4d31      	ldr	r5, [pc, #196]	; (4ffc <_init_Teensyduino_internal_+0xec>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    4f38:	4e31      	ldr	r6, [pc, #196]	; (5000 <_init_Teensyduino_internal_+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    4f3a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4f3e:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4f42:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    4f44:	2000      	movs	r0, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    4f46:	f64e 7eff 	movw	lr, #61439	; 0xefff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4f4a:	2709      	movs	r7, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    4f4c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
    4f50:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	FTM0_CNT = 0;
    4f54:	6048      	str	r0, [r1, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    4f56:	f8c1 e008 	str.w	lr, [r1, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4f5a:	60cb      	str	r3, [r1, #12]
	FTM0_C1SC = 0x28;
    4f5c:	614b      	str	r3, [r1, #20]
	FTM0_C2SC = 0x28;
    4f5e:	61cb      	str	r3, [r1, #28]
	FTM0_C3SC = 0x28;
    4f60:	624b      	str	r3, [r1, #36]	; 0x24
	FTM0_C4SC = 0x28;
    4f62:	62cb      	str	r3, [r1, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    4f64:	634b      	str	r3, [r1, #52]	; 0x34
	FTM0_C6SC = 0x28;
    4f66:	63cb      	str	r3, [r1, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    4f68:	644b      	str	r3, [r1, #68]	; 0x44
	FTM3_C0SC = 0x28;
    4f6a:	60d3      	str	r3, [r2, #12]
	FTM3_C1SC = 0x28;
    4f6c:	6153      	str	r3, [r2, #20]
	FTM3_C2SC = 0x28;
    4f6e:	61d3      	str	r3, [r2, #28]
	FTM3_C3SC = 0x28;
    4f70:	6253      	str	r3, [r2, #36]	; 0x24
	FTM3_C4SC = 0x28;
    4f72:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM3_C5SC = 0x28;
    4f74:	6353      	str	r3, [r2, #52]	; 0x34
	FTM3_C6SC = 0x28;
    4f76:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM3_C7SC = 0x28;
    4f78:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4f7a:	600f      	str	r7, [r1, #0]
	FTM1_CNT = 0;
    4f7c:	6068      	str	r0, [r5, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    4f7e:	f8c5 e008 	str.w	lr, [r5, #8]
	FTM1_C0SC = 0x28;
    4f82:	60eb      	str	r3, [r5, #12]
	FTM1_C1SC = 0x28;
    4f84:	616b      	str	r3, [r5, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4f86:	602f      	str	r7, [r5, #0]
	FTM2_CNT = 0;
    4f88:	6060      	str	r0, [r4, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    4f8a:	f8c4 e008 	str.w	lr, [r4, #8]
	FTM2_C0SC = 0x28;
    4f8e:	60e3      	str	r3, [r4, #12]
	FTM2_C1SC = 0x28;
    4f90:	6163      	str	r3, [r4, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4f92:	6027      	str	r7, [r4, #0]
	FTM3_CNT = 0;
    4f94:	6050      	str	r0, [r2, #4]
	FTM3_MOD = DEFAULT_FTM_MOD;
    4f96:	f8c2 e008 	str.w	lr, [r2, #8]
	FTM3_C0SC = 0x28;
    4f9a:	60d3      	str	r3, [r2, #12]
	FTM3_C1SC = 0x28;
    4f9c:	6153      	str	r3, [r2, #20]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4f9e:	6017      	str	r7, [r2, #0]
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    4fa0:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    4fa2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    4fa6:	62f1      	str	r1, [r6, #44]	; 0x2c
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    4fa8:	6871      	ldr	r1, [r6, #4]
	TPM1_CNT = 0;
    4faa:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    4fae:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    4fb2:	6071      	str	r1, [r6, #4]
	TPM1_MOD = 32767;
    4fb4:	f647 74ff 	movw	r4, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    4fb8:	2108      	movs	r1, #8
	TPM1_CNT = 0;
    4fba:	6050      	str	r0, [r2, #4]
{
    4fbc:	b082      	sub	sp, #8
	TPM1_MOD = 32767;
    4fbe:	6094      	str	r4, [r2, #8]
	TPM1_C0SC = 0x28;
    4fc0:	60d3      	str	r3, [r2, #12]
	TPM1_C1SC = 0x28;
    4fc2:	6153      	str	r3, [r2, #20]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    4fc4:	6011      	str	r1, [r2, #0]
#endif
	analog_init();
    4fc6:	f000 fff7 	bl	5fb8 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	startup_middle_hook();
    4fca:	f7ff ff9f 	bl	4f0c <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    4fce:	4c0d      	ldr	r4, [pc, #52]	; (5004 <_init_Teensyduino_internal_+0xf4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4fd0:	6823      	ldr	r3, [r4, #0]
    4fd2:	9300      	str	r3, [sp, #0]
	return ret;
    4fd4:	9b00      	ldr	r3, [sp, #0]
    4fd6:	2b13      	cmp	r3, #19
    4fd8:	d9fa      	bls.n	4fd0 <_init_Teensyduino_internal_+0xc0>
	usb_init();
    4fda:	f000 fd21 	bl	5a20 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4fde:	6823      	ldr	r3, [r4, #0]
    4fe0:	9301      	str	r3, [sp, #4]
	return ret;
    4fe2:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    4fe4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    4fe8:	d3f9      	bcc.n	4fde <_init_Teensyduino_internal_+0xce>
}
    4fea:	b002      	add	sp, #8
    4fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ff0:	400b9000 	.word	0x400b9000
    4ff4:	40038000 	.word	0x40038000
    4ff8:	400b8000 	.word	0x400b8000
    4ffc:	40039000 	.word	0x40039000
    5000:	40048000 	.word	0x40048000
    5004:	1fff628c 	.word	0x1fff628c

00005008 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    5008:	283f      	cmp	r0, #63	; 0x3f
    500a:	d818      	bhi.n	503e <digitalWrite+0x36>
{
    500c:	b410      	push	{r4}
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    500e:	4b12      	ldr	r3, [pc, #72]	; (5058 <digitalWrite+0x50>)
    5010:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    5014:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    5018:	b134      	cbz	r4, 5028 <digitalWrite+0x20>
		if (val) {
			*portSetRegister(pin) = 1;
    501a:	2301      	movs	r3, #1
		if (val) {
    501c:	b981      	cbnz	r1, 5040 <digitalWrite+0x38>
		} else {
			*portClearRegister(pin) = 1;
    501e:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    5022:	f85d 4b04 	ldr.w	r4, [sp], #4
    5026:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    5028:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    502c:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    502e:	681a      	ldr	r2, [r3, #0]
		if (val) {
    5030:	b159      	cbz	r1, 504a <digitalWrite+0x42>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    5032:	f042 0203 	orr.w	r2, r2, #3
}
    5036:	f85d 4b04 	ldr.w	r4, [sp], #4
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    503a:	601a      	str	r2, [r3, #0]
}
    503c:	4770      	bx	lr
    503e:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    5040:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    5044:	f85d 4b04 	ldr.w	r4, [sp], #4
    5048:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    504a:	f022 0202 	bic.w	r2, r2, #2
}
    504e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*config &= ~(PORT_PCR_PE);
    5052:	601a      	str	r2, [r3, #0]
}
    5054:	4770      	bx	lr
    5056:	bf00      	nop
    5058:	0000d4c4 	.word	0x0000d4c4

0000505c <digitalRead>:
#endif
}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    505c:	283f      	cmp	r0, #63	; 0x3f
    505e:	d806      	bhi.n	506e <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    5060:	4b04      	ldr	r3, [pc, #16]	; (5074 <digitalRead+0x18>)
    5062:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    5066:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    506a:	b2c0      	uxtb	r0, r0
    506c:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    506e:	2000      	movs	r0, #0
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    5070:	4770      	bx	lr
    5072:	bf00      	nop
    5074:	0000d4c4 	.word	0x0000d4c4

00005078 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    5078:	283f      	cmp	r0, #63	; 0x3f
    507a:	d820      	bhi.n	50be <pinMode+0x46>
	config = portConfigRegister(pin);
    507c:	4a1b      	ldr	r2, [pc, #108]	; (50ec <pinMode+0x74>)
    507e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    5082:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    5084:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    5086:	d00f      	beq.n	50a8 <pinMode+0x30>
    5088:	2904      	cmp	r1, #4
    508a:	d01d      	beq.n	50c8 <pinMode+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    508c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    5090:	2200      	movs	r2, #0
    5092:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    5096:	b199      	cbz	r1, 50c0 <pinMode+0x48>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    5098:	2902      	cmp	r1, #2
    509a:	d022      	beq.n	50e2 <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    509c:	2903      	cmp	r1, #3
    509e:	d10d      	bne.n	50bc <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    50a0:	f44f 7281 	mov.w	r2, #258	; 0x102
    50a4:	601a      	str	r2, [r3, #0]
    50a6:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    50a8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    50ac:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    50b0:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    50b4:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    50b6:	681a      	ldr	r2, [r3, #0]
    50b8:	f022 0220 	bic.w	r2, r2, #32
    50bc:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    50be:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    50c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    50c4:	601a      	str	r2, [r3, #0]
    50c6:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    50c8:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    50cc:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    50d0:	2001      	movs	r0, #1
    50d2:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    50d6:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    50d8:	681a      	ldr	r2, [r3, #0]
    50da:	f042 0220 	orr.w	r2, r2, #32
    50de:	601a      	str	r2, [r3, #0]
    50e0:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    50e2:	f240 1203 	movw	r2, #259	; 0x103
    50e6:	601a      	str	r2, [r3, #0]
    50e8:	4770      	bx	lr
    50ea:	bf00      	nop
    50ec:	0000d4c4 	.word	0x0000d4c4

000050f0 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    50f0:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    50f2:	490e      	ldr	r1, [pc, #56]	; (512c <micros+0x3c>)
	current = SYST_CVR;
    50f4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    50f8:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    50fa:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    50fc:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    5100:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    5102:	0152      	lsls	r2, r2, #5
    5104:	d502      	bpl.n	510c <micros+0x1c>
    5106:	2b32      	cmp	r3, #50	; 0x32
    5108:	bf88      	it	hi
    510a:	3001      	addhi	r0, #1
	current = ((F_CPU / 1000) - 1) - current;
    510c:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    5110:	4a07      	ldr	r2, [pc, #28]	; (5130 <micros+0x40>)
	current = ((F_CPU / 1000) - 1) - current;
    5112:	f203 331f 	addw	r3, r3, #799	; 0x31f
	return count * 1000 + current / (F_CPU / 1000000);
    5116:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    511a:	089b      	lsrs	r3, r3, #2
    511c:	fba2 2303 	umull	r2, r3, r2, r3
    5120:	fb01 f000 	mul.w	r0, r1, r0
}
    5124:	eb00 0093 	add.w	r0, r0, r3, lsr #2
    5128:	4770      	bx	lr
    512a:	bf00      	nop
    512c:	1fff628c 	.word	0x1fff628c
    5130:	16c16c17 	.word	0x16c16c17

00005134 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    5134:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    5136:	2b03      	cmp	r3, #3
    5138:	d816      	bhi.n	5168 <usb_rx+0x34>
	__disable_irq();
    513a:	b672      	cpsid	i
	ret = rx_first[endpoint];
    513c:	490b      	ldr	r1, [pc, #44]	; (516c <usb_rx+0x38>)
    513e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    5142:	b178      	cbz	r0, 5164 <usb_rx+0x30>
{
    5144:	b430      	push	{r4, r5}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    5146:	4c0a      	ldr	r4, [pc, #40]	; (5170 <usb_rx+0x3c>)
    5148:	f8b0 c000 	ldrh.w	ip, [r0]
    514c:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
		rx_first[endpoint] = ret->next;
    5150:	6845      	ldr	r5, [r0, #4]
    5152:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    5156:	eba2 020c 	sub.w	r2, r2, ip
    515a:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    515e:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    5160:	bc30      	pop	{r4, r5}
    5162:	4770      	bx	lr
	__enable_irq();
    5164:	b662      	cpsie	i
}
    5166:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    5168:	2000      	movs	r0, #0
    516a:	4770      	bx	lr
    516c:	1fff6320 	.word	0x1fff6320
    5170:	1fff6370 	.word	0x1fff6370

00005174 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    5174:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    5176:	2803      	cmp	r0, #3
    5178:	d80b      	bhi.n	5192 <usb_tx_packet_count+0x1e>
	__disable_irq();
    517a:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    517c:	4b07      	ldr	r3, [pc, #28]	; (519c <usb_tx_packet_count+0x28>)
    517e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5182:	b143      	cbz	r3, 5196 <usb_tx_packet_count+0x22>
	uint32_t count=0;
    5184:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    5186:	685b      	ldr	r3, [r3, #4]
    5188:	3001      	adds	r0, #1
    518a:	2b00      	cmp	r3, #0
    518c:	d1fb      	bne.n	5186 <usb_tx_packet_count+0x12>
	__enable_irq();
    518e:	b662      	cpsie	i
	return count;
    5190:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    5192:	2000      	movs	r0, #0
}
    5194:	4770      	bx	lr
	uint32_t count=0;
    5196:	4618      	mov	r0, r3
    5198:	e7f9      	b.n	518e <usb_tx_packet_count+0x1a>
    519a:	bf00      	nop
    519c:	1fff6348 	.word	0x1fff6348

000051a0 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    51a0:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    51a2:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    51a4:	4a1a      	ldr	r2, [pc, #104]	; (5210 <usb_rx_memory+0x70>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    51a6:	4c1b      	ldr	r4, [pc, #108]	; (5214 <usb_rx_memory+0x74>)
	__disable_irq();
    51a8:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    51aa:	f812 1b01 	ldrb.w	r1, [r2], #1
    51ae:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    51b0:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    51b4:	d505      	bpl.n	51c2 <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    51b6:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    51ba:	b169      	cbz	r1, 51d8 <usb_rx_memory+0x38>
			if (table[index(i, RX, ODD)].desc == 0) {
    51bc:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    51c0:	b1c9      	cbz	r1, 51f6 <usb_rx_memory+0x56>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    51c2:	3304      	adds	r3, #4
    51c4:	2b14      	cmp	r3, #20
    51c6:	d1f0      	bne.n	51aa <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    51c8:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    51ca:	4b13      	ldr	r3, [pc, #76]	; (5218 <usb_rx_memory+0x78>)
    51cc:	2200      	movs	r2, #0
    51ce:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    51d0:	f85d 4b04 	ldr.w	r4, [sp], #4
	usb_free(packet);
    51d4:	f000 bcae 	b.w	5b34 <usb_free>
				usb_rx_memory_needed--;
    51d8:	490f      	ldr	r1, [pc, #60]	; (5218 <usb_rx_memory+0x78>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    51da:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    51de:	3008      	adds	r0, #8
    51e0:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    51e2:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    51e4:	480d      	ldr	r0, [pc, #52]	; (521c <usb_rx_memory+0x7c>)
    51e6:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    51ea:	3a01      	subs	r2, #1
    51ec:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    51ee:	b662      	cpsie	i
}
    51f0:	f85d 4b04 	ldr.w	r4, [sp], #4
    51f4:	4770      	bx	lr
				usb_rx_memory_needed--;
    51f6:	4a08      	ldr	r2, [pc, #32]	; (5218 <usb_rx_memory+0x78>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    51f8:	4909      	ldr	r1, [pc, #36]	; (5220 <usb_rx_memory+0x80>)
				table[index(i, RX, ODD)].addr = packet->buf;
    51fa:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    51fe:	3008      	adds	r0, #8
    5200:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    5202:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5204:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    5208:	3b01      	subs	r3, #1
    520a:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    520c:	b662      	cpsie	i
				return;
    520e:	e7ef      	b.n	51f0 <usb_rx_memory+0x50>
    5210:	0000d744 	.word	0x0000d744
    5214:	1fff0000 	.word	0x1fff0000
    5218:	1fff6378 	.word	0x1fff6378
    521c:	00400088 	.word	0x00400088
    5220:	004000c8 	.word	0x004000c8

00005224 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    5224:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    5226:	2a03      	cmp	r2, #3
    5228:	d80e      	bhi.n	5248 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    522a:	4b1c      	ldr	r3, [pc, #112]	; (529c <usb_tx+0x78>)
    522c:	0140      	lsls	r0, r0, #5
    522e:	f040 0010 	orr.w	r0, r0, #16
{
    5232:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    5234:	4403      	add	r3, r0
	__disable_irq();
    5236:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    5238:	4c19      	ldr	r4, [pc, #100]	; (52a0 <usb_tx+0x7c>)
    523a:	5ca0      	ldrb	r0, [r4, r2]
    523c:	2803      	cmp	r0, #3
    523e:	d81d      	bhi.n	527c <usb_tx+0x58>
    5240:	e8df f000 	tbb	[pc, r0]
    5244:	19031614 	.word	0x19031614
    5248:	4770      	bx	lr
    524a:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    524c:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    524e:	f013 0f08 	tst.w	r3, #8
    5252:	8808      	ldrh	r0, [r1, #0]
    5254:	bf14      	ite	ne
    5256:	22c8      	movne	r2, #200	; 0xc8
    5258:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    525a:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    525c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    5260:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5262:	601a      	str	r2, [r3, #0]
	__enable_irq();
    5264:	b662      	cpsie	i
}
    5266:	f85d 4b04 	ldr.w	r4, [sp], #4
    526a:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    526c:	2003      	movs	r0, #3
    526e:	e7ed      	b.n	524c <usb_tx+0x28>
		b++;
    5270:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    5272:	2002      	movs	r0, #2
		break;
    5274:	e7ea      	b.n	524c <usb_tx+0x28>
		b++;
    5276:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    5278:	2004      	movs	r0, #4
		break;
    527a:	e7e7      	b.n	524c <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    527c:	4b09      	ldr	r3, [pc, #36]	; (52a4 <usb_tx+0x80>)
    527e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    5282:	b138      	cbz	r0, 5294 <usb_tx+0x70>
			tx_last[endpoint]->next = packet;
    5284:	4b08      	ldr	r3, [pc, #32]	; (52a8 <usb_tx+0x84>)
    5286:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    528a:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    528c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    5290:	b662      	cpsie	i
		return;
    5292:	e7e8      	b.n	5266 <usb_tx+0x42>
			tx_first[endpoint] = packet;
    5294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    5298:	4b03      	ldr	r3, [pc, #12]	; (52a8 <usb_tx+0x84>)
    529a:	e7f7      	b.n	528c <usb_tx+0x68>
    529c:	1fff0000 	.word	0x1fff0000
    52a0:	1fff6368 	.word	0x1fff6368
    52a4:	1fff6348 	.word	0x1fff6348
    52a8:	1fff6358 	.word	0x1fff6358

000052ac <usb_isr>:
}



void usb_isr(void)
{
    52ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    52b0:	f8df a30c 	ldr.w	sl, [pc, #780]	; 55c0 <usb_isr+0x314>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    52b4:	f8df b30c 	ldr.w	fp, [pc, #780]	; 55c4 <usb_isr+0x318>
{
    52b8:	b085      	sub	sp, #20
    52ba:	e03d      	b.n	5338 <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    52bc:	4db0      	ldr	r5, [pc, #704]	; (5580 <usb_isr+0x2d4>)
    52be:	089e      	lsrs	r6, r3, #2
    52c0:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    52c4:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    52c6:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    52c8:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    52cc:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    52ce:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    52d2:	f040 80b8 	bne.w	5446 <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    52d6:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    52da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    52de:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    52e0:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    52e4:	f000 80a7 	beq.w	5436 <usb_isr+0x18a>
					packet->index = 0;
    52e8:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    52ec:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    52f0:	4ba4      	ldr	r3, [pc, #656]	; (5584 <usb_isr+0x2d8>)
    52f2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    52f6:	2a00      	cmp	r2, #0
    52f8:	f000 8201 	beq.w	56fe <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    52fc:	4ba2      	ldr	r3, [pc, #648]	; (5588 <usb_isr+0x2dc>)
    52fe:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    5302:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    5304:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    5308:	4ba0      	ldr	r3, [pc, #640]	; (558c <usb_isr+0x2e0>)
    530a:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    530e:	4494      	add	ip, r2
    5310:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    5314:	f000 fbee 	bl	5af4 <usb_malloc>
					if (packet) {
    5318:	2800      	cmp	r0, #0
    531a:	f000 81e9 	beq.w	56f0 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    531e:	f017 0f08 	tst.w	r7, #8
    5322:	4b9b      	ldr	r3, [pc, #620]	; (5590 <usb_isr+0x2e4>)
						b->addr = packet->buf;
    5324:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    5328:	bf18      	it	ne
    532a:	465b      	movne	r3, fp
						b->addr = packet->buf;
    532c:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    532e:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    5332:	2308      	movs	r3, #8
    5334:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    5338:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    533c:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    533e:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    5340:	d51b      	bpl.n	537a <usb_isr+0xce>
		if (usb_configuration) {
    5342:	4b94      	ldr	r3, [pc, #592]	; (5594 <usb_isr+0x2e8>)
    5344:	781b      	ldrb	r3, [r3, #0]
    5346:	b1ab      	cbz	r3, 5374 <usb_isr+0xc8>
			t = usb_reboot_timer;
    5348:	4993      	ldr	r1, [pc, #588]	; (5598 <usb_isr+0x2ec>)
    534a:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    534c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    5350:	b12a      	cbz	r2, 535e <usb_isr+0xb2>
				usb_reboot_timer = --t;
    5352:	3b01      	subs	r3, #1
    5354:	b2db      	uxtb	r3, r3
    5356:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    5358:	2b00      	cmp	r3, #0
    535a:	f000 8346 	beq.w	59ea <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    535e:	498f      	ldr	r1, [pc, #572]	; (559c <usb_isr+0x2f0>)
    5360:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    5362:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    5366:	b12a      	cbz	r2, 5374 <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    5368:	3b01      	subs	r3, #1
    536a:	b2db      	uxtb	r3, r3
    536c:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    536e:	2b00      	cmp	r3, #0
    5370:	f000 81eb 	beq.w	574a <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    5374:	2304      	movs	r3, #4
    5376:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    537a:	f014 0208 	ands.w	r2, r4, #8
    537e:	f000 81cc 	beq.w	571a <usb_isr+0x46e>
		stat = USB0_STAT;
    5382:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    5386:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    5388:	0912      	lsrs	r2, r2, #4
    538a:	d197      	bne.n	52bc <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    538c:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 5580 <usb_isr+0x2d4>
    5390:	089b      	lsrs	r3, r3, #2
    5392:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    5396:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    539a:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    539c:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    53a0:	2809      	cmp	r0, #9
    53a2:	d07c      	beq.n	549e <usb_isr+0x1f2>
    53a4:	d80f      	bhi.n	53c6 <usb_isr+0x11a>
    53a6:	3801      	subs	r0, #1
    53a8:	2801      	cmp	r0, #1
    53aa:	d808      	bhi.n	53be <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    53ac:	4a7c      	ldr	r2, [pc, #496]	; (55a0 <usb_isr+0x2f4>)
    53ae:	8815      	ldrh	r5, [r2, #0]
    53b0:	f242 0021 	movw	r0, #8225	; 0x2021
    53b4:	4285      	cmp	r5, r0
    53b6:	f000 81fb 	beq.w	57b0 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    53ba:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    53be:	2301      	movs	r3, #1
    53c0:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    53c4:	e7b5      	b.n	5332 <usb_isr+0x86>
	switch (pid) {
    53c6:	280d      	cmp	r0, #13
    53c8:	d1f9      	bne.n	53be <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    53ca:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    53ce:	4d75      	ldr	r5, [pc, #468]	; (55a4 <usb_isr+0x2f8>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    53d0:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    53d4:	4e72      	ldr	r6, [pc, #456]	; (55a0 <usb_isr+0x2f4>)
		ep0_tx_data_toggle = 1;
    53d6:	4c74      	ldr	r4, [pc, #464]	; (55a8 <usb_isr+0x2fc>)
		table[index(0, TX, EVEN)].desc = 0;
    53d8:	f8c9 2010 	str.w	r2, [r9, #16]
    53dc:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    53de:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    53e2:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    53e6:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    53e8:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    53ea:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    53ee:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    53f2:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    53f4:	f200 80ff 	bhi.w	55f6 <usb_isr+0x34a>
    53f8:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    53fc:	f080 82cb 	bcs.w	5996 <usb_isr+0x6ea>
    5400:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    5404:	f000 8226 	beq.w	5854 <usb_isr+0x5a8>
    5408:	f240 80de 	bls.w	55c8 <usb_isr+0x31c>
    540c:	f240 3202 	movw	r2, #770	; 0x302
    5410:	4293      	cmp	r3, r2
    5412:	d17b      	bne.n	550c <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    5414:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5418:	2f04      	cmp	r7, #4
    541a:	f200 8108 	bhi.w	562e <usb_isr+0x382>
    541e:	0c02      	lsrs	r2, r0, #16
    5420:	f040 8105 	bne.w	562e <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    5424:	4961      	ldr	r1, [pc, #388]	; (55ac <usb_isr+0x300>)
    5426:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    542a:	f043 0302 	orr.w	r3, r3, #2
    542e:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    5432:	4613      	mov	r3, r2
		break;
    5434:	e070      	b.n	5518 <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5436:	f017 0f08 	tst.w	r7, #8
    543a:	4b55      	ldr	r3, [pc, #340]	; (5590 <usb_isr+0x2e4>)
    543c:	bf18      	it	ne
    543e:	465b      	movne	r3, fp
    5440:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    5444:	e775      	b.n	5332 <usb_isr+0x86>
				usb_free(packet);
    5446:	f000 fb75 	bl	5b34 <usb_free>
				packet = tx_first[endpoint];
    544a:	4959      	ldr	r1, [pc, #356]	; (55b0 <usb_isr+0x304>)
					switch (tx_state[endpoint]) {
    544c:	4a59      	ldr	r2, [pc, #356]	; (55b4 <usb_isr+0x308>)
				packet = tx_first[endpoint];
    544e:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    5452:	2b00      	cmp	r3, #0
    5454:	f000 8157 	beq.w	5706 <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    5458:	6858      	ldr	r0, [r3, #4]
    545a:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    545e:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    5460:	f103 0008 	add.w	r0, r3, #8
    5464:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    5466:	2903      	cmp	r1, #3
    5468:	d805      	bhi.n	5476 <usb_isr+0x1ca>
    546a:	e8df f001 	tbb	[pc, r1]
    546e:	0f12      	.short	0x0f12
    5470:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    5472:	2104      	movs	r1, #4
    5474:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    5476:	881a      	ldrh	r2, [r3, #0]
    5478:	f017 0f08 	tst.w	r7, #8
    547c:	bf14      	ite	ne
    547e:	23c8      	movne	r3, #200	; 0xc8
    5480:	2388      	moveq	r3, #136	; 0x88
    5482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    5486:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    548a:	e752      	b.n	5332 <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    548c:	2102      	movs	r1, #2
    548e:	5511      	strb	r1, [r2, r4]
						break;
    5490:	e7f1      	b.n	5476 <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    5492:	2103      	movs	r1, #3
    5494:	5511      	strb	r1, [r2, r4]
						break;
    5496:	e7ee      	b.n	5476 <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    5498:	2105      	movs	r1, #5
    549a:	5511      	strb	r1, [r2, r4]
						break;
    549c:	e7eb      	b.n	5476 <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    549e:	4d41      	ldr	r5, [pc, #260]	; (55a4 <usb_isr+0x2f8>)
    54a0:	682a      	ldr	r2, [r5, #0]
		if (data) {
    54a2:	b33a      	cbz	r2, 54f4 <usb_isr+0x248>
			size = ep0_tx_len;
    54a4:	4944      	ldr	r1, [pc, #272]	; (55b8 <usb_isr+0x30c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    54a6:	4c40      	ldr	r4, [pc, #256]	; (55a8 <usb_isr+0x2fc>)
			size = ep0_tx_len;
    54a8:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    54aa:	4844      	ldr	r0, [pc, #272]	; (55bc <usb_isr+0x310>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    54ac:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    54b0:	7806      	ldrb	r6, [r0, #0]
    54b2:	2f40      	cmp	r7, #64	; 0x40
    54b4:	463b      	mov	r3, r7
    54b6:	bf28      	it	cs
    54b8:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    54ba:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    54be:	f08e 0e01 	eor.w	lr, lr, #1
    54c2:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    54c6:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    54ca:	f086 0601 	eor.w	r6, r6, #1
    54ce:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    54d0:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    54d4:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    54d6:	bf14      	ite	ne
    54d8:	20c8      	movne	r0, #200	; 0xc8
    54da:	2088      	moveq	r0, #136	; 0x88
    54dc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    54e0:	441a      	add	r2, r3
			ep0_tx_len -= size;
    54e2:	1afb      	subs	r3, r7, r3
    54e4:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    54e6:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    54ea:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    54ec:	2b00      	cmp	r3, #0
    54ee:	f000 8136 	beq.w	575e <usb_isr+0x4b2>
    54f2:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    54f4:	4b2a      	ldr	r3, [pc, #168]	; (55a0 <usb_isr+0x2f4>)
    54f6:	881a      	ldrh	r2, [r3, #0]
    54f8:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    54fc:	f47f af5f 	bne.w	53be <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    5500:	789a      	ldrb	r2, [r3, #2]
    5502:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    5506:	2200      	movs	r2, #0
    5508:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    550a:	e758      	b.n	53be <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    550c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    5510:	f040 808d 	bne.w	562e <usb_isr+0x382>
	uint32_t datalen = 0;
    5514:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    5516:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    5518:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    551c:	4827      	ldr	r0, [pc, #156]	; (55bc <usb_isr+0x310>)
    551e:	4594      	cmp	ip, r2
    5520:	bf28      	it	cs
    5522:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    5524:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5526:	7802      	ldrb	r2, [r0, #0]
    5528:	2f40      	cmp	r7, #64	; 0x40
    552a:	bf28      	it	cs
    552c:	2740      	movcs	r7, #64	; 0x40
    552e:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5532:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5534:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5538:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    553c:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5540:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    5544:	2600      	movs	r6, #0
	data += size;
    5546:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    5548:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    554a:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    554e:	f082 0601 	eor.w	r6, r2, #1
    5552:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    5554:	f040 8111 	bne.w	577a <usb_isr+0x4ce>
    5558:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    555c:	f04f 0501 	mov.w	r5, #1
    5560:	d909      	bls.n	5576 <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5562:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    5566:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5568:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    556c:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    556e:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5570:	2388      	movs	r3, #136	; 0x88
    5572:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    5576:	2301      	movs	r3, #1
    5578:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    557c:	e71f      	b.n	53be <usb_isr+0x112>
    557e:	bf00      	nop
    5580:	1fff0000 	.word	0x1fff0000
    5584:	1fff6320 	.word	0x1fff6320
    5588:	1fff6330 	.word	0x1fff6330
    558c:	1fff6370 	.word	0x1fff6370
    5590:	00400088 	.word	0x00400088
    5594:	1fff636c 	.word	0x1fff636c
    5598:	1fff636d 	.word	0x1fff636d
    559c:	1fff6398 	.word	0x1fff6398
    55a0:	1fff6340 	.word	0x1fff6340
    55a4:	1fff6314 	.word	0x1fff6314
    55a8:	1fff6311 	.word	0x1fff6311
    55ac:	400720c0 	.word	0x400720c0
    55b0:	1fff6348 	.word	0x1fff6348
    55b4:	1fff6368 	.word	0x1fff6368
    55b8:	1fff6312 	.word	0x1fff6312
    55bc:	1fff6310 	.word	0x1fff6310
    55c0:	40072000 	.word	0x40072000
    55c4:	004000c8 	.word	0x004000c8
	switch (setup.wRequestAndType) {
    55c8:	2b80      	cmp	r3, #128	; 0x80
    55ca:	f000 818b 	beq.w	58e4 <usb_isr+0x638>
    55ce:	2b82      	cmp	r3, #130	; 0x82
    55d0:	d12d      	bne.n	562e <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    55d2:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    55d6:	2f04      	cmp	r7, #4
    55d8:	d829      	bhi.n	562e <usb_isr+0x382>
		reply_buffer[0] = 0;
    55da:	4aa7      	ldr	r2, [pc, #668]	; (5878 <usb_isr+0x5cc>)
    55dc:	2300      	movs	r3, #0
    55de:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    55e0:	4ba6      	ldr	r3, [pc, #664]	; (587c <usb_isr+0x5d0>)
    55e2:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    55e6:	079f      	lsls	r7, r3, #30
    55e8:	f140 81fc 	bpl.w	59e4 <usb_isr+0x738>
    55ec:	2301      	movs	r3, #1
    55ee:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    55f0:	4ba1      	ldr	r3, [pc, #644]	; (5878 <usb_isr+0x5cc>)
		datalen = 2;
    55f2:	2202      	movs	r2, #2
    55f4:	e790      	b.n	5518 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    55f6:	f242 0c21 	movw	ip, #8225	; 0x2021
    55fa:	4563      	cmp	r3, ip
    55fc:	d0bb      	beq.n	5576 <usb_isr+0x2ca>
    55fe:	d91d      	bls.n	563c <usb_isr+0x390>
    5600:	f242 2221 	movw	r2, #8737	; 0x2221
    5604:	4293      	cmp	r3, r2
    5606:	d10d      	bne.n	5624 <usb_isr+0x378>
		switch (setup.wIndex) {
    5608:	b2bf      	uxth	r7, r7
    560a:	2f00      	cmp	r7, #0
    560c:	d182      	bne.n	5514 <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    560e:	4b9c      	ldr	r3, [pc, #624]	; (5880 <usb_isr+0x5d4>)
    5610:	681a      	ldr	r2, [r3, #0]
    5612:	4b9c      	ldr	r3, [pc, #624]	; (5884 <usb_isr+0x5d8>)
    5614:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    5616:	4b9c      	ldr	r3, [pc, #624]	; (5888 <usb_isr+0x5dc>)
    5618:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    561c:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    561e:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    5620:	4613      	mov	r3, r2
			break;
    5622:	e779      	b.n	5518 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    5624:	f242 3221 	movw	r2, #8993	; 0x2321
    5628:	4293      	cmp	r3, r2
    562a:	f43f af73 	beq.w	5514 <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    562e:	230f      	movs	r3, #15
    5630:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    5634:	2301      	movs	r3, #1
    5636:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    563a:	e6c0      	b.n	53be <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    563c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    5640:	f000 814a 	beq.w	58d8 <usb_isr+0x62c>
    5644:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    5648:	d1f1      	bne.n	562e <usb_isr+0x382>
		usb_configuration = setup.wValue;
    564a:	4b90      	ldr	r3, [pc, #576]	; (588c <usb_isr+0x5e0>)
    564c:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    5650:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    5652:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    5654:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    5658:	061a      	lsls	r2, r3, #24
    565a:	d406      	bmi.n	566a <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    565c:	3501      	adds	r5, #1
    565e:	2d14      	cmp	r5, #20
    5660:	d00c      	beq.n	567c <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    5662:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    5666:	061a      	lsls	r2, r3, #24
    5668:	d5f8      	bpl.n	565c <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    566a:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    566e:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    5670:	6858      	ldr	r0, [r3, #4]
    5672:	3808      	subs	r0, #8
    5674:	f000 fa5e 	bl	5b34 <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    5678:	2d14      	cmp	r5, #20
    567a:	d1f2      	bne.n	5662 <usb_isr+0x3b6>
    567c:	4a84      	ldr	r2, [pc, #528]	; (5890 <usb_isr+0x5e4>)
    567e:	4b85      	ldr	r3, [pc, #532]	; (5894 <usb_isr+0x5e8>)
    5680:	9202      	str	r2, [sp, #8]
    5682:	4a85      	ldr	r2, [pc, #532]	; (5898 <usb_isr+0x5ec>)
    5684:	9201      	str	r2, [sp, #4]
    5686:	4e85      	ldr	r6, [pc, #532]	; (589c <usb_isr+0x5f0>)
    5688:	4a85      	ldr	r2, [pc, #532]	; (58a0 <usb_isr+0x5f4>)
    568a:	f8df 8248 	ldr.w	r8, [pc, #584]	; 58d4 <usb_isr+0x628>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    568e:	9403      	str	r4, [sp, #12]
    5690:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    5692:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    5694:	461c      	mov	r4, r3
			p = rx_first[i];
    5696:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    569a:	b12f      	cbz	r7, 56a8 <usb_isr+0x3fc>
				n = p->next;
    569c:	4638      	mov	r0, r7
    569e:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    56a0:	f000 fa48 	bl	5b34 <usb_free>
			while (p) {
    56a4:	2f00      	cmp	r7, #0
    56a6:	d1f9      	bne.n	569c <usb_isr+0x3f0>
			rx_last[i] = NULL;
    56a8:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    56aa:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    56ae:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    56b2:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    56b6:	9300      	str	r3, [sp, #0]
			while (p) {
    56b8:	b12f      	cbz	r7, 56c6 <usb_isr+0x41a>
				n = p->next;
    56ba:	4638      	mov	r0, r7
    56bc:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    56be:	f000 fa39 	bl	5b34 <usb_free>
			while (p) {
    56c2:	2f00      	cmp	r7, #0
    56c4:	d1f9      	bne.n	56ba <usb_isr+0x40e>
			tx_last[i] = NULL;
    56c6:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    56c8:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    56cc:	f843 5b04 	str.w	r5, [r3], #4
    56d0:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    56d2:	9b01      	ldr	r3, [sp, #4]
    56d4:	f823 5b02 	strh.w	r5, [r3], #2
    56d8:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    56da:	7823      	ldrb	r3, [r4, #0]
    56dc:	3b02      	subs	r3, #2
    56de:	2b03      	cmp	r3, #3
    56e0:	f200 8109 	bhi.w	58f6 <usb_isr+0x64a>
    56e4:	e8df f013 	tbh	[pc, r3, lsl #1]
    56e8:	0104013f 	.word	0x0104013f
    56ec:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    56f0:	4a6c      	ldr	r2, [pc, #432]	; (58a4 <usb_isr+0x5f8>)
						b->desc = 0;
    56f2:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    56f6:	7813      	ldrb	r3, [r2, #0]
    56f8:	3301      	adds	r3, #1
    56fa:	7013      	strb	r3, [r2, #0]
    56fc:	e619      	b.n	5332 <usb_isr+0x86>
						rx_first[endpoint] = packet;
    56fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    5702:	4b67      	ldr	r3, [pc, #412]	; (58a0 <usb_isr+0x5f4>)
    5704:	e5fe      	b.n	5304 <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    5706:	5d11      	ldrb	r1, [r2, r4]
    5708:	2902      	cmp	r1, #2
    570a:	d026      	beq.n	575a <usb_isr+0x4ae>
    570c:	f67f ae11 	bls.w	5332 <usb_isr+0x86>
    5710:	2903      	cmp	r1, #3
    5712:	d11d      	bne.n	5750 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    5714:	2301      	movs	r3, #1
    5716:	5513      	strb	r3, [r2, r4]
						break;
    5718:	e60b      	b.n	5332 <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    571a:	07e0      	lsls	r0, r4, #31
    571c:	d46e      	bmi.n	57fc <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    571e:	0621      	lsls	r1, r4, #24
    5720:	d421      	bmi.n	5766 <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    5722:	07a2      	lsls	r2, r4, #30
    5724:	d508      	bpl.n	5738 <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    5726:	4b60      	ldr	r3, [pc, #384]	; (58a8 <usb_isr+0x5fc>)
    5728:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    572c:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    572e:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    5730:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    5734:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    5738:	06e3      	lsls	r3, r4, #27
    573a:	d503      	bpl.n	5744 <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    573c:	4b5a      	ldr	r3, [pc, #360]	; (58a8 <usb_isr+0x5fc>)
    573e:	2210      	movs	r2, #16
    5740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    5744:	b005      	add	sp, #20
    5746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    574a:	f000 fb6d 	bl	5e28 <usb_serial_flush_callback>
    574e:	e611      	b.n	5374 <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    5750:	f017 0f08 	tst.w	r7, #8
    5754:	bf14      	ite	ne
    5756:	2303      	movne	r3, #3
    5758:	2302      	moveq	r3, #2
    575a:	5513      	strb	r3, [r2, r4]
						break;
    575c:	e5e9      	b.n	5332 <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    575e:	2f3f      	cmp	r7, #63	; 0x3f
    5760:	bf98      	it	ls
    5762:	2200      	movls	r2, #0
    5764:	e6c5      	b.n	54f2 <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5766:	4b50      	ldr	r3, [pc, #320]	; (58a8 <usb_isr+0x5fc>)
		USB0_ISTAT = USB_ISTAT_STALL;
    5768:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    576a:	210d      	movs	r1, #13
    576c:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    5770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    5774:	07a2      	lsls	r2, r4, #30
    5776:	d5df      	bpl.n	5738 <usb_isr+0x48c>
    5778:	e7d5      	b.n	5726 <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    577a:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    577e:	7002      	strb	r2, [r0, #0]
    5780:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5782:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    5786:	463a      	mov	r2, r7
    5788:	bf28      	it	cs
    578a:	2240      	movcs	r2, #64	; 0x40
    578c:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    578e:	0410      	lsls	r0, r2, #16
	data += size;
    5790:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5792:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    5796:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    5798:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    579a:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    579e:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    57a0:	d055      	beq.n	584e <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    57a2:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    57a4:	4b41      	ldr	r3, [pc, #260]	; (58ac <usb_isr+0x600>)
    57a6:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    57a8:	2301      	movs	r3, #1
    57aa:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    57ae:	e606      	b.n	53be <usb_isr+0x112>
			switch (setup.wIndex) {
    57b0:	8892      	ldrh	r2, [r2, #4]
    57b2:	b95a      	cbnz	r2, 57cc <usb_isr+0x520>
    57b4:	4a3e      	ldr	r2, [pc, #248]	; (58b0 <usb_isr+0x604>)
    57b6:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    57b8:	f814 1b01 	ldrb.w	r1, [r4], #1
    57bc:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    57c0:	42ac      	cmp	r4, r5
    57c2:	d1f9      	bne.n	57b8 <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    57c4:	4a3b      	ldr	r2, [pc, #236]	; (58b4 <usb_isr+0x608>)
    57c6:	6812      	ldr	r2, [r2, #0]
    57c8:	2a86      	cmp	r2, #134	; 0x86
    57ca:	d03c      	beq.n	5846 <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    57cc:	4c3a      	ldr	r4, [pc, #232]	; (58b8 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    57ce:	483b      	ldr	r0, [pc, #236]	; (58bc <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    57d0:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    57d2:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    57d4:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    57d6:	f085 0501 	eor.w	r5, r5, #1
    57da:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    57dc:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    57e0:	f082 0201 	eor.w	r2, r2, #1
    57e4:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    57e6:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    57ea:	f04f 0000 	mov.w	r0, #0
    57ee:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    57f0:	bf14      	ite	ne
    57f2:	22c8      	movne	r2, #200	; 0xc8
    57f4:	2288      	moveq	r2, #136	; 0x88
    57f6:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    57fa:	e5de      	b.n	53ba <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    57fc:	4b2a      	ldr	r3, [pc, #168]	; (58a8 <usb_isr+0x5fc>)
		ep0_tx_bdt_bank = 0;
    57fe:	482f      	ldr	r0, [pc, #188]	; (58bc <usb_isr+0x610>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    5800:	492f      	ldr	r1, [pc, #188]	; (58c0 <usb_isr+0x614>)
    5802:	4c30      	ldr	r4, [pc, #192]	; (58c4 <usb_isr+0x618>)
		USB0_CTL = USB_CTL_ODDRST;
    5804:	2502      	movs	r5, #2
    5806:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    580a:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    580c:	482e      	ldr	r0, [pc, #184]	; (58c8 <usb_isr+0x61c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    580e:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    5810:	4d2e      	ldr	r5, [pc, #184]	; (58cc <usb_isr+0x620>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    5812:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    5814:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5816:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    5818:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    581a:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    581c:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    581e:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5820:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    5824:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    5826:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    5828:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    582c:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    5830:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    5834:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    5838:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    583c:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    5840:	b005      	add	sp, #20
    5842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    5846:	4a22      	ldr	r2, [pc, #136]	; (58d0 <usb_isr+0x624>)
    5848:	200f      	movs	r0, #15
    584a:	7010      	strb	r0, [r2, #0]
    584c:	e7be      	b.n	57cc <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    584e:	2f3f      	cmp	r7, #63	; 0x3f
    5850:	d8a7      	bhi.n	57a2 <usb_isr+0x4f6>
    5852:	e690      	b.n	5576 <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    5854:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5858:	2f04      	cmp	r7, #4
    585a:	f63f aee8 	bhi.w	562e <usb_isr+0x382>
    585e:	0c00      	lsrs	r0, r0, #16
    5860:	f47f aee5 	bne.w	562e <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    5864:	4a05      	ldr	r2, [pc, #20]	; (587c <usb_isr+0x5d0>)
    5866:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    586a:	f023 0302 	bic.w	r3, r3, #2
    586e:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    5872:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    5874:	4613      	mov	r3, r2
		break;
    5876:	e64f      	b.n	5518 <usb_isr+0x26c>
    5878:	1fff6318 	.word	0x1fff6318
    587c:	400720c0 	.word	0x400720c0
    5880:	1fff628c 	.word	0x1fff628c
    5884:	1fff6394 	.word	0x1fff6394
    5888:	1fff6390 	.word	0x1fff6390
    588c:	1fff636c 	.word	0x1fff636c
    5890:	1fff6358 	.word	0x1fff6358
    5894:	1fff6368 	.word	0x1fff6368
    5898:	1fff6370 	.word	0x1fff6370
    589c:	1fff6320 	.word	0x1fff6320
    58a0:	1fff6330 	.word	0x1fff6330
    58a4:	1fff6378 	.word	0x1fff6378
    58a8:	40072000 	.word	0x40072000
    58ac:	1fff6312 	.word	0x1fff6312
    58b0:	1fff6387 	.word	0x1fff6387
    58b4:	1fff6388 	.word	0x1fff6388
    58b8:	1fff6311 	.word	0x1fff6311
    58bc:	1fff6310 	.word	0x1fff6310
    58c0:	1fff0000 	.word	0x1fff0000
    58c4:	00400088 	.word	0x00400088
    58c8:	1fff6290 	.word	0x1fff6290
    58cc:	1fff62d0 	.word	0x1fff62d0
    58d0:	1fff636d 	.word	0x1fff636d
    58d4:	1fff6348 	.word	0x1fff6348
		reply_buffer[0] = usb_configuration;
    58d8:	4b48      	ldr	r3, [pc, #288]	; (59fc <usb_isr+0x750>)
    58da:	4949      	ldr	r1, [pc, #292]	; (5a00 <usb_isr+0x754>)
    58dc:	781b      	ldrb	r3, [r3, #0]
    58de:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    58e0:	460b      	mov	r3, r1
		break;
    58e2:	e619      	b.n	5518 <usb_isr+0x26c>
		reply_buffer[0] = 0;
    58e4:	4a46      	ldr	r2, [pc, #280]	; (5a00 <usb_isr+0x754>)
    58e6:	2300      	movs	r3, #0
    58e8:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    58ea:	4b45      	ldr	r3, [pc, #276]	; (5a00 <usb_isr+0x754>)
		datalen = 2;
    58ec:	2202      	movs	r2, #2
		break;
    58ee:	e613      	b.n	5518 <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    58f0:	f04f 0301 	mov.w	r3, #1
    58f4:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    58f6:	4b43      	ldr	r3, [pc, #268]	; (5a04 <usb_isr+0x758>)
    58f8:	42b3      	cmp	r3, r6
    58fa:	f104 0401 	add.w	r4, r4, #1
    58fe:	f47f aeca 	bne.w	5696 <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    5902:	4e41      	ldr	r6, [pc, #260]	; (5a08 <usb_isr+0x75c>)
    5904:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    5906:	f8df 8114 	ldr.w	r8, [pc, #276]	; 5a1c <usb_isr+0x770>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    590a:	4f40      	ldr	r7, [pc, #256]	; (5a0c <usb_isr+0x760>)
		usb_rx_memory_needed = 0;
    590c:	2300      	movs	r3, #0
    590e:	7033      	strb	r3, [r6, #0]
    5910:	2504      	movs	r5, #4
			epconf = *cfg++;
    5912:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    5916:	4a3e      	ldr	r2, [pc, #248]	; (5a10 <usb_isr+0x764>)
    5918:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    591a:	071b      	lsls	r3, r3, #28
    591c:	d425      	bmi.n	596a <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    591e:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    5922:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    5926:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    5928:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    592a:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    592c:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    5930:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    5934:	d1ed      	bne.n	5912 <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5936:	4f37      	ldr	r7, [pc, #220]	; (5a14 <usb_isr+0x768>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5938:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    593a:	783a      	ldrb	r2, [r7, #0]
    593c:	f042 0002 	orr.w	r0, r2, #2
    5940:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    5944:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5948:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    594c:	2d00      	cmp	r5, #0
    594e:	d14d      	bne.n	59ec <usb_isr+0x740>
    5950:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    5952:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    5956:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    5958:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    595a:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    595e:	2301      	movs	r3, #1
    5960:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    5964:	e52b      	b.n	53be <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    5966:	7025      	strb	r5, [r4, #0]
				break;
    5968:	e7c5      	b.n	58f6 <usb_isr+0x64a>
				p = usb_malloc();
    596a:	f000 f8c3 	bl	5af4 <usb_malloc>
				if (p) {
    596e:	2800      	cmp	r0, #0
    5970:	d032      	beq.n	59d8 <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    5972:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    5976:	3008      	adds	r0, #8
    5978:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    597a:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    597e:	f000 f8b9 	bl	5af4 <usb_malloc>
				if (p) {
    5982:	b308      	cbz	r0, 59c8 <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    5984:	f045 0301 	orr.w	r3, r5, #1
    5988:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    598c:	3008      	adds	r0, #8
    598e:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5990:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    5994:	e7c3      	b.n	591e <usb_isr+0x672>
			if (list->addr == NULL) break;
    5996:	4a20      	ldr	r2, [pc, #128]	; (5a18 <usb_isr+0x76c>)
    5998:	6853      	ldr	r3, [r2, #4]
    599a:	2b00      	cmp	r3, #0
    599c:	f43f ae47 	beq.w	562e <usb_isr+0x382>
    59a0:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    59a2:	b2bf      	uxth	r7, r7
    59a4:	e004      	b.n	59b0 <usb_isr+0x704>
			if (list->addr == NULL) break;
    59a6:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    59a8:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    59aa:	2b00      	cmp	r3, #0
    59ac:	f43f ae3f 	beq.w	562e <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    59b0:	8811      	ldrh	r1, [r2, #0]
    59b2:	4281      	cmp	r1, r0
    59b4:	d1f7      	bne.n	59a6 <usb_isr+0x6fa>
    59b6:	8851      	ldrh	r1, [r2, #2]
    59b8:	42b9      	cmp	r1, r7
    59ba:	d1f4      	bne.n	59a6 <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    59bc:	0a00      	lsrs	r0, r0, #8
    59be:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    59c0:	bf0c      	ite	eq
    59c2:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    59c4:	8912      	ldrhne	r2, [r2, #8]
    59c6:	e5a7      	b.n	5518 <usb_isr+0x26c>
					usb_rx_memory_needed++;
    59c8:	7833      	ldrb	r3, [r6, #0]
    59ca:	3301      	adds	r3, #1
    59cc:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    59ce:	f045 0301 	orr.w	r3, r5, #1
    59d2:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    59d6:	e7a2      	b.n	591e <usb_isr+0x672>
					usb_rx_memory_needed++;
    59d8:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    59da:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    59de:	3301      	adds	r3, #1
    59e0:	7033      	strb	r3, [r6, #0]
    59e2:	e7cc      	b.n	597e <usb_isr+0x6d2>
		data = reply_buffer;
    59e4:	4b06      	ldr	r3, [pc, #24]	; (5a00 <usb_isr+0x754>)
		datalen = 2;
    59e6:	2202      	movs	r2, #2
    59e8:	e596      	b.n	5518 <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    59ea:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    59ec:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    59ee:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    59f0:	f082 0601 	eor.w	r6, r2, #1
    59f4:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    59f6:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    59fa:	e5bc      	b.n	5576 <usb_isr+0x2ca>
    59fc:	1fff636c 	.word	0x1fff636c
    5a00:	1fff6318 	.word	0x1fff6318
    5a04:	1fff6330 	.word	0x1fff6330
    5a08:	1fff6378 	.word	0x1fff6378
    5a0c:	00400088 	.word	0x00400088
    5a10:	400720c0 	.word	0x400720c0
    5a14:	1fff6310 	.word	0x1fff6310
    5a18:	0000d6f0 	.word	0x0000d6f0
    5a1c:	0000d744 	.word	0x0000d744

00005a20 <usb_init>:



void usb_init(void)
{
    5a20:	b510      	push	{r4, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    5a22:	f000 fb2f 	bl	6084 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    5a26:	2300      	movs	r3, #0
    5a28:	4a23      	ldr	r2, [pc, #140]	; (5ab8 <usb_init+0x98>)
		table[i].desc = 0;
    5a2a:	4619      	mov	r1, r3
    5a2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    5a30:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    5a34:	3301      	adds	r3, #1
    5a36:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    5a38:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    5a3a:	d1f7      	bne.n	5a2c <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5a3c:	481f      	ldr	r0, [pc, #124]	; (5abc <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    5a3e:	4c20      	ldr	r4, [pc, #128]	; (5ac0 <usb_init+0xa0>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5a40:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    5a46:	6343      	str	r3, [r0, #52]	; 0x34
	MPU_RGDAAC0 |= 0x03000000;
    5a48:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    5a4c:	f500 3028 	add.w	r0, r0, #172032	; 0x2a000
    5a50:	f500 7080 	add.w	r0, r0, #256	; 0x100
	MPU_RGDAAC0 |= 0x03000000;
    5a54:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
    5a58:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    5a5c:	2403      	movs	r4, #3
    5a5e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    5a62:	4b18      	ldr	r3, [pc, #96]	; (5ac4 <usb_init+0xa4>)
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    5a64:	24a0      	movs	r4, #160	; 0xa0
    5a66:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    5a6a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    5a6e:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5a72:	f3c2 4407 	ubfx	r4, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5a76:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5a78:	f883 40b0 	strb.w	r4, [r3, #176]	; 0xb0

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5a7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5a80:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    5a84:	2201      	movs	r2, #1
	USB0_ISTAT = 0xFF;
    5a86:	f883 c080 	strb.w	ip, [r3, #128]	; 0x80

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5a8a:	4c0f      	ldr	r4, [pc, #60]	; (5ac8 <usb_init+0xa8>)
	USB0_ERRSTAT = 0xFF;
    5a8c:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    5a90:	f883 c010 	strb.w	ip, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    5a94:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    5a98:	7001      	strb	r1, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5a9a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	USB0_INTEN = USB_INTEN_USBRSTEN;
    5a9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5aa2:	f04f 0c70 	mov.w	ip, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5aa6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    5aaa:	2310      	movs	r3, #16
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5aac:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5ab0:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    5ab4:	7203      	strb	r3, [r0, #8]
}
    5ab6:	bd10      	pop	{r4, pc}
    5ab8:	1fff0000 	.word	0x1fff0000
    5abc:	40048000 	.word	0x40048000
    5ac0:	4000d000 	.word	0x4000d000
    5ac4:	40072000 	.word	0x40072000
    5ac8:	e000e400 	.word	0xe000e400

00005acc <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    5acc:	f000 b8ac 	b.w	5c28 <usb_serial_flush_input>

00005ad0 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    5ad0:	f000 b87c 	b.w	5bcc <usb_serial_peekchar>

00005ad4 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    5ad4:	f000 b856 	b.w	5b84 <usb_serial_getchar>

00005ad8 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    5ad8:	f000 b890 	b.w	5bfc <usb_serial_available>

00005adc <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    5adc:	f000 b978 	b.w	5dd0 <usb_serial_flush_output>

00005ae0 <usb_serial_class::availableForWrite()>:
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    5ae0:	f000 b952 	b.w	5d88 <usb_serial_write_buffer_free>

00005ae4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5ae4:	4608      	mov	r0, r1
    5ae6:	4611      	mov	r1, r2
    5ae8:	f000 b8ba 	b.w	5c60 <usb_serial_write>

00005aec <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5aec:	4608      	mov	r0, r1
    5aee:	f000 b93d 	b.w	5d6c <usb_serial_putchar>
    5af2:	bf00      	nop

00005af4 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    5af4:	b672      	cpsid	i
	avail = usb_buffer_available;
    5af6:	490d      	ldr	r1, [pc, #52]	; (5b2c <usb_malloc+0x38>)
    5af8:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    5afa:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    5afe:	280b      	cmp	r0, #11
    5b00:	dc10      	bgt.n	5b24 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    5b02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5b06:	40c2      	lsrs	r2, r0
    5b08:	ea23 0302 	bic.w	r3, r3, r2
    5b0c:	600b      	str	r3, [r1, #0]
	__enable_irq();
    5b0e:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    5b10:	4a07      	ldr	r2, [pc, #28]	; (5b30 <usb_malloc+0x3c>)
    5b12:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    5b16:	00c1      	lsls	r1, r0, #3
    5b18:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    5b1c:	2300      	movs	r3, #0
    5b1e:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    5b20:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    5b22:	4770      	bx	lr
		__enable_irq();
    5b24:	b662      	cpsie	i
		return NULL;
    5b26:	2000      	movs	r0, #0
    5b28:	4770      	bx	lr
    5b2a:	bf00      	nop
    5b2c:	1fff0780 	.word	0x1fff0780
    5b30:	1fff03d0 	.word	0x1fff03d0

00005b34 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    5b34:	4b0e      	ldr	r3, [pc, #56]	; (5b70 <usb_free+0x3c>)
    5b36:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    5b38:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    5b3c:	d210      	bcs.n	5b60 <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    5b3e:	4a0d      	ldr	r2, [pc, #52]	; (5b74 <usb_free+0x40>)
    5b40:	7812      	ldrb	r2, [r2, #0]
    5b42:	b972      	cbnz	r2, 5b62 <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    5b44:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    5b46:	4a0c      	ldr	r2, [pc, #48]	; (5b78 <usb_free+0x44>)
	usb_buffer_available |= mask;
    5b48:	490c      	ldr	r1, [pc, #48]	; (5b7c <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    5b4a:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    5b4e:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    5b50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    5b54:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    5b56:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    5b5a:	4303      	orrs	r3, r0
    5b5c:	600b      	str	r3, [r1, #0]
	__enable_irq();
    5b5e:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    5b60:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    5b62:	4a07      	ldr	r2, [pc, #28]	; (5b80 <usb_free+0x4c>)
    5b64:	7812      	ldrb	r2, [r2, #0]
    5b66:	2a00      	cmp	r2, #0
    5b68:	d0ec      	beq.n	5b44 <usb_free+0x10>
		usb_rx_memory(p);
    5b6a:	f7ff bb19 	b.w	51a0 <usb_rx_memory>
    5b6e:	bf00      	nop
    5b70:	1fff03d0 	.word	0x1fff03d0
    5b74:	1fff6378 	.word	0x1fff6378
    5b78:	38e38e39 	.word	0x38e38e39
    5b7c:	1fff0780 	.word	0x1fff0780
    5b80:	1fff636c 	.word	0x1fff636c

00005b84 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    5b84:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    5b86:	4c0f      	ldr	r4, [pc, #60]	; (5bc4 <usb_serial_getchar+0x40>)
    5b88:	6820      	ldr	r0, [r4, #0]
    5b8a:	b178      	cbz	r0, 5bac <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    5b8c:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    5b8e:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    5b90:	18c1      	adds	r1, r0, r3
    5b92:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    5b94:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    5b96:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    5b98:	d902      	bls.n	5ba0 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    5b9a:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    5b9c:	4628      	mov	r0, r5
    5b9e:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    5ba0:	f7ff ffc8 	bl	5b34 <usb_free>
		rx_packet = NULL;
    5ba4:	2300      	movs	r3, #0
    5ba6:	6023      	str	r3, [r4, #0]
}
    5ba8:	4628      	mov	r0, r5
    5baa:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    5bac:	4b06      	ldr	r3, [pc, #24]	; (5bc8 <usb_serial_getchar+0x44>)
    5bae:	781b      	ldrb	r3, [r3, #0]
    5bb0:	b12b      	cbz	r3, 5bbe <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5bb2:	2003      	movs	r0, #3
    5bb4:	f7ff fabe 	bl	5134 <usb_rx>
    5bb8:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    5bba:	2800      	cmp	r0, #0
    5bbc:	d1e6      	bne.n	5b8c <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    5bbe:	f04f 35ff 	mov.w	r5, #4294967295
    5bc2:	e7eb      	b.n	5b9c <usb_serial_getchar+0x18>
    5bc4:	1fff637c 	.word	0x1fff637c
    5bc8:	1fff636c 	.word	0x1fff636c

00005bcc <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    5bcc:	b510      	push	{r4, lr}
	if (!rx_packet) {
    5bce:	4c09      	ldr	r4, [pc, #36]	; (5bf4 <usb_serial_peekchar+0x28>)
    5bd0:	6820      	ldr	r0, [r4, #0]
    5bd2:	b118      	cbz	r0, 5bdc <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    5bd4:	8843      	ldrh	r3, [r0, #2]
    5bd6:	4418      	add	r0, r3
    5bd8:	7a00      	ldrb	r0, [r0, #8]
}
    5bda:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    5bdc:	4b06      	ldr	r3, [pc, #24]	; (5bf8 <usb_serial_peekchar+0x2c>)
    5bde:	781b      	ldrb	r3, [r3, #0]
    5be0:	b12b      	cbz	r3, 5bee <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5be2:	2003      	movs	r0, #3
    5be4:	f7ff faa6 	bl	5134 <usb_rx>
    5be8:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    5bea:	2800      	cmp	r0, #0
    5bec:	d1f2      	bne.n	5bd4 <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    5bee:	f04f 30ff 	mov.w	r0, #4294967295
}
    5bf2:	bd10      	pop	{r4, pc}
    5bf4:	1fff637c 	.word	0x1fff637c
    5bf8:	1fff636c 	.word	0x1fff636c

00005bfc <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5bfc:	4b08      	ldr	r3, [pc, #32]	; (5c20 <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    5bfe:	4a09      	ldr	r2, [pc, #36]	; (5c24 <usb_serial_available+0x28>)
    5c00:	681b      	ldr	r3, [r3, #0]
{
    5c02:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    5c04:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5c06:	b11b      	cbz	r3, 5c10 <usb_serial_available+0x14>
    5c08:	881a      	ldrh	r2, [r3, #0]
    5c0a:	885b      	ldrh	r3, [r3, #2]
    5c0c:	1ad3      	subs	r3, r2, r3
    5c0e:	441c      	add	r4, r3
	if (count == 0) yield();
    5c10:	b10c      	cbz	r4, 5c16 <usb_serial_available+0x1a>
	return count;
}
    5c12:	4620      	mov	r0, r4
    5c14:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    5c16:	f000 f92b 	bl	5e70 <yield>
}
    5c1a:	4620      	mov	r0, r4
    5c1c:	bd10      	pop	{r4, pc}
    5c1e:	bf00      	nop
    5c20:	1fff637c 	.word	0x1fff637c
    5c24:	1fff6370 	.word	0x1fff6370

00005c28 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    5c28:	4b0b      	ldr	r3, [pc, #44]	; (5c58 <usb_serial_flush_input+0x30>)
    5c2a:	781b      	ldrb	r3, [r3, #0]
    5c2c:	b19b      	cbz	r3, 5c56 <usb_serial_flush_input+0x2e>
{
    5c2e:	b510      	push	{r4, lr}
	if (rx_packet) {
    5c30:	4c0a      	ldr	r4, [pc, #40]	; (5c5c <usb_serial_flush_input+0x34>)
    5c32:	6820      	ldr	r0, [r4, #0]
    5c34:	b148      	cbz	r0, 5c4a <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    5c36:	f7ff ff7d 	bl	5b34 <usb_free>
		rx_packet = NULL;
    5c3a:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5c3c:	2003      	movs	r0, #3
		rx_packet = NULL;
    5c3e:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    5c40:	f7ff fa78 	bl	5134 <usb_rx>
		if (!rx) break;
    5c44:	b130      	cbz	r0, 5c54 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    5c46:	f7ff ff75 	bl	5b34 <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    5c4a:	2003      	movs	r0, #3
    5c4c:	f7ff fa72 	bl	5134 <usb_rx>
		if (!rx) break;
    5c50:	2800      	cmp	r0, #0
    5c52:	d1f8      	bne.n	5c46 <usb_serial_flush_input+0x1e>
	}
}
    5c54:	bd10      	pop	{r4, pc}
    5c56:	4770      	bx	lr
    5c58:	1fff636c 	.word	0x1fff636c
    5c5c:	1fff637c 	.word	0x1fff637c

00005c60 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    5c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5c64:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 5d60 <usb_serial_write+0x100>
{
    5c68:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    5c6a:	2201      	movs	r2, #1
    5c6c:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    5c70:	9101      	str	r1, [sp, #4]
    5c72:	b379      	cbz	r1, 5cd4 <usb_serial_write+0x74>
    5c74:	4f37      	ldr	r7, [pc, #220]	; (5d54 <usb_serial_write+0xf4>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5c76:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 5d64 <usb_serial_write+0x104>
	while (size > 0) {
    5c7a:	9d01      	ldr	r5, [sp, #4]
    5c7c:	4e36      	ldr	r6, [pc, #216]	; (5d58 <usb_serial_write+0xf8>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    5c7e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 5d68 <usb_serial_write+0x108>
    5c82:	4683      	mov	fp, r0
		if (!tx_packet) {
    5c84:	6838      	ldr	r0, [r7, #0]
    5c86:	b3a8      	cbz	r0, 5cf4 <usb_serial_write+0x94>
		len = CDC_TX_SIZE - tx_packet->index;
    5c88:	f8b0 e002 	ldrh.w	lr, [r0, #2]
    5c8c:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    5c90:	45ac      	cmp	ip, r5
    5c92:	bf28      	it	cs
    5c94:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    5c96:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    5c9a:	2200      	movs	r2, #0
		tx_packet->index += len;
    5c9c:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    5c9e:	7032      	strb	r2, [r6, #0]
		size -= len;
    5ca0:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    5ca4:	8044      	strh	r4, [r0, #2]
		dest = tx_packet->buf + tx_packet->index;
    5ca6:	f100 0208 	add.w	r2, r0, #8
		while (len-- > 0) *dest++ = *src++;
    5caa:	f1bc 0f00 	cmp.w	ip, #0
    5cae:	d00a      	beq.n	5cc6 <usb_serial_write+0x66>
    5cb0:	f10e 3eff 	add.w	lr, lr, #4294967295
    5cb4:	4472      	add	r2, lr
    5cb6:	44dc      	add	ip, fp
    5cb8:	f81b 4b01 	ldrb.w	r4, [fp], #1
    5cbc:	f802 4f01 	strb.w	r4, [r2, #1]!
    5cc0:	45dc      	cmp	ip, fp
    5cc2:	d1f9      	bne.n	5cb8 <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    5cc4:	8844      	ldrh	r4, [r0, #2]
    5cc6:	2c3f      	cmp	r4, #63	; 0x3f
    5cc8:	d80b      	bhi.n	5ce2 <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    5cca:	2205      	movs	r2, #5
    5ccc:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    5cd0:	2d00      	cmp	r5, #0
    5cd2:	d1d7      	bne.n	5c84 <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    5cd4:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    5cd6:	2300      	movs	r3, #0
    5cd8:	f889 3000 	strb.w	r3, [r9]
}
    5cdc:	b003      	add	sp, #12
    5cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    5ce2:	2240      	movs	r2, #64	; 0x40
    5ce4:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5ce6:	4601      	mov	r1, r0
    5ce8:	2004      	movs	r0, #4
    5cea:	f7ff fa9b 	bl	5224 <usb_tx>
			tx_packet = NULL;
    5cee:	2200      	movs	r2, #0
    5cf0:	603a      	str	r2, [r7, #0]
    5cf2:	e7ea      	b.n	5cca <usb_serial_write+0x6a>
				if (!usb_configuration) {
    5cf4:	f898 2000 	ldrb.w	r2, [r8]
    5cf8:	b31a      	cbz	r2, 5d42 <usb_serial_write+0xe2>
    5cfa:	4c18      	ldr	r4, [pc, #96]	; (5d5c <usb_serial_write+0xfc>)
    5cfc:	e008      	b.n	5d10 <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5cfe:	3c01      	subs	r4, #1
    5d00:	d018      	beq.n	5d34 <usb_serial_write+0xd4>
    5d02:	7832      	ldrb	r2, [r6, #0]
    5d04:	b9b2      	cbnz	r2, 5d34 <usb_serial_write+0xd4>
				yield();
    5d06:	f000 f8b3 	bl	5e70 <yield>
				if (!usb_configuration) {
    5d0a:	f898 2000 	ldrb.w	r2, [r8]
    5d0e:	b1c2      	cbz	r2, 5d42 <usb_serial_write+0xe2>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    5d10:	2004      	movs	r0, #4
    5d12:	f7ff fa2f 	bl	5174 <usb_tx_packet_count>
    5d16:	2807      	cmp	r0, #7
    5d18:	d8f1      	bhi.n	5cfe <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    5d1a:	f04f 0301 	mov.w	r3, #1
    5d1e:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    5d22:	f7ff fee7 	bl	5af4 <usb_malloc>
    5d26:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    5d28:	2800      	cmp	r0, #0
    5d2a:	d1ad      	bne.n	5c88 <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5d2c:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    5d2e:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5d32:	d1e6      	bne.n	5d02 <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    5d34:	2301      	movs	r3, #1
					return -1;
    5d36:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    5d3a:	7033      	strb	r3, [r6, #0]
}
    5d3c:	b003      	add	sp, #12
    5d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    5d42:	2300      	movs	r3, #0
					return -1;
    5d44:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    5d48:	f889 3000 	strb.w	r3, [r9]
}
    5d4c:	b003      	add	sp, #12
    5d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d52:	bf00      	nop
    5d54:	1fff6384 	.word	0x1fff6384
    5d58:	1fff6380 	.word	0x1fff6380
    5d5c:	00014821 	.word	0x00014821
    5d60:	1fff6381 	.word	0x1fff6381
    5d64:	1fff636c 	.word	0x1fff636c
    5d68:	1fff6398 	.word	0x1fff6398

00005d6c <usb_serial_putchar>:
{
    5d6c:	b500      	push	{lr}
    5d6e:	b083      	sub	sp, #12
    5d70:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    5d72:	2101      	movs	r1, #1
    5d74:	f10d 0007 	add.w	r0, sp, #7
{
    5d78:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    5d7c:	f7ff ff70 	bl	5c60 <usb_serial_write>
}
    5d80:	b003      	add	sp, #12
    5d82:	f85d fb04 	ldr.w	pc, [sp], #4
    5d86:	bf00      	nop

00005d88 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    5d88:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    5d8a:	4d0e      	ldr	r5, [pc, #56]	; (5dc4 <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    5d8c:	4c0e      	ldr	r4, [pc, #56]	; (5dc8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    5d8e:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    5d90:	2301      	movs	r3, #1
    5d92:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    5d94:	b128      	cbz	r0, 5da2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    5d96:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    5d98:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    5d9a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    5d9e:	7023      	strb	r3, [r4, #0]
	return len;
}
    5da0:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    5da2:	4b0a      	ldr	r3, [pc, #40]	; (5dcc <usb_serial_write_buffer_free+0x44>)
    5da4:	781b      	ldrb	r3, [r3, #0]
    5da6:	b913      	cbnz	r3, 5dae <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    5da8:	2000      	movs	r0, #0
    5daa:	7020      	strb	r0, [r4, #0]
}
    5dac:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    5dae:	2004      	movs	r0, #4
    5db0:	f7ff f9e0 	bl	5174 <usb_tx_packet_count>
		if (!usb_configuration ||
    5db4:	2807      	cmp	r0, #7
    5db6:	d8f7      	bhi.n	5da8 <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    5db8:	f7ff fe9c 	bl	5af4 <usb_malloc>
    5dbc:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    5dbe:	2800      	cmp	r0, #0
    5dc0:	d1e9      	bne.n	5d96 <usb_serial_write_buffer_free+0xe>
    5dc2:	e7f1      	b.n	5da8 <usb_serial_write_buffer_free+0x20>
    5dc4:	1fff6384 	.word	0x1fff6384
    5dc8:	1fff6381 	.word	0x1fff6381
    5dcc:	1fff636c 	.word	0x1fff636c

00005dd0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    5dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    5dd2:	4b11      	ldr	r3, [pc, #68]	; (5e18 <usb_serial_flush_output+0x48>)
    5dd4:	781b      	ldrb	r3, [r3, #0]
    5dd6:	b18b      	cbz	r3, 5dfc <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    5dd8:	4e10      	ldr	r6, [pc, #64]	; (5e1c <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    5dda:	4d11      	ldr	r5, [pc, #68]	; (5e20 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    5ddc:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    5dde:	2701      	movs	r7, #1
    5de0:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    5de2:	b164      	cbz	r4, 5dfe <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    5de4:	4b0f      	ldr	r3, [pc, #60]	; (5e24 <usb_serial_flush_output+0x54>)
    5de6:	2700      	movs	r7, #0
    5de8:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    5dea:	8863      	ldrh	r3, [r4, #2]
    5dec:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5dee:	4621      	mov	r1, r4
    5df0:	2004      	movs	r0, #4
    5df2:	f7ff fa17 	bl	5224 <usb_tx>
		tx_packet = NULL;
    5df6:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    5df8:	2300      	movs	r3, #0
    5dfa:	702b      	strb	r3, [r5, #0]
}
    5dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    5dfe:	f7ff fe79 	bl	5af4 <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    5e02:	4b08      	ldr	r3, [pc, #32]	; (5e24 <usb_serial_flush_output+0x54>)
		if (tx) {
    5e04:	4601      	mov	r1, r0
    5e06:	b120      	cbz	r0, 5e12 <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    5e08:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    5e0a:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    5e0c:	f7ff fa0a 	bl	5224 <usb_tx>
    5e10:	e7f2      	b.n	5df8 <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    5e12:	701f      	strb	r7, [r3, #0]
    5e14:	e7f0      	b.n	5df8 <usb_serial_flush_output+0x28>
    5e16:	bf00      	nop
    5e18:	1fff636c 	.word	0x1fff636c
    5e1c:	1fff6384 	.word	0x1fff6384
    5e20:	1fff6381 	.word	0x1fff6381
    5e24:	1fff6398 	.word	0x1fff6398

00005e28 <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    5e28:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    5e2a:	4b0e      	ldr	r3, [pc, #56]	; (5e64 <usb_serial_flush_callback+0x3c>)
    5e2c:	781b      	ldrb	r3, [r3, #0]
    5e2e:	b953      	cbnz	r3, 5e46 <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    5e30:	4c0d      	ldr	r4, [pc, #52]	; (5e68 <usb_serial_flush_callback+0x40>)
    5e32:	6821      	ldr	r1, [r4, #0]
    5e34:	b141      	cbz	r1, 5e48 <usb_serial_flush_callback+0x20>
    5e36:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    5e3a:	884b      	ldrh	r3, [r1, #2]
    5e3c:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5e3e:	2004      	movs	r0, #4
    5e40:	f7ff f9f0 	bl	5224 <usb_tx>
		tx_packet = NULL;
    5e44:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    5e46:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    5e48:	f7ff fe54 	bl	5af4 <usb_malloc>
		if (tx) {
    5e4c:	4601      	mov	r1, r0
    5e4e:	b120      	cbz	r0, 5e5a <usb_serial_flush_callback+0x32>
}
    5e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    5e54:	2004      	movs	r0, #4
    5e56:	f7ff b9e5 	b.w	5224 <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    5e5a:	4b04      	ldr	r3, [pc, #16]	; (5e6c <usb_serial_flush_callback+0x44>)
    5e5c:	2201      	movs	r2, #1
    5e5e:	701a      	strb	r2, [r3, #0]
}
    5e60:	bd38      	pop	{r3, r4, r5, pc}
    5e62:	bf00      	nop
    5e64:	1fff6381 	.word	0x1fff6381
    5e68:	1fff6384 	.word	0x1fff6384
    5e6c:	1fff6398 	.word	0x1fff6398

00005e70 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    5e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    5e74:	4e32      	ldr	r6, [pc, #200]	; (5f40 <yield+0xd0>)
    5e76:	7833      	ldrb	r3, [r6, #0]
    5e78:	b163      	cbz	r3, 5e94 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    5e7a:	4f32      	ldr	r7, [pc, #200]	; (5f44 <yield+0xd4>)
    5e7c:	783a      	ldrb	r2, [r7, #0]
    5e7e:	b94a      	cbnz	r2, 5e94 <yield+0x24>
	running = 1;
    5e80:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    5e82:	07d9      	lsls	r1, r3, #31
	running = 1;
    5e84:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    5e86:	d443      	bmi.n	5f10 <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    5e88:	079a      	lsls	r2, r3, #30
    5e8a:	d426      	bmi.n	5eda <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    5e8c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    5e8e:	075b      	lsls	r3, r3, #29
	running = 0;
    5e90:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    5e92:	d401      	bmi.n	5e98 <yield+0x28>
	
};
    5e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    5e98:	4b2b      	ldr	r3, [pc, #172]	; (5f48 <yield+0xd8>)
    5e9a:	681a      	ldr	r2, [r3, #0]
    5e9c:	2a00      	cmp	r2, #0
    5e9e:	d0f9      	beq.n	5e94 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    5ea0:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    5ea4:	2a00      	cmp	r2, #0
    5ea6:	d1f5      	bne.n	5e94 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5ea8:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    5eac:	b672      	cpsid	i
		EventResponder *first = firstYield;
    5eae:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    5eb0:	2800      	cmp	r0, #0
    5eb2:	d03a      	beq.n	5f2a <yield+0xba>
		if (runningFromYield) {
    5eb4:	4c25      	ldr	r4, [pc, #148]	; (5f4c <yield+0xdc>)
    5eb6:	7821      	ldrb	r1, [r4, #0]
    5eb8:	2900      	cmp	r1, #0
    5eba:	d136      	bne.n	5f2a <yield+0xba>
		firstYield = first->_next;
    5ebc:	6942      	ldr	r2, [r0, #20]
    5ebe:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    5ec0:	2301      	movs	r3, #1
    5ec2:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    5ec4:	2a00      	cmp	r2, #0
    5ec6:	d037      	beq.n	5f38 <yield+0xc8>
			firstYield->_prev = nullptr;
    5ec8:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5eca:	b905      	cbnz	r5, 5ece <yield+0x5e>
    5ecc:	b662      	cpsie	i
		first->_triggered = false;
    5ece:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    5ed0:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    5ed2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    5ed4:	4798      	blx	r3
		runningFromYield = false;
    5ed6:	7025      	strb	r5, [r4, #0]
    5ed8:	e7dc      	b.n	5e94 <yield+0x24>
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    5eda:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5f58 <yield+0xe8>
    5ede:	f898 2000 	ldrb.w	r2, [r8]
    5ee2:	2a00      	cmp	r2, #0
    5ee4:	d0d2      	beq.n	5e8c <yield+0x1c>
    5ee6:	2500      	movs	r5, #0
    5ee8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 5f5c <yield+0xec>
    5eec:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    5eee:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    5ef2:	6823      	ldr	r3, [r4, #0]
    5ef4:	4620      	mov	r0, r4
    5ef6:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    5ef8:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    5efa:	4798      	blx	r3
    5efc:	b108      	cbz	r0, 5f02 <yield+0x92>
    5efe:	6923      	ldr	r3, [r4, #16]
    5f00:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    5f02:	f898 2000 	ldrb.w	r2, [r8]
    5f06:	b2eb      	uxtb	r3, r5
    5f08:	429a      	cmp	r2, r3
    5f0a:	d8f0      	bhi.n	5eee <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    5f0c:	7833      	ldrb	r3, [r6, #0]
    5f0e:	e7bd      	b.n	5e8c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    5f10:	f7ff fe74 	bl	5bfc <usb_serial_available>
		if (Serial.available()) serialEvent();
    5f14:	b968      	cbnz	r0, 5f32 <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    5f16:	4b0e      	ldr	r3, [pc, #56]	; (5f50 <yield+0xe0>)
    5f18:	781b      	ldrb	r3, [r3, #0]
    5f1a:	b90b      	cbnz	r3, 5f20 <yield+0xb0>
    5f1c:	7833      	ldrb	r3, [r6, #0]
    5f1e:	e7b3      	b.n	5e88 <yield+0x18>
    5f20:	7833      	ldrb	r3, [r6, #0]
    5f22:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    5f26:	7033      	strb	r3, [r6, #0]
    5f28:	e7ae      	b.n	5e88 <yield+0x18>
		if (doit) __enable_irq();
    5f2a:	2d00      	cmp	r5, #0
    5f2c:	d1b2      	bne.n	5e94 <yield+0x24>
    5f2e:	b662      	cpsie	i
    5f30:	e7b0      	b.n	5e94 <yield+0x24>
		if (Serial.available()) serialEvent();
    5f32:	f000 f8a5 	bl	6080 <serialEvent()>
    5f36:	e7ee      	b.n	5f16 <yield+0xa6>
			lastYield = nullptr;
    5f38:	4b06      	ldr	r3, [pc, #24]	; (5f54 <yield+0xe4>)
    5f3a:	601a      	str	r2, [r3, #0]
    5f3c:	e7c5      	b.n	5eca <yield+0x5a>
    5f3e:	bf00      	nop
    5f40:	1fff0784 	.word	0x1fff0784
    5f44:	1fff6399 	.word	0x1fff6399
    5f48:	1fff639c 	.word	0x1fff639c
    5f4c:	1fff63a8 	.word	0x1fff63a8
    5f50:	0000d6ec 	.word	0x0000d6ec
    5f54:	1fff63ac 	.word	0x1fff63ac
    5f58:	1fff63c8 	.word	0x1fff63c8
    5f5c:	1fff63b0 	.word	0x1fff63b0

00005f60 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    5f60:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5f62:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5f66:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    5f68:	4c0c      	ldr	r4, [pc, #48]	; (5f9c <EventResponder::runFromInterrupt()+0x3c>)
    5f6a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5f6c:	b180      	cbz	r0, 5f90 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5f6e:	4e0c      	ldr	r6, [pc, #48]	; (5fa0 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    5f70:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    5f72:	6943      	ldr	r3, [r0, #20]
    5f74:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    5f76:	b173      	cbz	r3, 5f96 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    5f78:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    5f7a:	b902      	cbnz	r2, 5f7e <EventResponder::runFromInterrupt()+0x1e>
    5f7c:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    5f7e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    5f80:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    5f82:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5f84:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5f88:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    5f8a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5f8c:	2800      	cmp	r0, #0
    5f8e:	d1f0      	bne.n	5f72 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    5f90:	b902      	cbnz	r2, 5f94 <EventResponder::runFromInterrupt()+0x34>
    5f92:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    5f94:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    5f96:	6033      	str	r3, [r6, #0]
    5f98:	e7ef      	b.n	5f7a <EventResponder::runFromInterrupt()+0x1a>
    5f9a:	bf00      	nop
    5f9c:	1fff63a4 	.word	0x1fff63a4
    5fa0:	1fff63a0 	.word	0x1fff63a0

00005fa4 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    5fa4:	f7ff bfdc 	b.w	5f60 <EventResponder::runFromInterrupt()>

00005fa8 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    5fa8:	4a02      	ldr	r2, [pc, #8]	; (5fb4 <systick_isr+0xc>)
    5faa:	6813      	ldr	r3, [r2, #0]
    5fac:	3301      	adds	r3, #1
    5fae:	6013      	str	r3, [r2, #0]
}
    5fb0:	4770      	bx	lr
    5fb2:	bf00      	nop
    5fb4:	1fff628c 	.word	0x1fff628c

00005fb8 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    5fb8:	4b2a      	ldr	r3, [pc, #168]	; (6064 <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    5fba:	4a2b      	ldr	r2, [pc, #172]	; (6068 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    5fbc:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    5fbe:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    5fc0:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    5fc2:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    5fc4:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5fc6:	4829      	ldr	r0, [pc, #164]	; (606c <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    5fc8:	2b08      	cmp	r3, #8
    5fca:	d034      	beq.n	6036 <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    5fcc:	2b0a      	cmp	r3, #10
    5fce:	d020      	beq.n	6012 <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    5fd0:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    5fd2:	4b27      	ldr	r3, [pc, #156]	; (6070 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    5fd4:	bf0c      	ite	eq
    5fd6:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    5fd8:	215d      	movne	r1, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    5fda:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    5fdc:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    5fde:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    5fe0:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    5fe2:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    5fe4:	4b23      	ldr	r3, [pc, #140]	; (6074 <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    5fe6:	4921      	ldr	r1, [pc, #132]	; (606c <analog_init+0xb4>)
	if (analog_reference_internal) {
    5fe8:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    5fea:	4a21      	ldr	r2, [pc, #132]	; (6070 <analog_init+0xb8>)
	if (analog_reference_internal) {
    5fec:	b1cb      	cbz	r3, 6022 <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    5fee:	2301      	movs	r3, #1
    5ff0:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    5ff2:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    5ff4:	4b20      	ldr	r3, [pc, #128]	; (6078 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    5ff6:	491d      	ldr	r1, [pc, #116]	; (606c <analog_init+0xb4>)
	num = analog_num_average;
    5ff8:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    5ffa:	4a1d      	ldr	r2, [pc, #116]	; (6070 <analog_init+0xb8>)
	if (num <= 1) {
    5ffc:	2b01      	cmp	r3, #1
    5ffe:	d913      	bls.n	6028 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    6000:	2b04      	cmp	r3, #4
    6002:	d81b      	bhi.n	603c <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    6004:	2384      	movs	r3, #132	; 0x84
    6006:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    6008:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    600a:	4b1c      	ldr	r3, [pc, #112]	; (607c <analog_init+0xc4>)
    600c:	2201      	movs	r2, #1
    600e:	701a      	strb	r2, [r3, #0]
}
    6010:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6012:	4b17      	ldr	r3, [pc, #92]	; (6070 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6014:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6016:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6018:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    601a:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    601c:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    601e:	60da      	str	r2, [r3, #12]
    6020:	e7e0      	b.n	5fe4 <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    6022:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    6024:	6213      	str	r3, [r2, #32]
    6026:	e7e5      	b.n	5ff4 <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    6028:	2380      	movs	r3, #128	; 0x80
    602a:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    602c:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    602e:	4b13      	ldr	r3, [pc, #76]	; (607c <analog_init+0xc4>)
    6030:	2201      	movs	r2, #1
    6032:	701a      	strb	r2, [r3, #0]
}
    6034:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    6036:	4b0e      	ldr	r3, [pc, #56]	; (6070 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    6038:	2121      	movs	r1, #33	; 0x21
    603a:	e7ec      	b.n	6016 <analog_init+0x5e>
	} else if (num <= 8) {
    603c:	2b08      	cmp	r3, #8
    603e:	d806      	bhi.n	604e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    6040:	2385      	movs	r3, #133	; 0x85
    6042:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    6044:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    6046:	4b0d      	ldr	r3, [pc, #52]	; (607c <analog_init+0xc4>)
    6048:	2201      	movs	r2, #1
    604a:	701a      	strb	r2, [r3, #0]
}
    604c:	4770      	bx	lr
	} else if (num <= 16) {
    604e:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    6050:	bf94      	ite	ls
    6052:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    6054:	2387      	movhi	r3, #135	; 0x87
    6056:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    6058:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    605a:	4b08      	ldr	r3, [pc, #32]	; (607c <analog_init+0xc4>)
    605c:	2201      	movs	r2, #1
    605e:	701a      	strb	r2, [r3, #0]
}
    6060:	4770      	bx	lr
    6062:	bf00      	nop
    6064:	40074000 	.word	0x40074000
    6068:	1fff0785 	.word	0x1fff0785
    606c:	4003b000 	.word	0x4003b000
    6070:	400bb000 	.word	0x400bb000
    6074:	1fff63c9 	.word	0x1fff63c9
    6078:	1fff0786 	.word	0x1fff0786
    607c:	1fff63ca 	.word	0x1fff63ca

00006080 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    6080:	4770      	bx	lr
    6082:	bf00      	nop

00006084 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    6084:	b510      	push	{r4, lr}
    6086:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    6088:	b672      	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    608a:	f7fe fedb 	bl	4e44 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    608e:	4a17      	ldr	r2, [pc, #92]	; (60ec <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    6090:	4917      	ldr	r1, [pc, #92]	; (60f0 <usb_init_serialnumber+0x6c>)
    6092:	6051      	str	r1, [r2, #4]
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    6094:	2070      	movs	r0, #112	; 0x70
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    6096:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    6098:	7010      	strb	r0, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    609a:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    609c:	7813      	ldrb	r3, [r2, #0]
    609e:	061b      	lsls	r3, r3, #24
    60a0:	d5fc      	bpl.n	609c <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOBB;
    60a2:	68d4      	ldr	r4, [r2, #12]
	kinetis_hsrun_enable();
    60a4:	f7fe fee4 	bl	4e70 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    60a8:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    60aa:	4b12      	ldr	r3, [pc, #72]	; (60f4 <usb_init_serialnumber+0x70>)
    60ac:	429c      	cmp	r4, r3
    60ae:	bf3c      	itt	cc
    60b0:	eb04 0484 	addcc.w	r4, r4, r4, lsl #2
    60b4:	0064      	lslcc	r4, r4, #1
	ultoa(num, buf, 10);
    60b6:	4620      	mov	r0, r4
    60b8:	4c0f      	ldr	r4, [pc, #60]	; (60f8 <usb_init_serialnumber+0x74>)
    60ba:	a901      	add	r1, sp, #4
    60bc:	220a      	movs	r2, #10
    60be:	f7fe feed 	bl	4e9c <ultoa>
	for (i=0; i<10; i++) {
    60c2:	a901      	add	r1, sp, #4
    60c4:	4620      	mov	r0, r4
    60c6:	2300      	movs	r3, #0
		char c = buf[i];
    60c8:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    60cc:	3301      	adds	r3, #1
		if (!c) break;
    60ce:	b13a      	cbz	r2, 60e0 <usb_init_serialnumber+0x5c>
	for (i=0; i<10; i++) {
    60d0:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    60d2:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    60d6:	d1f7      	bne.n	60c8 <usb_init_serialnumber+0x44>
    60d8:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    60da:	7023      	strb	r3, [r4, #0]
}
    60dc:	b004      	add	sp, #16
    60de:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    60e0:	005b      	lsls	r3, r3, #1
    60e2:	b2db      	uxtb	r3, r3
    60e4:	7023      	strb	r3, [r4, #0]
}
    60e6:	b004      	add	sp, #16
    60e8:	bd10      	pop	{r4, pc}
    60ea:	bf00      	nop
    60ec:	40020000 	.word	0x40020000
    60f0:	41070000 	.word	0x41070000
    60f4:	00989680 	.word	0x00989680
    60f8:	1fff0814 	.word	0x1fff0814

000060fc <__aeabi_drsub>:
    60fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    6100:	e002      	b.n	6108 <__adddf3>
    6102:	bf00      	nop

00006104 <__aeabi_dsub>:
    6104:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00006108 <__adddf3>:
    6108:	b530      	push	{r4, r5, lr}
    610a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    610e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    6112:	ea94 0f05 	teq	r4, r5
    6116:	bf08      	it	eq
    6118:	ea90 0f02 	teqeq	r0, r2
    611c:	bf1f      	itttt	ne
    611e:	ea54 0c00 	orrsne.w	ip, r4, r0
    6122:	ea55 0c02 	orrsne.w	ip, r5, r2
    6126:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    612a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    612e:	f000 80e2 	beq.w	62f6 <__adddf3+0x1ee>
    6132:	ea4f 5454 	mov.w	r4, r4, lsr #21
    6136:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    613a:	bfb8      	it	lt
    613c:	426d      	neglt	r5, r5
    613e:	dd0c      	ble.n	615a <__adddf3+0x52>
    6140:	442c      	add	r4, r5
    6142:	ea80 0202 	eor.w	r2, r0, r2
    6146:	ea81 0303 	eor.w	r3, r1, r3
    614a:	ea82 0000 	eor.w	r0, r2, r0
    614e:	ea83 0101 	eor.w	r1, r3, r1
    6152:	ea80 0202 	eor.w	r2, r0, r2
    6156:	ea81 0303 	eor.w	r3, r1, r3
    615a:	2d36      	cmp	r5, #54	; 0x36
    615c:	bf88      	it	hi
    615e:	bd30      	pophi	{r4, r5, pc}
    6160:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6164:	ea4f 3101 	mov.w	r1, r1, lsl #12
    6168:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    616c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    6170:	d002      	beq.n	6178 <__adddf3+0x70>
    6172:	4240      	negs	r0, r0
    6174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6178:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    617c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    6180:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    6184:	d002      	beq.n	618c <__adddf3+0x84>
    6186:	4252      	negs	r2, r2
    6188:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    618c:	ea94 0f05 	teq	r4, r5
    6190:	f000 80a7 	beq.w	62e2 <__adddf3+0x1da>
    6194:	f1a4 0401 	sub.w	r4, r4, #1
    6198:	f1d5 0e20 	rsbs	lr, r5, #32
    619c:	db0d      	blt.n	61ba <__adddf3+0xb2>
    619e:	fa02 fc0e 	lsl.w	ip, r2, lr
    61a2:	fa22 f205 	lsr.w	r2, r2, r5
    61a6:	1880      	adds	r0, r0, r2
    61a8:	f141 0100 	adc.w	r1, r1, #0
    61ac:	fa03 f20e 	lsl.w	r2, r3, lr
    61b0:	1880      	adds	r0, r0, r2
    61b2:	fa43 f305 	asr.w	r3, r3, r5
    61b6:	4159      	adcs	r1, r3
    61b8:	e00e      	b.n	61d8 <__adddf3+0xd0>
    61ba:	f1a5 0520 	sub.w	r5, r5, #32
    61be:	f10e 0e20 	add.w	lr, lr, #32
    61c2:	2a01      	cmp	r2, #1
    61c4:	fa03 fc0e 	lsl.w	ip, r3, lr
    61c8:	bf28      	it	cs
    61ca:	f04c 0c02 	orrcs.w	ip, ip, #2
    61ce:	fa43 f305 	asr.w	r3, r3, r5
    61d2:	18c0      	adds	r0, r0, r3
    61d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    61d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    61dc:	d507      	bpl.n	61ee <__adddf3+0xe6>
    61de:	f04f 0e00 	mov.w	lr, #0
    61e2:	f1dc 0c00 	rsbs	ip, ip, #0
    61e6:	eb7e 0000 	sbcs.w	r0, lr, r0
    61ea:	eb6e 0101 	sbc.w	r1, lr, r1
    61ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    61f2:	d31b      	bcc.n	622c <__adddf3+0x124>
    61f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    61f8:	d30c      	bcc.n	6214 <__adddf3+0x10c>
    61fa:	0849      	lsrs	r1, r1, #1
    61fc:	ea5f 0030 	movs.w	r0, r0, rrx
    6200:	ea4f 0c3c 	mov.w	ip, ip, rrx
    6204:	f104 0401 	add.w	r4, r4, #1
    6208:	ea4f 5244 	mov.w	r2, r4, lsl #21
    620c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    6210:	f080 809a 	bcs.w	6348 <__adddf3+0x240>
    6214:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6218:	bf08      	it	eq
    621a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    621e:	f150 0000 	adcs.w	r0, r0, #0
    6222:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    6226:	ea41 0105 	orr.w	r1, r1, r5
    622a:	bd30      	pop	{r4, r5, pc}
    622c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    6230:	4140      	adcs	r0, r0
    6232:	eb41 0101 	adc.w	r1, r1, r1
    6236:	3c01      	subs	r4, #1
    6238:	bf28      	it	cs
    623a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    623e:	d2e9      	bcs.n	6214 <__adddf3+0x10c>
    6240:	f091 0f00 	teq	r1, #0
    6244:	bf04      	itt	eq
    6246:	4601      	moveq	r1, r0
    6248:	2000      	moveq	r0, #0
    624a:	fab1 f381 	clz	r3, r1
    624e:	bf08      	it	eq
    6250:	3320      	addeq	r3, #32
    6252:	f1a3 030b 	sub.w	r3, r3, #11
    6256:	f1b3 0220 	subs.w	r2, r3, #32
    625a:	da0c      	bge.n	6276 <__adddf3+0x16e>
    625c:	320c      	adds	r2, #12
    625e:	dd08      	ble.n	6272 <__adddf3+0x16a>
    6260:	f102 0c14 	add.w	ip, r2, #20
    6264:	f1c2 020c 	rsb	r2, r2, #12
    6268:	fa01 f00c 	lsl.w	r0, r1, ip
    626c:	fa21 f102 	lsr.w	r1, r1, r2
    6270:	e00c      	b.n	628c <__adddf3+0x184>
    6272:	f102 0214 	add.w	r2, r2, #20
    6276:	bfd8      	it	le
    6278:	f1c2 0c20 	rsble	ip, r2, #32
    627c:	fa01 f102 	lsl.w	r1, r1, r2
    6280:	fa20 fc0c 	lsr.w	ip, r0, ip
    6284:	bfdc      	itt	le
    6286:	ea41 010c 	orrle.w	r1, r1, ip
    628a:	4090      	lslle	r0, r2
    628c:	1ae4      	subs	r4, r4, r3
    628e:	bfa2      	ittt	ge
    6290:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    6294:	4329      	orrge	r1, r5
    6296:	bd30      	popge	{r4, r5, pc}
    6298:	ea6f 0404 	mvn.w	r4, r4
    629c:	3c1f      	subs	r4, #31
    629e:	da1c      	bge.n	62da <__adddf3+0x1d2>
    62a0:	340c      	adds	r4, #12
    62a2:	dc0e      	bgt.n	62c2 <__adddf3+0x1ba>
    62a4:	f104 0414 	add.w	r4, r4, #20
    62a8:	f1c4 0220 	rsb	r2, r4, #32
    62ac:	fa20 f004 	lsr.w	r0, r0, r4
    62b0:	fa01 f302 	lsl.w	r3, r1, r2
    62b4:	ea40 0003 	orr.w	r0, r0, r3
    62b8:	fa21 f304 	lsr.w	r3, r1, r4
    62bc:	ea45 0103 	orr.w	r1, r5, r3
    62c0:	bd30      	pop	{r4, r5, pc}
    62c2:	f1c4 040c 	rsb	r4, r4, #12
    62c6:	f1c4 0220 	rsb	r2, r4, #32
    62ca:	fa20 f002 	lsr.w	r0, r0, r2
    62ce:	fa01 f304 	lsl.w	r3, r1, r4
    62d2:	ea40 0003 	orr.w	r0, r0, r3
    62d6:	4629      	mov	r1, r5
    62d8:	bd30      	pop	{r4, r5, pc}
    62da:	fa21 f004 	lsr.w	r0, r1, r4
    62de:	4629      	mov	r1, r5
    62e0:	bd30      	pop	{r4, r5, pc}
    62e2:	f094 0f00 	teq	r4, #0
    62e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    62ea:	bf06      	itte	eq
    62ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    62f0:	3401      	addeq	r4, #1
    62f2:	3d01      	subne	r5, #1
    62f4:	e74e      	b.n	6194 <__adddf3+0x8c>
    62f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    62fa:	bf18      	it	ne
    62fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    6300:	d029      	beq.n	6356 <__adddf3+0x24e>
    6302:	ea94 0f05 	teq	r4, r5
    6306:	bf08      	it	eq
    6308:	ea90 0f02 	teqeq	r0, r2
    630c:	d005      	beq.n	631a <__adddf3+0x212>
    630e:	ea54 0c00 	orrs.w	ip, r4, r0
    6312:	bf04      	itt	eq
    6314:	4619      	moveq	r1, r3
    6316:	4610      	moveq	r0, r2
    6318:	bd30      	pop	{r4, r5, pc}
    631a:	ea91 0f03 	teq	r1, r3
    631e:	bf1e      	ittt	ne
    6320:	2100      	movne	r1, #0
    6322:	2000      	movne	r0, #0
    6324:	bd30      	popne	{r4, r5, pc}
    6326:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    632a:	d105      	bne.n	6338 <__adddf3+0x230>
    632c:	0040      	lsls	r0, r0, #1
    632e:	4149      	adcs	r1, r1
    6330:	bf28      	it	cs
    6332:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    6336:	bd30      	pop	{r4, r5, pc}
    6338:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    633c:	bf3c      	itt	cc
    633e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    6342:	bd30      	popcc	{r4, r5, pc}
    6344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6348:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    634c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    6350:	f04f 0000 	mov.w	r0, #0
    6354:	bd30      	pop	{r4, r5, pc}
    6356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    635a:	bf1a      	itte	ne
    635c:	4619      	movne	r1, r3
    635e:	4610      	movne	r0, r2
    6360:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    6364:	bf1c      	itt	ne
    6366:	460b      	movne	r3, r1
    6368:	4602      	movne	r2, r0
    636a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    636e:	bf06      	itte	eq
    6370:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    6374:	ea91 0f03 	teqeq	r1, r3
    6378:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    637c:	bd30      	pop	{r4, r5, pc}
    637e:	bf00      	nop

00006380 <__aeabi_ui2d>:
    6380:	f090 0f00 	teq	r0, #0
    6384:	bf04      	itt	eq
    6386:	2100      	moveq	r1, #0
    6388:	4770      	bxeq	lr
    638a:	b530      	push	{r4, r5, lr}
    638c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6390:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6394:	f04f 0500 	mov.w	r5, #0
    6398:	f04f 0100 	mov.w	r1, #0
    639c:	e750      	b.n	6240 <__adddf3+0x138>
    639e:	bf00      	nop

000063a0 <__aeabi_i2d>:
    63a0:	f090 0f00 	teq	r0, #0
    63a4:	bf04      	itt	eq
    63a6:	2100      	moveq	r1, #0
    63a8:	4770      	bxeq	lr
    63aa:	b530      	push	{r4, r5, lr}
    63ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
    63b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    63b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    63b8:	bf48      	it	mi
    63ba:	4240      	negmi	r0, r0
    63bc:	f04f 0100 	mov.w	r1, #0
    63c0:	e73e      	b.n	6240 <__adddf3+0x138>
    63c2:	bf00      	nop

000063c4 <__aeabi_f2d>:
    63c4:	0042      	lsls	r2, r0, #1
    63c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
    63ca:	ea4f 0131 	mov.w	r1, r1, rrx
    63ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
    63d2:	bf1f      	itttt	ne
    63d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    63d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    63dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    63e0:	4770      	bxne	lr
    63e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    63e6:	bf08      	it	eq
    63e8:	4770      	bxeq	lr
    63ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    63ee:	bf04      	itt	eq
    63f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    63f4:	4770      	bxeq	lr
    63f6:	b530      	push	{r4, r5, lr}
    63f8:	f44f 7460 	mov.w	r4, #896	; 0x380
    63fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6400:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6404:	e71c      	b.n	6240 <__adddf3+0x138>
    6406:	bf00      	nop

00006408 <__aeabi_ul2d>:
    6408:	ea50 0201 	orrs.w	r2, r0, r1
    640c:	bf08      	it	eq
    640e:	4770      	bxeq	lr
    6410:	b530      	push	{r4, r5, lr}
    6412:	f04f 0500 	mov.w	r5, #0
    6416:	e00a      	b.n	642e <__aeabi_l2d+0x16>

00006418 <__aeabi_l2d>:
    6418:	ea50 0201 	orrs.w	r2, r0, r1
    641c:	bf08      	it	eq
    641e:	4770      	bxeq	lr
    6420:	b530      	push	{r4, r5, lr}
    6422:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    6426:	d502      	bpl.n	642e <__aeabi_l2d+0x16>
    6428:	4240      	negs	r0, r0
    642a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    642e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6432:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6436:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    643a:	f43f aed8 	beq.w	61ee <__adddf3+0xe6>
    643e:	f04f 0203 	mov.w	r2, #3
    6442:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    6446:	bf18      	it	ne
    6448:	3203      	addne	r2, #3
    644a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    644e:	bf18      	it	ne
    6450:	3203      	addne	r2, #3
    6452:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    6456:	f1c2 0320 	rsb	r3, r2, #32
    645a:	fa00 fc03 	lsl.w	ip, r0, r3
    645e:	fa20 f002 	lsr.w	r0, r0, r2
    6462:	fa01 fe03 	lsl.w	lr, r1, r3
    6466:	ea40 000e 	orr.w	r0, r0, lr
    646a:	fa21 f102 	lsr.w	r1, r1, r2
    646e:	4414      	add	r4, r2
    6470:	e6bd      	b.n	61ee <__adddf3+0xe6>
    6472:	bf00      	nop

00006474 <__aeabi_dmul>:
    6474:	b570      	push	{r4, r5, r6, lr}
    6476:	f04f 0cff 	mov.w	ip, #255	; 0xff
    647a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    647e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    6482:	bf1d      	ittte	ne
    6484:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    6488:	ea94 0f0c 	teqne	r4, ip
    648c:	ea95 0f0c 	teqne	r5, ip
    6490:	f000 f8de 	bleq	6650 <__aeabi_dmul+0x1dc>
    6494:	442c      	add	r4, r5
    6496:	ea81 0603 	eor.w	r6, r1, r3
    649a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    649e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    64a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    64a6:	bf18      	it	ne
    64a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    64ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    64b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    64b4:	d038      	beq.n	6528 <__aeabi_dmul+0xb4>
    64b6:	fba0 ce02 	umull	ip, lr, r0, r2
    64ba:	f04f 0500 	mov.w	r5, #0
    64be:	fbe1 e502 	umlal	lr, r5, r1, r2
    64c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    64c6:	fbe0 e503 	umlal	lr, r5, r0, r3
    64ca:	f04f 0600 	mov.w	r6, #0
    64ce:	fbe1 5603 	umlal	r5, r6, r1, r3
    64d2:	f09c 0f00 	teq	ip, #0
    64d6:	bf18      	it	ne
    64d8:	f04e 0e01 	orrne.w	lr, lr, #1
    64dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    64e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    64e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    64e8:	d204      	bcs.n	64f4 <__aeabi_dmul+0x80>
    64ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    64ee:	416d      	adcs	r5, r5
    64f0:	eb46 0606 	adc.w	r6, r6, r6
    64f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    64f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    64fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    6500:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    6504:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    6508:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    650c:	bf88      	it	hi
    650e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    6512:	d81e      	bhi.n	6552 <__aeabi_dmul+0xde>
    6514:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    6518:	bf08      	it	eq
    651a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    651e:	f150 0000 	adcs.w	r0, r0, #0
    6522:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    6526:	bd70      	pop	{r4, r5, r6, pc}
    6528:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    652c:	ea46 0101 	orr.w	r1, r6, r1
    6530:	ea40 0002 	orr.w	r0, r0, r2
    6534:	ea81 0103 	eor.w	r1, r1, r3
    6538:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    653c:	bfc2      	ittt	gt
    653e:	ebd4 050c 	rsbsgt	r5, r4, ip
    6542:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    6546:	bd70      	popgt	{r4, r5, r6, pc}
    6548:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    654c:	f04f 0e00 	mov.w	lr, #0
    6550:	3c01      	subs	r4, #1
    6552:	f300 80ab 	bgt.w	66ac <__aeabi_dmul+0x238>
    6556:	f114 0f36 	cmn.w	r4, #54	; 0x36
    655a:	bfde      	ittt	le
    655c:	2000      	movle	r0, #0
    655e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    6562:	bd70      	pople	{r4, r5, r6, pc}
    6564:	f1c4 0400 	rsb	r4, r4, #0
    6568:	3c20      	subs	r4, #32
    656a:	da35      	bge.n	65d8 <__aeabi_dmul+0x164>
    656c:	340c      	adds	r4, #12
    656e:	dc1b      	bgt.n	65a8 <__aeabi_dmul+0x134>
    6570:	f104 0414 	add.w	r4, r4, #20
    6574:	f1c4 0520 	rsb	r5, r4, #32
    6578:	fa00 f305 	lsl.w	r3, r0, r5
    657c:	fa20 f004 	lsr.w	r0, r0, r4
    6580:	fa01 f205 	lsl.w	r2, r1, r5
    6584:	ea40 0002 	orr.w	r0, r0, r2
    6588:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    658c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6590:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    6594:	fa21 f604 	lsr.w	r6, r1, r4
    6598:	eb42 0106 	adc.w	r1, r2, r6
    659c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    65a0:	bf08      	it	eq
    65a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    65a6:	bd70      	pop	{r4, r5, r6, pc}
    65a8:	f1c4 040c 	rsb	r4, r4, #12
    65ac:	f1c4 0520 	rsb	r5, r4, #32
    65b0:	fa00 f304 	lsl.w	r3, r0, r4
    65b4:	fa20 f005 	lsr.w	r0, r0, r5
    65b8:	fa01 f204 	lsl.w	r2, r1, r4
    65bc:	ea40 0002 	orr.w	r0, r0, r2
    65c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    65c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    65c8:	f141 0100 	adc.w	r1, r1, #0
    65cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    65d0:	bf08      	it	eq
    65d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    65d6:	bd70      	pop	{r4, r5, r6, pc}
    65d8:	f1c4 0520 	rsb	r5, r4, #32
    65dc:	fa00 f205 	lsl.w	r2, r0, r5
    65e0:	ea4e 0e02 	orr.w	lr, lr, r2
    65e4:	fa20 f304 	lsr.w	r3, r0, r4
    65e8:	fa01 f205 	lsl.w	r2, r1, r5
    65ec:	ea43 0302 	orr.w	r3, r3, r2
    65f0:	fa21 f004 	lsr.w	r0, r1, r4
    65f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    65f8:	fa21 f204 	lsr.w	r2, r1, r4
    65fc:	ea20 0002 	bic.w	r0, r0, r2
    6600:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    6604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    6608:	bf08      	it	eq
    660a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    660e:	bd70      	pop	{r4, r5, r6, pc}
    6610:	f094 0f00 	teq	r4, #0
    6614:	d10f      	bne.n	6636 <__aeabi_dmul+0x1c2>
    6616:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    661a:	0040      	lsls	r0, r0, #1
    661c:	eb41 0101 	adc.w	r1, r1, r1
    6620:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6624:	bf08      	it	eq
    6626:	3c01      	subeq	r4, #1
    6628:	d0f7      	beq.n	661a <__aeabi_dmul+0x1a6>
    662a:	ea41 0106 	orr.w	r1, r1, r6
    662e:	f095 0f00 	teq	r5, #0
    6632:	bf18      	it	ne
    6634:	4770      	bxne	lr
    6636:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    663a:	0052      	lsls	r2, r2, #1
    663c:	eb43 0303 	adc.w	r3, r3, r3
    6640:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    6644:	bf08      	it	eq
    6646:	3d01      	subeq	r5, #1
    6648:	d0f7      	beq.n	663a <__aeabi_dmul+0x1c6>
    664a:	ea43 0306 	orr.w	r3, r3, r6
    664e:	4770      	bx	lr
    6650:	ea94 0f0c 	teq	r4, ip
    6654:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    6658:	bf18      	it	ne
    665a:	ea95 0f0c 	teqne	r5, ip
    665e:	d00c      	beq.n	667a <__aeabi_dmul+0x206>
    6660:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    6664:	bf18      	it	ne
    6666:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    666a:	d1d1      	bne.n	6610 <__aeabi_dmul+0x19c>
    666c:	ea81 0103 	eor.w	r1, r1, r3
    6670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6674:	f04f 0000 	mov.w	r0, #0
    6678:	bd70      	pop	{r4, r5, r6, pc}
    667a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    667e:	bf06      	itte	eq
    6680:	4610      	moveq	r0, r2
    6682:	4619      	moveq	r1, r3
    6684:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    6688:	d019      	beq.n	66be <__aeabi_dmul+0x24a>
    668a:	ea94 0f0c 	teq	r4, ip
    668e:	d102      	bne.n	6696 <__aeabi_dmul+0x222>
    6690:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    6694:	d113      	bne.n	66be <__aeabi_dmul+0x24a>
    6696:	ea95 0f0c 	teq	r5, ip
    669a:	d105      	bne.n	66a8 <__aeabi_dmul+0x234>
    669c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    66a0:	bf1c      	itt	ne
    66a2:	4610      	movne	r0, r2
    66a4:	4619      	movne	r1, r3
    66a6:	d10a      	bne.n	66be <__aeabi_dmul+0x24a>
    66a8:	ea81 0103 	eor.w	r1, r1, r3
    66ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    66b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    66b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    66b8:	f04f 0000 	mov.w	r0, #0
    66bc:	bd70      	pop	{r4, r5, r6, pc}
    66be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    66c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    66c6:	bd70      	pop	{r4, r5, r6, pc}

000066c8 <__aeabi_ddiv>:
    66c8:	b570      	push	{r4, r5, r6, lr}
    66ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
    66ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    66d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    66d6:	bf1d      	ittte	ne
    66d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    66dc:	ea94 0f0c 	teqne	r4, ip
    66e0:	ea95 0f0c 	teqne	r5, ip
    66e4:	f000 f8a7 	bleq	6836 <__aeabi_ddiv+0x16e>
    66e8:	eba4 0405 	sub.w	r4, r4, r5
    66ec:	ea81 0e03 	eor.w	lr, r1, r3
    66f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    66f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    66f8:	f000 8088 	beq.w	680c <__aeabi_ddiv+0x144>
    66fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    6700:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    6704:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    6708:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    670c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    6710:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    6714:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    6718:	ea4f 2600 	mov.w	r6, r0, lsl #8
    671c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    6720:	429d      	cmp	r5, r3
    6722:	bf08      	it	eq
    6724:	4296      	cmpeq	r6, r2
    6726:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    672a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    672e:	d202      	bcs.n	6736 <__aeabi_ddiv+0x6e>
    6730:	085b      	lsrs	r3, r3, #1
    6732:	ea4f 0232 	mov.w	r2, r2, rrx
    6736:	1ab6      	subs	r6, r6, r2
    6738:	eb65 0503 	sbc.w	r5, r5, r3
    673c:	085b      	lsrs	r3, r3, #1
    673e:	ea4f 0232 	mov.w	r2, r2, rrx
    6742:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    6746:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    674a:	ebb6 0e02 	subs.w	lr, r6, r2
    674e:	eb75 0e03 	sbcs.w	lr, r5, r3
    6752:	bf22      	ittt	cs
    6754:	1ab6      	subcs	r6, r6, r2
    6756:	4675      	movcs	r5, lr
    6758:	ea40 000c 	orrcs.w	r0, r0, ip
    675c:	085b      	lsrs	r3, r3, #1
    675e:	ea4f 0232 	mov.w	r2, r2, rrx
    6762:	ebb6 0e02 	subs.w	lr, r6, r2
    6766:	eb75 0e03 	sbcs.w	lr, r5, r3
    676a:	bf22      	ittt	cs
    676c:	1ab6      	subcs	r6, r6, r2
    676e:	4675      	movcs	r5, lr
    6770:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    6774:	085b      	lsrs	r3, r3, #1
    6776:	ea4f 0232 	mov.w	r2, r2, rrx
    677a:	ebb6 0e02 	subs.w	lr, r6, r2
    677e:	eb75 0e03 	sbcs.w	lr, r5, r3
    6782:	bf22      	ittt	cs
    6784:	1ab6      	subcs	r6, r6, r2
    6786:	4675      	movcs	r5, lr
    6788:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    678c:	085b      	lsrs	r3, r3, #1
    678e:	ea4f 0232 	mov.w	r2, r2, rrx
    6792:	ebb6 0e02 	subs.w	lr, r6, r2
    6796:	eb75 0e03 	sbcs.w	lr, r5, r3
    679a:	bf22      	ittt	cs
    679c:	1ab6      	subcs	r6, r6, r2
    679e:	4675      	movcs	r5, lr
    67a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    67a4:	ea55 0e06 	orrs.w	lr, r5, r6
    67a8:	d018      	beq.n	67dc <__aeabi_ddiv+0x114>
    67aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
    67ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    67b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    67b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    67ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    67be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    67c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    67c6:	d1c0      	bne.n	674a <__aeabi_ddiv+0x82>
    67c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    67cc:	d10b      	bne.n	67e6 <__aeabi_ddiv+0x11e>
    67ce:	ea41 0100 	orr.w	r1, r1, r0
    67d2:	f04f 0000 	mov.w	r0, #0
    67d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    67da:	e7b6      	b.n	674a <__aeabi_ddiv+0x82>
    67dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    67e0:	bf04      	itt	eq
    67e2:	4301      	orreq	r1, r0
    67e4:	2000      	moveq	r0, #0
    67e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    67ea:	bf88      	it	hi
    67ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    67f0:	f63f aeaf 	bhi.w	6552 <__aeabi_dmul+0xde>
    67f4:	ebb5 0c03 	subs.w	ip, r5, r3
    67f8:	bf04      	itt	eq
    67fa:	ebb6 0c02 	subseq.w	ip, r6, r2
    67fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    6802:	f150 0000 	adcs.w	r0, r0, #0
    6806:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    680a:	bd70      	pop	{r4, r5, r6, pc}
    680c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    6810:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    6814:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    6818:	bfc2      	ittt	gt
    681a:	ebd4 050c 	rsbsgt	r5, r4, ip
    681e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    6822:	bd70      	popgt	{r4, r5, r6, pc}
    6824:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6828:	f04f 0e00 	mov.w	lr, #0
    682c:	3c01      	subs	r4, #1
    682e:	e690      	b.n	6552 <__aeabi_dmul+0xde>
    6830:	ea45 0e06 	orr.w	lr, r5, r6
    6834:	e68d      	b.n	6552 <__aeabi_dmul+0xde>
    6836:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    683a:	ea94 0f0c 	teq	r4, ip
    683e:	bf08      	it	eq
    6840:	ea95 0f0c 	teqeq	r5, ip
    6844:	f43f af3b 	beq.w	66be <__aeabi_dmul+0x24a>
    6848:	ea94 0f0c 	teq	r4, ip
    684c:	d10a      	bne.n	6864 <__aeabi_ddiv+0x19c>
    684e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    6852:	f47f af34 	bne.w	66be <__aeabi_dmul+0x24a>
    6856:	ea95 0f0c 	teq	r5, ip
    685a:	f47f af25 	bne.w	66a8 <__aeabi_dmul+0x234>
    685e:	4610      	mov	r0, r2
    6860:	4619      	mov	r1, r3
    6862:	e72c      	b.n	66be <__aeabi_dmul+0x24a>
    6864:	ea95 0f0c 	teq	r5, ip
    6868:	d106      	bne.n	6878 <__aeabi_ddiv+0x1b0>
    686a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    686e:	f43f aefd 	beq.w	666c <__aeabi_dmul+0x1f8>
    6872:	4610      	mov	r0, r2
    6874:	4619      	mov	r1, r3
    6876:	e722      	b.n	66be <__aeabi_dmul+0x24a>
    6878:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    687c:	bf18      	it	ne
    687e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    6882:	f47f aec5 	bne.w	6610 <__aeabi_dmul+0x19c>
    6886:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    688a:	f47f af0d 	bne.w	66a8 <__aeabi_dmul+0x234>
    688e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    6892:	f47f aeeb 	bne.w	666c <__aeabi_dmul+0x1f8>
    6896:	e712      	b.n	66be <__aeabi_dmul+0x24a>

00006898 <__gedf2>:
    6898:	f04f 3cff 	mov.w	ip, #4294967295
    689c:	e006      	b.n	68ac <__cmpdf2+0x4>
    689e:	bf00      	nop

000068a0 <__ledf2>:
    68a0:	f04f 0c01 	mov.w	ip, #1
    68a4:	e002      	b.n	68ac <__cmpdf2+0x4>
    68a6:	bf00      	nop

000068a8 <__cmpdf2>:
    68a8:	f04f 0c01 	mov.w	ip, #1
    68ac:	f84d cd04 	str.w	ip, [sp, #-4]!
    68b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    68b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    68b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    68bc:	bf18      	it	ne
    68be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    68c2:	d01b      	beq.n	68fc <__cmpdf2+0x54>
    68c4:	b001      	add	sp, #4
    68c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    68ca:	bf0c      	ite	eq
    68cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    68d0:	ea91 0f03 	teqne	r1, r3
    68d4:	bf02      	ittt	eq
    68d6:	ea90 0f02 	teqeq	r0, r2
    68da:	2000      	moveq	r0, #0
    68dc:	4770      	bxeq	lr
    68de:	f110 0f00 	cmn.w	r0, #0
    68e2:	ea91 0f03 	teq	r1, r3
    68e6:	bf58      	it	pl
    68e8:	4299      	cmppl	r1, r3
    68ea:	bf08      	it	eq
    68ec:	4290      	cmpeq	r0, r2
    68ee:	bf2c      	ite	cs
    68f0:	17d8      	asrcs	r0, r3, #31
    68f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    68f6:	f040 0001 	orr.w	r0, r0, #1
    68fa:	4770      	bx	lr
    68fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    6900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6904:	d102      	bne.n	690c <__cmpdf2+0x64>
    6906:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    690a:	d107      	bne.n	691c <__cmpdf2+0x74>
    690c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    6910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6914:	d1d6      	bne.n	68c4 <__cmpdf2+0x1c>
    6916:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    691a:	d0d3      	beq.n	68c4 <__cmpdf2+0x1c>
    691c:	f85d 0b04 	ldr.w	r0, [sp], #4
    6920:	4770      	bx	lr
    6922:	bf00      	nop

00006924 <__aeabi_cdrcmple>:
    6924:	4684      	mov	ip, r0
    6926:	4610      	mov	r0, r2
    6928:	4662      	mov	r2, ip
    692a:	468c      	mov	ip, r1
    692c:	4619      	mov	r1, r3
    692e:	4663      	mov	r3, ip
    6930:	e000      	b.n	6934 <__aeabi_cdcmpeq>
    6932:	bf00      	nop

00006934 <__aeabi_cdcmpeq>:
    6934:	b501      	push	{r0, lr}
    6936:	f7ff ffb7 	bl	68a8 <__cmpdf2>
    693a:	2800      	cmp	r0, #0
    693c:	bf48      	it	mi
    693e:	f110 0f00 	cmnmi.w	r0, #0
    6942:	bd01      	pop	{r0, pc}

00006944 <__aeabi_dcmpeq>:
    6944:	f84d ed08 	str.w	lr, [sp, #-8]!
    6948:	f7ff fff4 	bl	6934 <__aeabi_cdcmpeq>
    694c:	bf0c      	ite	eq
    694e:	2001      	moveq	r0, #1
    6950:	2000      	movne	r0, #0
    6952:	f85d fb08 	ldr.w	pc, [sp], #8
    6956:	bf00      	nop

00006958 <__aeabi_dcmplt>:
    6958:	f84d ed08 	str.w	lr, [sp, #-8]!
    695c:	f7ff ffea 	bl	6934 <__aeabi_cdcmpeq>
    6960:	bf34      	ite	cc
    6962:	2001      	movcc	r0, #1
    6964:	2000      	movcs	r0, #0
    6966:	f85d fb08 	ldr.w	pc, [sp], #8
    696a:	bf00      	nop

0000696c <__aeabi_dcmple>:
    696c:	f84d ed08 	str.w	lr, [sp, #-8]!
    6970:	f7ff ffe0 	bl	6934 <__aeabi_cdcmpeq>
    6974:	bf94      	ite	ls
    6976:	2001      	movls	r0, #1
    6978:	2000      	movhi	r0, #0
    697a:	f85d fb08 	ldr.w	pc, [sp], #8
    697e:	bf00      	nop

00006980 <__aeabi_dcmpge>:
    6980:	f84d ed08 	str.w	lr, [sp, #-8]!
    6984:	f7ff ffce 	bl	6924 <__aeabi_cdrcmple>
    6988:	bf94      	ite	ls
    698a:	2001      	movls	r0, #1
    698c:	2000      	movhi	r0, #0
    698e:	f85d fb08 	ldr.w	pc, [sp], #8
    6992:	bf00      	nop

00006994 <__aeabi_dcmpgt>:
    6994:	f84d ed08 	str.w	lr, [sp, #-8]!
    6998:	f7ff ffc4 	bl	6924 <__aeabi_cdrcmple>
    699c:	bf34      	ite	cc
    699e:	2001      	movcc	r0, #1
    69a0:	2000      	movcs	r0, #0
    69a2:	f85d fb08 	ldr.w	pc, [sp], #8
    69a6:	bf00      	nop

000069a8 <__aeabi_dcmpun>:
    69a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    69ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    69b0:	d102      	bne.n	69b8 <__aeabi_dcmpun+0x10>
    69b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    69b6:	d10a      	bne.n	69ce <__aeabi_dcmpun+0x26>
    69b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    69bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    69c0:	d102      	bne.n	69c8 <__aeabi_dcmpun+0x20>
    69c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    69c6:	d102      	bne.n	69ce <__aeabi_dcmpun+0x26>
    69c8:	f04f 0000 	mov.w	r0, #0
    69cc:	4770      	bx	lr
    69ce:	f04f 0001 	mov.w	r0, #1
    69d2:	4770      	bx	lr

000069d4 <_malloc_r>:
    69d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69d8:	f101 060b 	add.w	r6, r1, #11
    69dc:	2e16      	cmp	r6, #22
    69de:	b083      	sub	sp, #12
    69e0:	4604      	mov	r4, r0
    69e2:	d824      	bhi.n	6a2e <_malloc_r+0x5a>
    69e4:	2910      	cmp	r1, #16
    69e6:	f200 80ba 	bhi.w	6b5e <_malloc_r+0x18a>
    69ea:	f000 faa3 	bl	6f34 <__malloc_lock>
    69ee:	2610      	movs	r6, #16
    69f0:	2218      	movs	r2, #24
    69f2:	2002      	movs	r0, #2
    69f4:	4fb5      	ldr	r7, [pc, #724]	; (6ccc <_malloc_r+0x2f8>)
    69f6:	443a      	add	r2, r7
    69f8:	f1a2 0108 	sub.w	r1, r2, #8
    69fc:	6853      	ldr	r3, [r2, #4]
    69fe:	428b      	cmp	r3, r1
    6a00:	f000 80ba 	beq.w	6b78 <_malloc_r+0x1a4>
    6a04:	685a      	ldr	r2, [r3, #4]
    6a06:	68d9      	ldr	r1, [r3, #12]
    6a08:	f022 0203 	bic.w	r2, r2, #3
    6a0c:	441a      	add	r2, r3
    6a0e:	689d      	ldr	r5, [r3, #8]
    6a10:	60e9      	str	r1, [r5, #12]
    6a12:	608d      	str	r5, [r1, #8]
    6a14:	6851      	ldr	r1, [r2, #4]
    6a16:	f041 0101 	orr.w	r1, r1, #1
    6a1a:	4620      	mov	r0, r4
    6a1c:	6051      	str	r1, [r2, #4]
    6a1e:	f103 0508 	add.w	r5, r3, #8
    6a22:	f000 fa8d 	bl	6f40 <__malloc_unlock>
    6a26:	4628      	mov	r0, r5
    6a28:	b003      	add	sp, #12
    6a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a2e:	f036 0607 	bics.w	r6, r6, #7
    6a32:	f100 8094 	bmi.w	6b5e <_malloc_r+0x18a>
    6a36:	42b1      	cmp	r1, r6
    6a38:	f200 8091 	bhi.w	6b5e <_malloc_r+0x18a>
    6a3c:	f000 fa7a 	bl	6f34 <__malloc_lock>
    6a40:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    6a44:	f0c0 819a 	bcc.w	6d7c <_malloc_r+0x3a8>
    6a48:	0a73      	lsrs	r3, r6, #9
    6a4a:	f000 808f 	beq.w	6b6c <_malloc_r+0x198>
    6a4e:	2b04      	cmp	r3, #4
    6a50:	f200 816f 	bhi.w	6d32 <_malloc_r+0x35e>
    6a54:	09b3      	lsrs	r3, r6, #6
    6a56:	f103 0039 	add.w	r0, r3, #57	; 0x39
    6a5a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    6a5e:	00c3      	lsls	r3, r0, #3
    6a60:	4f9a      	ldr	r7, [pc, #616]	; (6ccc <_malloc_r+0x2f8>)
    6a62:	443b      	add	r3, r7
    6a64:	f1a3 0508 	sub.w	r5, r3, #8
    6a68:	685b      	ldr	r3, [r3, #4]
    6a6a:	429d      	cmp	r5, r3
    6a6c:	d106      	bne.n	6a7c <_malloc_r+0xa8>
    6a6e:	e00c      	b.n	6a8a <_malloc_r+0xb6>
    6a70:	2900      	cmp	r1, #0
    6a72:	f280 8127 	bge.w	6cc4 <_malloc_r+0x2f0>
    6a76:	68db      	ldr	r3, [r3, #12]
    6a78:	429d      	cmp	r5, r3
    6a7a:	d006      	beq.n	6a8a <_malloc_r+0xb6>
    6a7c:	685a      	ldr	r2, [r3, #4]
    6a7e:	f022 0203 	bic.w	r2, r2, #3
    6a82:	1b91      	subs	r1, r2, r6
    6a84:	290f      	cmp	r1, #15
    6a86:	ddf3      	ble.n	6a70 <_malloc_r+0x9c>
    6a88:	4660      	mov	r0, ip
    6a8a:	693d      	ldr	r5, [r7, #16]
    6a8c:	f8df c250 	ldr.w	ip, [pc, #592]	; 6ce0 <_malloc_r+0x30c>
    6a90:	4565      	cmp	r5, ip
    6a92:	d07c      	beq.n	6b8e <_malloc_r+0x1ba>
    6a94:	686a      	ldr	r2, [r5, #4]
    6a96:	f022 0203 	bic.w	r2, r2, #3
    6a9a:	1b93      	subs	r3, r2, r6
    6a9c:	2b0f      	cmp	r3, #15
    6a9e:	f300 817b 	bgt.w	6d98 <_malloc_r+0x3c4>
    6aa2:	2b00      	cmp	r3, #0
    6aa4:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    6aa8:	f280 816c 	bge.w	6d84 <_malloc_r+0x3b0>
    6aac:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    6ab0:	f080 811a 	bcs.w	6ce8 <_malloc_r+0x314>
    6ab4:	08d3      	lsrs	r3, r2, #3
    6ab6:	6879      	ldr	r1, [r7, #4]
    6ab8:	3301      	adds	r3, #1
    6aba:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    6abe:	2201      	movs	r2, #1
    6ac0:	fa02 f20e 	lsl.w	r2, r2, lr
    6ac4:	430a      	orrs	r2, r1
    6ac6:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    6aca:	f8c5 e008 	str.w	lr, [r5, #8]
    6ace:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    6ad2:	3908      	subs	r1, #8
    6ad4:	60e9      	str	r1, [r5, #12]
    6ad6:	607a      	str	r2, [r7, #4]
    6ad8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    6adc:	f8ce 500c 	str.w	r5, [lr, #12]
    6ae0:	1083      	asrs	r3, r0, #2
    6ae2:	2101      	movs	r1, #1
    6ae4:	4099      	lsls	r1, r3
    6ae6:	4291      	cmp	r1, r2
    6ae8:	d857      	bhi.n	6b9a <_malloc_r+0x1c6>
    6aea:	4211      	tst	r1, r2
    6aec:	d106      	bne.n	6afc <_malloc_r+0x128>
    6aee:	f020 0003 	bic.w	r0, r0, #3
    6af2:	0049      	lsls	r1, r1, #1
    6af4:	4211      	tst	r1, r2
    6af6:	f100 0004 	add.w	r0, r0, #4
    6afa:	d0fa      	beq.n	6af2 <_malloc_r+0x11e>
    6afc:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    6b00:	464d      	mov	r5, r9
    6b02:	4686      	mov	lr, r0
    6b04:	f8d5 800c 	ldr.w	r8, [r5, #12]
    6b08:	4545      	cmp	r5, r8
    6b0a:	d108      	bne.n	6b1e <_malloc_r+0x14a>
    6b0c:	e11d      	b.n	6d4a <_malloc_r+0x376>
    6b0e:	2b00      	cmp	r3, #0
    6b10:	f280 8124 	bge.w	6d5c <_malloc_r+0x388>
    6b14:	f8d8 800c 	ldr.w	r8, [r8, #12]
    6b18:	4545      	cmp	r5, r8
    6b1a:	f000 8116 	beq.w	6d4a <_malloc_r+0x376>
    6b1e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6b22:	f022 0203 	bic.w	r2, r2, #3
    6b26:	1b93      	subs	r3, r2, r6
    6b28:	2b0f      	cmp	r3, #15
    6b2a:	ddf0      	ble.n	6b0e <_malloc_r+0x13a>
    6b2c:	4620      	mov	r0, r4
    6b2e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    6b32:	eb08 0106 	add.w	r1, r8, r6
    6b36:	f046 0601 	orr.w	r6, r6, #1
    6b3a:	f8c8 6004 	str.w	r6, [r8, #4]
    6b3e:	60ec      	str	r4, [r5, #12]
    6b40:	60a5      	str	r5, [r4, #8]
    6b42:	f043 0401 	orr.w	r4, r3, #1
    6b46:	e9c7 1104 	strd	r1, r1, [r7, #16]
    6b4a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    6b4e:	604c      	str	r4, [r1, #4]
    6b50:	f848 3002 	str.w	r3, [r8, r2]
    6b54:	f000 f9f4 	bl	6f40 <__malloc_unlock>
    6b58:	f108 0508 	add.w	r5, r8, #8
    6b5c:	e002      	b.n	6b64 <_malloc_r+0x190>
    6b5e:	230c      	movs	r3, #12
    6b60:	6023      	str	r3, [r4, #0]
    6b62:	2500      	movs	r5, #0
    6b64:	4628      	mov	r0, r5
    6b66:	b003      	add	sp, #12
    6b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
    6b70:	2040      	movs	r0, #64	; 0x40
    6b72:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    6b76:	e773      	b.n	6a60 <_malloc_r+0x8c>
    6b78:	68d3      	ldr	r3, [r2, #12]
    6b7a:	429a      	cmp	r2, r3
    6b7c:	bf08      	it	eq
    6b7e:	3002      	addeq	r0, #2
    6b80:	f47f af40 	bne.w	6a04 <_malloc_r+0x30>
    6b84:	693d      	ldr	r5, [r7, #16]
    6b86:	f8df c158 	ldr.w	ip, [pc, #344]	; 6ce0 <_malloc_r+0x30c>
    6b8a:	4565      	cmp	r5, ip
    6b8c:	d182      	bne.n	6a94 <_malloc_r+0xc0>
    6b8e:	687a      	ldr	r2, [r7, #4]
    6b90:	1083      	asrs	r3, r0, #2
    6b92:	2101      	movs	r1, #1
    6b94:	4099      	lsls	r1, r3
    6b96:	4291      	cmp	r1, r2
    6b98:	d9a7      	bls.n	6aea <_malloc_r+0x116>
    6b9a:	68bd      	ldr	r5, [r7, #8]
    6b9c:	686b      	ldr	r3, [r5, #4]
    6b9e:	f023 0903 	bic.w	r9, r3, #3
    6ba2:	454e      	cmp	r6, r9
    6ba4:	d803      	bhi.n	6bae <_malloc_r+0x1da>
    6ba6:	eba9 0306 	sub.w	r3, r9, r6
    6baa:	2b0f      	cmp	r3, #15
    6bac:	dc7a      	bgt.n	6ca4 <_malloc_r+0x2d0>
    6bae:	f8df b134 	ldr.w	fp, [pc, #308]	; 6ce4 <_malloc_r+0x310>
    6bb2:	4b47      	ldr	r3, [pc, #284]	; (6cd0 <_malloc_r+0x2fc>)
    6bb4:	f8db 2000 	ldr.w	r2, [fp]
    6bb8:	681b      	ldr	r3, [r3, #0]
    6bba:	3201      	adds	r2, #1
    6bbc:	4433      	add	r3, r6
    6bbe:	eb05 0a09 	add.w	sl, r5, r9
    6bc2:	f000 8133 	beq.w	6e2c <_malloc_r+0x458>
    6bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    6bca:	330f      	adds	r3, #15
    6bcc:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    6bd0:	f028 080f 	bic.w	r8, r8, #15
    6bd4:	4641      	mov	r1, r8
    6bd6:	4620      	mov	r0, r4
    6bd8:	f000 fe78 	bl	78cc <_sbrk_r>
    6bdc:	1c41      	adds	r1, r0, #1
    6bde:	4602      	mov	r2, r0
    6be0:	f000 80f3 	beq.w	6dca <_malloc_r+0x3f6>
    6be4:	4582      	cmp	sl, r0
    6be6:	f200 80ee 	bhi.w	6dc6 <_malloc_r+0x3f2>
    6bea:	4b3a      	ldr	r3, [pc, #232]	; (6cd4 <_malloc_r+0x300>)
    6bec:	6819      	ldr	r1, [r3, #0]
    6bee:	4441      	add	r1, r8
    6bf0:	6019      	str	r1, [r3, #0]
    6bf2:	4608      	mov	r0, r1
    6bf4:	f000 814e 	beq.w	6e94 <_malloc_r+0x4c0>
    6bf8:	f8db 1000 	ldr.w	r1, [fp]
    6bfc:	9301      	str	r3, [sp, #4]
    6bfe:	3101      	adds	r1, #1
    6c00:	bf1b      	ittet	ne
    6c02:	eba2 010a 	subne.w	r1, r2, sl
    6c06:	1809      	addne	r1, r1, r0
    6c08:	f8cb 2000 	streq.w	r2, [fp]
    6c0c:	6019      	strne	r1, [r3, #0]
    6c0e:	f012 0b07 	ands.w	fp, r2, #7
    6c12:	f000 8117 	beq.w	6e44 <_malloc_r+0x470>
    6c16:	f1cb 0108 	rsb	r1, fp, #8
    6c1a:	440a      	add	r2, r1
    6c1c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    6c20:	4490      	add	r8, r2
    6c22:	3108      	adds	r1, #8
    6c24:	eba1 0108 	sub.w	r1, r1, r8
    6c28:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    6c2c:	4651      	mov	r1, sl
    6c2e:	4620      	mov	r0, r4
    6c30:	9200      	str	r2, [sp, #0]
    6c32:	f000 fe4b 	bl	78cc <_sbrk_r>
    6c36:	1c42      	adds	r2, r0, #1
    6c38:	e9dd 2300 	ldrd	r2, r3, [sp]
    6c3c:	f000 814f 	beq.w	6ede <_malloc_r+0x50a>
    6c40:	1a80      	subs	r0, r0, r2
    6c42:	eb00 080a 	add.w	r8, r0, sl
    6c46:	6819      	ldr	r1, [r3, #0]
    6c48:	60ba      	str	r2, [r7, #8]
    6c4a:	f048 0001 	orr.w	r0, r8, #1
    6c4e:	4451      	add	r1, sl
    6c50:	42bd      	cmp	r5, r7
    6c52:	6050      	str	r0, [r2, #4]
    6c54:	6019      	str	r1, [r3, #0]
    6c56:	f000 8129 	beq.w	6eac <_malloc_r+0x4d8>
    6c5a:	f1b9 0f0f 	cmp.w	r9, #15
    6c5e:	f240 8127 	bls.w	6eb0 <_malloc_r+0x4dc>
    6c62:	6868      	ldr	r0, [r5, #4]
    6c64:	f1a9 0c0c 	sub.w	ip, r9, #12
    6c68:	f02c 0c07 	bic.w	ip, ip, #7
    6c6c:	f000 0001 	and.w	r0, r0, #1
    6c70:	ea40 000c 	orr.w	r0, r0, ip
    6c74:	6068      	str	r0, [r5, #4]
    6c76:	f04f 0e05 	mov.w	lr, #5
    6c7a:	eb05 000c 	add.w	r0, r5, ip
    6c7e:	f1bc 0f0f 	cmp.w	ip, #15
    6c82:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    6c86:	f200 8132 	bhi.w	6eee <_malloc_r+0x51a>
    6c8a:	6850      	ldr	r0, [r2, #4]
    6c8c:	4615      	mov	r5, r2
    6c8e:	4b12      	ldr	r3, [pc, #72]	; (6cd8 <_malloc_r+0x304>)
    6c90:	681a      	ldr	r2, [r3, #0]
    6c92:	428a      	cmp	r2, r1
    6c94:	bf38      	it	cc
    6c96:	6019      	strcc	r1, [r3, #0]
    6c98:	4b10      	ldr	r3, [pc, #64]	; (6cdc <_malloc_r+0x308>)
    6c9a:	681a      	ldr	r2, [r3, #0]
    6c9c:	428a      	cmp	r2, r1
    6c9e:	bf38      	it	cc
    6ca0:	6019      	strcc	r1, [r3, #0]
    6ca2:	e094      	b.n	6dce <_malloc_r+0x3fa>
    6ca4:	19aa      	adds	r2, r5, r6
    6ca6:	f043 0301 	orr.w	r3, r3, #1
    6caa:	f046 0601 	orr.w	r6, r6, #1
    6cae:	606e      	str	r6, [r5, #4]
    6cb0:	4620      	mov	r0, r4
    6cb2:	60ba      	str	r2, [r7, #8]
    6cb4:	6053      	str	r3, [r2, #4]
    6cb6:	f000 f943 	bl	6f40 <__malloc_unlock>
    6cba:	3508      	adds	r5, #8
    6cbc:	4628      	mov	r0, r5
    6cbe:	b003      	add	sp, #12
    6cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6cc4:	68d9      	ldr	r1, [r3, #12]
    6cc6:	441a      	add	r2, r3
    6cc8:	e6a1      	b.n	6a0e <_malloc_r+0x3a>
    6cca:	bf00      	nop
    6ccc:	1fff082c 	.word	0x1fff082c
    6cd0:	1fff63fc 	.word	0x1fff63fc
    6cd4:	1fff63cc 	.word	0x1fff63cc
    6cd8:	1fff63f4 	.word	0x1fff63f4
    6cdc:	1fff63f8 	.word	0x1fff63f8
    6ce0:	1fff0834 	.word	0x1fff0834
    6ce4:	1fff0c34 	.word	0x1fff0c34
    6ce8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    6cec:	ea4f 2352 	mov.w	r3, r2, lsr #9
    6cf0:	d363      	bcc.n	6dba <_malloc_r+0x3e6>
    6cf2:	2b14      	cmp	r3, #20
    6cf4:	f200 80b7 	bhi.w	6e66 <_malloc_r+0x492>
    6cf8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    6cfc:	00c9      	lsls	r1, r1, #3
    6cfe:	335b      	adds	r3, #91	; 0x5b
    6d00:	eb07 0e01 	add.w	lr, r7, r1
    6d04:	5879      	ldr	r1, [r7, r1]
    6d06:	f1ae 0e08 	sub.w	lr, lr, #8
    6d0a:	458e      	cmp	lr, r1
    6d0c:	f000 8091 	beq.w	6e32 <_malloc_r+0x45e>
    6d10:	684b      	ldr	r3, [r1, #4]
    6d12:	f023 0303 	bic.w	r3, r3, #3
    6d16:	4293      	cmp	r3, r2
    6d18:	d902      	bls.n	6d20 <_malloc_r+0x34c>
    6d1a:	6889      	ldr	r1, [r1, #8]
    6d1c:	458e      	cmp	lr, r1
    6d1e:	d1f7      	bne.n	6d10 <_malloc_r+0x33c>
    6d20:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    6d24:	687a      	ldr	r2, [r7, #4]
    6d26:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    6d2a:	f8ce 5008 	str.w	r5, [lr, #8]
    6d2e:	60cd      	str	r5, [r1, #12]
    6d30:	e6d6      	b.n	6ae0 <_malloc_r+0x10c>
    6d32:	2b14      	cmp	r3, #20
    6d34:	d959      	bls.n	6dea <_malloc_r+0x416>
    6d36:	2b54      	cmp	r3, #84	; 0x54
    6d38:	f200 809d 	bhi.w	6e76 <_malloc_r+0x4a2>
    6d3c:	0b33      	lsrs	r3, r6, #12
    6d3e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    6d42:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    6d46:	00c3      	lsls	r3, r0, #3
    6d48:	e68a      	b.n	6a60 <_malloc_r+0x8c>
    6d4a:	f10e 0e01 	add.w	lr, lr, #1
    6d4e:	f01e 0f03 	tst.w	lr, #3
    6d52:	f105 0508 	add.w	r5, r5, #8
    6d56:	f47f aed5 	bne.w	6b04 <_malloc_r+0x130>
    6d5a:	e051      	b.n	6e00 <_malloc_r+0x42c>
    6d5c:	4442      	add	r2, r8
    6d5e:	4645      	mov	r5, r8
    6d60:	6853      	ldr	r3, [r2, #4]
    6d62:	f8d8 100c 	ldr.w	r1, [r8, #12]
    6d66:	f043 0301 	orr.w	r3, r3, #1
    6d6a:	6053      	str	r3, [r2, #4]
    6d6c:	f855 3f08 	ldr.w	r3, [r5, #8]!
    6d70:	4620      	mov	r0, r4
    6d72:	60d9      	str	r1, [r3, #12]
    6d74:	608b      	str	r3, [r1, #8]
    6d76:	f000 f8e3 	bl	6f40 <__malloc_unlock>
    6d7a:	e6f3      	b.n	6b64 <_malloc_r+0x190>
    6d7c:	08f0      	lsrs	r0, r6, #3
    6d7e:	f106 0208 	add.w	r2, r6, #8
    6d82:	e637      	b.n	69f4 <_malloc_r+0x20>
    6d84:	442a      	add	r2, r5
    6d86:	4620      	mov	r0, r4
    6d88:	6853      	ldr	r3, [r2, #4]
    6d8a:	f043 0301 	orr.w	r3, r3, #1
    6d8e:	6053      	str	r3, [r2, #4]
    6d90:	3508      	adds	r5, #8
    6d92:	f000 f8d5 	bl	6f40 <__malloc_unlock>
    6d96:	e6e5      	b.n	6b64 <_malloc_r+0x190>
    6d98:	19a9      	adds	r1, r5, r6
    6d9a:	4620      	mov	r0, r4
    6d9c:	f046 0601 	orr.w	r6, r6, #1
    6da0:	f043 0401 	orr.w	r4, r3, #1
    6da4:	606e      	str	r6, [r5, #4]
    6da6:	e9c7 1104 	strd	r1, r1, [r7, #16]
    6daa:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    6dae:	604c      	str	r4, [r1, #4]
    6db0:	50ab      	str	r3, [r5, r2]
    6db2:	f000 f8c5 	bl	6f40 <__malloc_unlock>
    6db6:	3508      	adds	r5, #8
    6db8:	e6d4      	b.n	6b64 <_malloc_r+0x190>
    6dba:	0993      	lsrs	r3, r2, #6
    6dbc:	f103 0139 	add.w	r1, r3, #57	; 0x39
    6dc0:	00c9      	lsls	r1, r1, #3
    6dc2:	3338      	adds	r3, #56	; 0x38
    6dc4:	e79c      	b.n	6d00 <_malloc_r+0x32c>
    6dc6:	42bd      	cmp	r5, r7
    6dc8:	d05f      	beq.n	6e8a <_malloc_r+0x4b6>
    6dca:	68bd      	ldr	r5, [r7, #8]
    6dcc:	6868      	ldr	r0, [r5, #4]
    6dce:	f020 0803 	bic.w	r8, r0, #3
    6dd2:	4546      	cmp	r6, r8
    6dd4:	eba8 0306 	sub.w	r3, r8, r6
    6dd8:	d802      	bhi.n	6de0 <_malloc_r+0x40c>
    6dda:	2b0f      	cmp	r3, #15
    6ddc:	f73f af62 	bgt.w	6ca4 <_malloc_r+0x2d0>
    6de0:	4620      	mov	r0, r4
    6de2:	f000 f8ad 	bl	6f40 <__malloc_unlock>
    6de6:	2500      	movs	r5, #0
    6de8:	e6bc      	b.n	6b64 <_malloc_r+0x190>
    6dea:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    6dee:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    6df2:	00c3      	lsls	r3, r0, #3
    6df4:	e634      	b.n	6a60 <_malloc_r+0x8c>
    6df6:	f859 3908 	ldr.w	r3, [r9], #-8
    6dfa:	454b      	cmp	r3, r9
    6dfc:	f040 8096 	bne.w	6f2c <_malloc_r+0x558>
    6e00:	f010 0f03 	tst.w	r0, #3
    6e04:	f100 30ff 	add.w	r0, r0, #4294967295
    6e08:	d1f5      	bne.n	6df6 <_malloc_r+0x422>
    6e0a:	687b      	ldr	r3, [r7, #4]
    6e0c:	ea23 0301 	bic.w	r3, r3, r1
    6e10:	607b      	str	r3, [r7, #4]
    6e12:	0049      	lsls	r1, r1, #1
    6e14:	4299      	cmp	r1, r3
    6e16:	f63f aec0 	bhi.w	6b9a <_malloc_r+0x1c6>
    6e1a:	b919      	cbnz	r1, 6e24 <_malloc_r+0x450>
    6e1c:	e6bd      	b.n	6b9a <_malloc_r+0x1c6>
    6e1e:	0049      	lsls	r1, r1, #1
    6e20:	f10e 0e04 	add.w	lr, lr, #4
    6e24:	4219      	tst	r1, r3
    6e26:	d0fa      	beq.n	6e1e <_malloc_r+0x44a>
    6e28:	4670      	mov	r0, lr
    6e2a:	e667      	b.n	6afc <_malloc_r+0x128>
    6e2c:	f103 0810 	add.w	r8, r3, #16
    6e30:	e6d0      	b.n	6bd4 <_malloc_r+0x200>
    6e32:	109a      	asrs	r2, r3, #2
    6e34:	f04f 0801 	mov.w	r8, #1
    6e38:	687b      	ldr	r3, [r7, #4]
    6e3a:	fa08 f202 	lsl.w	r2, r8, r2
    6e3e:	431a      	orrs	r2, r3
    6e40:	607a      	str	r2, [r7, #4]
    6e42:	e770      	b.n	6d26 <_malloc_r+0x352>
    6e44:	eb02 0108 	add.w	r1, r2, r8
    6e48:	4249      	negs	r1, r1
    6e4a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    6e4e:	4651      	mov	r1, sl
    6e50:	4620      	mov	r0, r4
    6e52:	9200      	str	r2, [sp, #0]
    6e54:	f000 fd3a 	bl	78cc <_sbrk_r>
    6e58:	1c43      	adds	r3, r0, #1
    6e5a:	e9dd 2300 	ldrd	r2, r3, [sp]
    6e5e:	f47f aeef 	bne.w	6c40 <_malloc_r+0x26c>
    6e62:	46da      	mov	sl, fp
    6e64:	e6ef      	b.n	6c46 <_malloc_r+0x272>
    6e66:	2b54      	cmp	r3, #84	; 0x54
    6e68:	d825      	bhi.n	6eb6 <_malloc_r+0x4e2>
    6e6a:	0b13      	lsrs	r3, r2, #12
    6e6c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    6e70:	00c9      	lsls	r1, r1, #3
    6e72:	336e      	adds	r3, #110	; 0x6e
    6e74:	e744      	b.n	6d00 <_malloc_r+0x32c>
    6e76:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6e7a:	d825      	bhi.n	6ec8 <_malloc_r+0x4f4>
    6e7c:	0bf3      	lsrs	r3, r6, #15
    6e7e:	f103 0078 	add.w	r0, r3, #120	; 0x78
    6e82:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    6e86:	00c3      	lsls	r3, r0, #3
    6e88:	e5ea      	b.n	6a60 <_malloc_r+0x8c>
    6e8a:	4b29      	ldr	r3, [pc, #164]	; (6f30 <_malloc_r+0x55c>)
    6e8c:	6818      	ldr	r0, [r3, #0]
    6e8e:	4440      	add	r0, r8
    6e90:	6018      	str	r0, [r3, #0]
    6e92:	e6b1      	b.n	6bf8 <_malloc_r+0x224>
    6e94:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    6e98:	f1bc 0f00 	cmp.w	ip, #0
    6e9c:	f47f aeac 	bne.w	6bf8 <_malloc_r+0x224>
    6ea0:	68bd      	ldr	r5, [r7, #8]
    6ea2:	44c8      	add	r8, r9
    6ea4:	f048 0001 	orr.w	r0, r8, #1
    6ea8:	6068      	str	r0, [r5, #4]
    6eaa:	e6f0      	b.n	6c8e <_malloc_r+0x2ba>
    6eac:	4615      	mov	r5, r2
    6eae:	e6ee      	b.n	6c8e <_malloc_r+0x2ba>
    6eb0:	2301      	movs	r3, #1
    6eb2:	6053      	str	r3, [r2, #4]
    6eb4:	e794      	b.n	6de0 <_malloc_r+0x40c>
    6eb6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6eba:	d823      	bhi.n	6f04 <_malloc_r+0x530>
    6ebc:	0bd3      	lsrs	r3, r2, #15
    6ebe:	f103 0178 	add.w	r1, r3, #120	; 0x78
    6ec2:	00c9      	lsls	r1, r1, #3
    6ec4:	3377      	adds	r3, #119	; 0x77
    6ec6:	e71b      	b.n	6d00 <_malloc_r+0x32c>
    6ec8:	f240 5254 	movw	r2, #1364	; 0x554
    6ecc:	4293      	cmp	r3, r2
    6ece:	d823      	bhi.n	6f18 <_malloc_r+0x544>
    6ed0:	0cb3      	lsrs	r3, r6, #18
    6ed2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    6ed6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    6eda:	00c3      	lsls	r3, r0, #3
    6edc:	e5c0      	b.n	6a60 <_malloc_r+0x8c>
    6ede:	f1ab 0b08 	sub.w	fp, fp, #8
    6ee2:	44d8      	add	r8, fp
    6ee4:	eba8 0802 	sub.w	r8, r8, r2
    6ee8:	f04f 0a00 	mov.w	sl, #0
    6eec:	e6ab      	b.n	6c46 <_malloc_r+0x272>
    6eee:	f105 0108 	add.w	r1, r5, #8
    6ef2:	4620      	mov	r0, r4
    6ef4:	9300      	str	r3, [sp, #0]
    6ef6:	f000 fe11 	bl	7b1c <_free_r>
    6efa:	68bd      	ldr	r5, [r7, #8]
    6efc:	9b00      	ldr	r3, [sp, #0]
    6efe:	6868      	ldr	r0, [r5, #4]
    6f00:	6819      	ldr	r1, [r3, #0]
    6f02:	e6c4      	b.n	6c8e <_malloc_r+0x2ba>
    6f04:	f240 5154 	movw	r1, #1364	; 0x554
    6f08:	428b      	cmp	r3, r1
    6f0a:	d80b      	bhi.n	6f24 <_malloc_r+0x550>
    6f0c:	0c93      	lsrs	r3, r2, #18
    6f0e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    6f12:	00c9      	lsls	r1, r1, #3
    6f14:	337c      	adds	r3, #124	; 0x7c
    6f16:	e6f3      	b.n	6d00 <_malloc_r+0x32c>
    6f18:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    6f1c:	207f      	movs	r0, #127	; 0x7f
    6f1e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    6f22:	e59d      	b.n	6a60 <_malloc_r+0x8c>
    6f24:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    6f28:	237e      	movs	r3, #126	; 0x7e
    6f2a:	e6e9      	b.n	6d00 <_malloc_r+0x32c>
    6f2c:	687b      	ldr	r3, [r7, #4]
    6f2e:	e770      	b.n	6e12 <_malloc_r+0x43e>
    6f30:	1fff63cc 	.word	0x1fff63cc

00006f34 <__malloc_lock>:
    6f34:	4801      	ldr	r0, [pc, #4]	; (6f3c <__malloc_lock+0x8>)
    6f36:	f000 bd1f 	b.w	7978 <__retarget_lock_acquire_recursive>
    6f3a:	bf00      	nop
    6f3c:	1fff6544 	.word	0x1fff6544

00006f40 <__malloc_unlock>:
    6f40:	4801      	ldr	r0, [pc, #4]	; (6f48 <__malloc_unlock+0x8>)
    6f42:	f000 bd1b 	b.w	797c <__retarget_lock_release_recursive>
    6f46:	bf00      	nop
    6f48:	1fff6544 	.word	0x1fff6544

00006f4c <_realloc_r>:
    6f4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f50:	4617      	mov	r7, r2
    6f52:	2900      	cmp	r1, #0
    6f54:	f000 8098 	beq.w	7088 <_realloc_r+0x13c>
    6f58:	460c      	mov	r4, r1
    6f5a:	f107 050b 	add.w	r5, r7, #11
    6f5e:	4680      	mov	r8, r0
    6f60:	f7ff ffe8 	bl	6f34 <__malloc_lock>
    6f64:	2d16      	cmp	r5, #22
    6f66:	f854 1c04 	ldr.w	r1, [r4, #-4]
    6f6a:	d85b      	bhi.n	7024 <_realloc_r+0xd8>
    6f6c:	2510      	movs	r5, #16
    6f6e:	462a      	mov	r2, r5
    6f70:	42af      	cmp	r7, r5
    6f72:	d85c      	bhi.n	702e <_realloc_r+0xe2>
    6f74:	f021 0603 	bic.w	r6, r1, #3
    6f78:	4296      	cmp	r6, r2
    6f7a:	f1a4 0908 	sub.w	r9, r4, #8
    6f7e:	da62      	bge.n	7046 <_realloc_r+0xfa>
    6f80:	4bbc      	ldr	r3, [pc, #752]	; (7274 <_realloc_r+0x328>)
    6f82:	f8d3 c008 	ldr.w	ip, [r3, #8]
    6f86:	eb09 0006 	add.w	r0, r9, r6
    6f8a:	4584      	cmp	ip, r0
    6f8c:	f000 8097 	beq.w	70be <_realloc_r+0x172>
    6f90:	f8d0 c004 	ldr.w	ip, [r0, #4]
    6f94:	f02c 0301 	bic.w	r3, ip, #1
    6f98:	4403      	add	r3, r0
    6f9a:	685b      	ldr	r3, [r3, #4]
    6f9c:	07db      	lsls	r3, r3, #31
    6f9e:	d468      	bmi.n	7072 <_realloc_r+0x126>
    6fa0:	f02c 0c03 	bic.w	ip, ip, #3
    6fa4:	eb06 030c 	add.w	r3, r6, ip
    6fa8:	4293      	cmp	r3, r2
    6faa:	da47      	bge.n	703c <_realloc_r+0xf0>
    6fac:	07cb      	lsls	r3, r1, #31
    6fae:	d410      	bmi.n	6fd2 <_realloc_r+0x86>
    6fb0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    6fb4:	eba9 0a03 	sub.w	sl, r9, r3
    6fb8:	f8da 3004 	ldr.w	r3, [sl, #4]
    6fbc:	f023 0103 	bic.w	r1, r3, #3
    6fc0:	448c      	add	ip, r1
    6fc2:	44b4      	add	ip, r6
    6fc4:	4594      	cmp	ip, r2
    6fc6:	f280 8111 	bge.w	71ec <_realloc_r+0x2a0>
    6fca:	1873      	adds	r3, r6, r1
    6fcc:	4293      	cmp	r3, r2
    6fce:	f280 80e8 	bge.w	71a2 <_realloc_r+0x256>
    6fd2:	4639      	mov	r1, r7
    6fd4:	4640      	mov	r0, r8
    6fd6:	f7ff fcfd 	bl	69d4 <_malloc_r>
    6fda:	4607      	mov	r7, r0
    6fdc:	b1e0      	cbz	r0, 7018 <_realloc_r+0xcc>
    6fde:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6fe2:	f023 0301 	bic.w	r3, r3, #1
    6fe6:	444b      	add	r3, r9
    6fe8:	f1a0 0208 	sub.w	r2, r0, #8
    6fec:	4293      	cmp	r3, r2
    6fee:	f000 80d2 	beq.w	7196 <_realloc_r+0x24a>
    6ff2:	1f32      	subs	r2, r6, #4
    6ff4:	2a24      	cmp	r2, #36	; 0x24
    6ff6:	f200 80f5 	bhi.w	71e4 <_realloc_r+0x298>
    6ffa:	2a13      	cmp	r2, #19
    6ffc:	f200 80ac 	bhi.w	7158 <_realloc_r+0x20c>
    7000:	4603      	mov	r3, r0
    7002:	4622      	mov	r2, r4
    7004:	6811      	ldr	r1, [r2, #0]
    7006:	6019      	str	r1, [r3, #0]
    7008:	6851      	ldr	r1, [r2, #4]
    700a:	6059      	str	r1, [r3, #4]
    700c:	6892      	ldr	r2, [r2, #8]
    700e:	609a      	str	r2, [r3, #8]
    7010:	4621      	mov	r1, r4
    7012:	4640      	mov	r0, r8
    7014:	f000 fd82 	bl	7b1c <_free_r>
    7018:	4640      	mov	r0, r8
    701a:	f7ff ff91 	bl	6f40 <__malloc_unlock>
    701e:	4638      	mov	r0, r7
    7020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7024:	f025 0507 	bic.w	r5, r5, #7
    7028:	2d00      	cmp	r5, #0
    702a:	462a      	mov	r2, r5
    702c:	daa0      	bge.n	6f70 <_realloc_r+0x24>
    702e:	230c      	movs	r3, #12
    7030:	f8c8 3000 	str.w	r3, [r8]
    7034:	2700      	movs	r7, #0
    7036:	4638      	mov	r0, r7
    7038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    703c:	461e      	mov	r6, r3
    703e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    7042:	60d3      	str	r3, [r2, #12]
    7044:	609a      	str	r2, [r3, #8]
    7046:	1b73      	subs	r3, r6, r5
    7048:	2b0f      	cmp	r3, #15
    704a:	d822      	bhi.n	7092 <_realloc_r+0x146>
    704c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7050:	f003 0301 	and.w	r3, r3, #1
    7054:	4333      	orrs	r3, r6
    7056:	444e      	add	r6, r9
    7058:	f8c9 3004 	str.w	r3, [r9, #4]
    705c:	6873      	ldr	r3, [r6, #4]
    705e:	f043 0301 	orr.w	r3, r3, #1
    7062:	6073      	str	r3, [r6, #4]
    7064:	4640      	mov	r0, r8
    7066:	4627      	mov	r7, r4
    7068:	f7ff ff6a 	bl	6f40 <__malloc_unlock>
    706c:	4638      	mov	r0, r7
    706e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7072:	07c9      	lsls	r1, r1, #31
    7074:	d4ad      	bmi.n	6fd2 <_realloc_r+0x86>
    7076:	f854 3c08 	ldr.w	r3, [r4, #-8]
    707a:	eba9 0a03 	sub.w	sl, r9, r3
    707e:	f8da 1004 	ldr.w	r1, [sl, #4]
    7082:	f021 0103 	bic.w	r1, r1, #3
    7086:	e7a0      	b.n	6fca <_realloc_r+0x7e>
    7088:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    708c:	4611      	mov	r1, r2
    708e:	f7ff bca1 	b.w	69d4 <_malloc_r>
    7092:	f8d9 2004 	ldr.w	r2, [r9, #4]
    7096:	eb09 0105 	add.w	r1, r9, r5
    709a:	f002 0201 	and.w	r2, r2, #1
    709e:	444e      	add	r6, r9
    70a0:	f043 0301 	orr.w	r3, r3, #1
    70a4:	432a      	orrs	r2, r5
    70a6:	f8c9 2004 	str.w	r2, [r9, #4]
    70aa:	604b      	str	r3, [r1, #4]
    70ac:	6873      	ldr	r3, [r6, #4]
    70ae:	f043 0301 	orr.w	r3, r3, #1
    70b2:	3108      	adds	r1, #8
    70b4:	6073      	str	r3, [r6, #4]
    70b6:	4640      	mov	r0, r8
    70b8:	f000 fd30 	bl	7b1c <_free_r>
    70bc:	e7d2      	b.n	7064 <_realloc_r+0x118>
    70be:	f8dc 0004 	ldr.w	r0, [ip, #4]
    70c2:	f020 0b03 	bic.w	fp, r0, #3
    70c6:	eb06 0c0b 	add.w	ip, r6, fp
    70ca:	f105 0010 	add.w	r0, r5, #16
    70ce:	4584      	cmp	ip, r0
    70d0:	da4d      	bge.n	716e <_realloc_r+0x222>
    70d2:	07c9      	lsls	r1, r1, #31
    70d4:	f53f af7d 	bmi.w	6fd2 <_realloc_r+0x86>
    70d8:	f854 1c08 	ldr.w	r1, [r4, #-8]
    70dc:	eba9 0a01 	sub.w	sl, r9, r1
    70e0:	f8da 1004 	ldr.w	r1, [sl, #4]
    70e4:	f021 0103 	bic.w	r1, r1, #3
    70e8:	448b      	add	fp, r1
    70ea:	44b3      	add	fp, r6
    70ec:	4558      	cmp	r0, fp
    70ee:	f73f af6c 	bgt.w	6fca <_realloc_r+0x7e>
    70f2:	4657      	mov	r7, sl
    70f4:	f8da 100c 	ldr.w	r1, [sl, #12]
    70f8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    70fc:	1f32      	subs	r2, r6, #4
    70fe:	2a24      	cmp	r2, #36	; 0x24
    7100:	60c1      	str	r1, [r0, #12]
    7102:	6088      	str	r0, [r1, #8]
    7104:	f200 80db 	bhi.w	72be <_realloc_r+0x372>
    7108:	2a13      	cmp	r2, #19
    710a:	f240 80d6 	bls.w	72ba <_realloc_r+0x36e>
    710e:	6821      	ldr	r1, [r4, #0]
    7110:	f8ca 1008 	str.w	r1, [sl, #8]
    7114:	6861      	ldr	r1, [r4, #4]
    7116:	f8ca 100c 	str.w	r1, [sl, #12]
    711a:	2a1b      	cmp	r2, #27
    711c:	f200 80df 	bhi.w	72de <_realloc_r+0x392>
    7120:	3408      	adds	r4, #8
    7122:	f10a 0210 	add.w	r2, sl, #16
    7126:	6821      	ldr	r1, [r4, #0]
    7128:	6011      	str	r1, [r2, #0]
    712a:	6861      	ldr	r1, [r4, #4]
    712c:	6051      	str	r1, [r2, #4]
    712e:	68a1      	ldr	r1, [r4, #8]
    7130:	6091      	str	r1, [r2, #8]
    7132:	eb0a 0105 	add.w	r1, sl, r5
    7136:	ebab 0205 	sub.w	r2, fp, r5
    713a:	f042 0201 	orr.w	r2, r2, #1
    713e:	6099      	str	r1, [r3, #8]
    7140:	604a      	str	r2, [r1, #4]
    7142:	f8da 3004 	ldr.w	r3, [sl, #4]
    7146:	f003 0301 	and.w	r3, r3, #1
    714a:	432b      	orrs	r3, r5
    714c:	4640      	mov	r0, r8
    714e:	f8ca 3004 	str.w	r3, [sl, #4]
    7152:	f7ff fef5 	bl	6f40 <__malloc_unlock>
    7156:	e76e      	b.n	7036 <_realloc_r+0xea>
    7158:	6823      	ldr	r3, [r4, #0]
    715a:	6003      	str	r3, [r0, #0]
    715c:	6863      	ldr	r3, [r4, #4]
    715e:	6043      	str	r3, [r0, #4]
    7160:	2a1b      	cmp	r2, #27
    7162:	d868      	bhi.n	7236 <_realloc_r+0x2ea>
    7164:	f104 0208 	add.w	r2, r4, #8
    7168:	f100 0308 	add.w	r3, r0, #8
    716c:	e74a      	b.n	7004 <_realloc_r+0xb8>
    716e:	eb09 0205 	add.w	r2, r9, r5
    7172:	609a      	str	r2, [r3, #8]
    7174:	ebac 0305 	sub.w	r3, ip, r5
    7178:	f043 0301 	orr.w	r3, r3, #1
    717c:	6053      	str	r3, [r2, #4]
    717e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7182:	f003 0301 	and.w	r3, r3, #1
    7186:	432b      	orrs	r3, r5
    7188:	4640      	mov	r0, r8
    718a:	f844 3c04 	str.w	r3, [r4, #-4]
    718e:	f7ff fed7 	bl	6f40 <__malloc_unlock>
    7192:	4627      	mov	r7, r4
    7194:	e74f      	b.n	7036 <_realloc_r+0xea>
    7196:	f850 3c04 	ldr.w	r3, [r0, #-4]
    719a:	f023 0303 	bic.w	r3, r3, #3
    719e:	441e      	add	r6, r3
    71a0:	e751      	b.n	7046 <_realloc_r+0xfa>
    71a2:	4657      	mov	r7, sl
    71a4:	f8da 100c 	ldr.w	r1, [sl, #12]
    71a8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    71ac:	1f32      	subs	r2, r6, #4
    71ae:	2a24      	cmp	r2, #36	; 0x24
    71b0:	60c1      	str	r1, [r0, #12]
    71b2:	6088      	str	r0, [r1, #8]
    71b4:	d84c      	bhi.n	7250 <_realloc_r+0x304>
    71b6:	2a13      	cmp	r2, #19
    71b8:	d948      	bls.n	724c <_realloc_r+0x300>
    71ba:	6821      	ldr	r1, [r4, #0]
    71bc:	f8ca 1008 	str.w	r1, [sl, #8]
    71c0:	6861      	ldr	r1, [r4, #4]
    71c2:	f8ca 100c 	str.w	r1, [sl, #12]
    71c6:	2a1b      	cmp	r2, #27
    71c8:	d856      	bhi.n	7278 <_realloc_r+0x32c>
    71ca:	3408      	adds	r4, #8
    71cc:	f10a 0210 	add.w	r2, sl, #16
    71d0:	461e      	mov	r6, r3
    71d2:	6823      	ldr	r3, [r4, #0]
    71d4:	6013      	str	r3, [r2, #0]
    71d6:	6863      	ldr	r3, [r4, #4]
    71d8:	6053      	str	r3, [r2, #4]
    71da:	68a3      	ldr	r3, [r4, #8]
    71dc:	6093      	str	r3, [r2, #8]
    71de:	46d1      	mov	r9, sl
    71e0:	463c      	mov	r4, r7
    71e2:	e730      	b.n	7046 <_realloc_r+0xfa>
    71e4:	4621      	mov	r1, r4
    71e6:	f000 fa2d 	bl	7644 <memmove>
    71ea:	e711      	b.n	7010 <_realloc_r+0xc4>
    71ec:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    71f0:	4657      	mov	r7, sl
    71f2:	60cb      	str	r3, [r1, #12]
    71f4:	6099      	str	r1, [r3, #8]
    71f6:	f857 1f08 	ldr.w	r1, [r7, #8]!
    71fa:	f8da 300c 	ldr.w	r3, [sl, #12]
    71fe:	60cb      	str	r3, [r1, #12]
    7200:	1f32      	subs	r2, r6, #4
    7202:	2a24      	cmp	r2, #36	; 0x24
    7204:	6099      	str	r1, [r3, #8]
    7206:	d82d      	bhi.n	7264 <_realloc_r+0x318>
    7208:	2a13      	cmp	r2, #19
    720a:	d929      	bls.n	7260 <_realloc_r+0x314>
    720c:	6823      	ldr	r3, [r4, #0]
    720e:	f8ca 3008 	str.w	r3, [sl, #8]
    7212:	6863      	ldr	r3, [r4, #4]
    7214:	f8ca 300c 	str.w	r3, [sl, #12]
    7218:	2a1b      	cmp	r2, #27
    721a:	d842      	bhi.n	72a2 <_realloc_r+0x356>
    721c:	3408      	adds	r4, #8
    721e:	f10a 0310 	add.w	r3, sl, #16
    7222:	6822      	ldr	r2, [r4, #0]
    7224:	601a      	str	r2, [r3, #0]
    7226:	6862      	ldr	r2, [r4, #4]
    7228:	605a      	str	r2, [r3, #4]
    722a:	68a2      	ldr	r2, [r4, #8]
    722c:	609a      	str	r2, [r3, #8]
    722e:	4666      	mov	r6, ip
    7230:	46d1      	mov	r9, sl
    7232:	463c      	mov	r4, r7
    7234:	e707      	b.n	7046 <_realloc_r+0xfa>
    7236:	68a3      	ldr	r3, [r4, #8]
    7238:	6083      	str	r3, [r0, #8]
    723a:	68e3      	ldr	r3, [r4, #12]
    723c:	60c3      	str	r3, [r0, #12]
    723e:	2a24      	cmp	r2, #36	; 0x24
    7240:	d026      	beq.n	7290 <_realloc_r+0x344>
    7242:	f104 0210 	add.w	r2, r4, #16
    7246:	f100 0310 	add.w	r3, r0, #16
    724a:	e6db      	b.n	7004 <_realloc_r+0xb8>
    724c:	463a      	mov	r2, r7
    724e:	e7bf      	b.n	71d0 <_realloc_r+0x284>
    7250:	4621      	mov	r1, r4
    7252:	4638      	mov	r0, r7
    7254:	461e      	mov	r6, r3
    7256:	46d1      	mov	r9, sl
    7258:	f000 f9f4 	bl	7644 <memmove>
    725c:	463c      	mov	r4, r7
    725e:	e6f2      	b.n	7046 <_realloc_r+0xfa>
    7260:	463b      	mov	r3, r7
    7262:	e7de      	b.n	7222 <_realloc_r+0x2d6>
    7264:	4621      	mov	r1, r4
    7266:	4638      	mov	r0, r7
    7268:	4666      	mov	r6, ip
    726a:	46d1      	mov	r9, sl
    726c:	f000 f9ea 	bl	7644 <memmove>
    7270:	463c      	mov	r4, r7
    7272:	e6e8      	b.n	7046 <_realloc_r+0xfa>
    7274:	1fff082c 	.word	0x1fff082c
    7278:	68a1      	ldr	r1, [r4, #8]
    727a:	f8ca 1010 	str.w	r1, [sl, #16]
    727e:	68e1      	ldr	r1, [r4, #12]
    7280:	f8ca 1014 	str.w	r1, [sl, #20]
    7284:	2a24      	cmp	r2, #36	; 0x24
    7286:	d020      	beq.n	72ca <_realloc_r+0x37e>
    7288:	3410      	adds	r4, #16
    728a:	f10a 0218 	add.w	r2, sl, #24
    728e:	e79f      	b.n	71d0 <_realloc_r+0x284>
    7290:	6923      	ldr	r3, [r4, #16]
    7292:	6103      	str	r3, [r0, #16]
    7294:	6961      	ldr	r1, [r4, #20]
    7296:	6141      	str	r1, [r0, #20]
    7298:	f104 0218 	add.w	r2, r4, #24
    729c:	f100 0318 	add.w	r3, r0, #24
    72a0:	e6b0      	b.n	7004 <_realloc_r+0xb8>
    72a2:	68a3      	ldr	r3, [r4, #8]
    72a4:	f8ca 3010 	str.w	r3, [sl, #16]
    72a8:	68e3      	ldr	r3, [r4, #12]
    72aa:	f8ca 3014 	str.w	r3, [sl, #20]
    72ae:	2a24      	cmp	r2, #36	; 0x24
    72b0:	d021      	beq.n	72f6 <_realloc_r+0x3aa>
    72b2:	3410      	adds	r4, #16
    72b4:	f10a 0318 	add.w	r3, sl, #24
    72b8:	e7b3      	b.n	7222 <_realloc_r+0x2d6>
    72ba:	463a      	mov	r2, r7
    72bc:	e733      	b.n	7126 <_realloc_r+0x1da>
    72be:	4621      	mov	r1, r4
    72c0:	4638      	mov	r0, r7
    72c2:	f000 f9bf 	bl	7644 <memmove>
    72c6:	4b16      	ldr	r3, [pc, #88]	; (7320 <_realloc_r+0x3d4>)
    72c8:	e733      	b.n	7132 <_realloc_r+0x1e6>
    72ca:	6922      	ldr	r2, [r4, #16]
    72cc:	f8ca 2018 	str.w	r2, [sl, #24]
    72d0:	6962      	ldr	r2, [r4, #20]
    72d2:	f8ca 201c 	str.w	r2, [sl, #28]
    72d6:	3418      	adds	r4, #24
    72d8:	f10a 0220 	add.w	r2, sl, #32
    72dc:	e778      	b.n	71d0 <_realloc_r+0x284>
    72de:	68a1      	ldr	r1, [r4, #8]
    72e0:	f8ca 1010 	str.w	r1, [sl, #16]
    72e4:	68e1      	ldr	r1, [r4, #12]
    72e6:	f8ca 1014 	str.w	r1, [sl, #20]
    72ea:	2a24      	cmp	r2, #36	; 0x24
    72ec:	d00d      	beq.n	730a <_realloc_r+0x3be>
    72ee:	3410      	adds	r4, #16
    72f0:	f10a 0218 	add.w	r2, sl, #24
    72f4:	e717      	b.n	7126 <_realloc_r+0x1da>
    72f6:	6923      	ldr	r3, [r4, #16]
    72f8:	f8ca 3018 	str.w	r3, [sl, #24]
    72fc:	6963      	ldr	r3, [r4, #20]
    72fe:	f8ca 301c 	str.w	r3, [sl, #28]
    7302:	3418      	adds	r4, #24
    7304:	f10a 0320 	add.w	r3, sl, #32
    7308:	e78b      	b.n	7222 <_realloc_r+0x2d6>
    730a:	6922      	ldr	r2, [r4, #16]
    730c:	f8ca 2018 	str.w	r2, [sl, #24]
    7310:	6962      	ldr	r2, [r4, #20]
    7312:	f8ca 201c 	str.w	r2, [sl, #28]
    7316:	3418      	adds	r4, #24
    7318:	f10a 0220 	add.w	r2, sl, #32
    731c:	e703      	b.n	7126 <_realloc_r+0x1da>
    731e:	bf00      	nop
    7320:	1fff082c 	.word	0x1fff082c

00007324 <stdio_exit_handler>:
    7324:	4a02      	ldr	r2, [pc, #8]	; (7330 <stdio_exit_handler+0xc>)
    7326:	4903      	ldr	r1, [pc, #12]	; (7334 <stdio_exit_handler+0x10>)
    7328:	4803      	ldr	r0, [pc, #12]	; (7338 <stdio_exit_handler+0x14>)
    732a:	f000 b8bb 	b.w	74a4 <_fwalk_sglue>
    732e:	bf00      	nop
    7330:	1fff0c3c 	.word	0x1fff0c3c
    7334:	0000a0c9 	.word	0x0000a0c9
    7338:	1fff0db8 	.word	0x1fff0db8

0000733c <cleanup_stdio>:
    733c:	4b0c      	ldr	r3, [pc, #48]	; (7370 <cleanup_stdio+0x34>)
    733e:	6841      	ldr	r1, [r0, #4]
    7340:	4299      	cmp	r1, r3
    7342:	b510      	push	{r4, lr}
    7344:	4604      	mov	r4, r0
    7346:	d001      	beq.n	734c <cleanup_stdio+0x10>
    7348:	f002 febe 	bl	a0c8 <_fclose_r>
    734c:	68a1      	ldr	r1, [r4, #8]
    734e:	4b09      	ldr	r3, [pc, #36]	; (7374 <cleanup_stdio+0x38>)
    7350:	4299      	cmp	r1, r3
    7352:	d002      	beq.n	735a <cleanup_stdio+0x1e>
    7354:	4620      	mov	r0, r4
    7356:	f002 feb7 	bl	a0c8 <_fclose_r>
    735a:	68e1      	ldr	r1, [r4, #12]
    735c:	4b06      	ldr	r3, [pc, #24]	; (7378 <cleanup_stdio+0x3c>)
    735e:	4299      	cmp	r1, r3
    7360:	d004      	beq.n	736c <cleanup_stdio+0x30>
    7362:	4620      	mov	r0, r4
    7364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7368:	f002 beae 	b.w	a0c8 <_fclose_r>
    736c:	bd10      	pop	{r4, pc}
    736e:	bf00      	nop
    7370:	1fff6400 	.word	0x1fff6400
    7374:	1fff6468 	.word	0x1fff6468
    7378:	1fff64d0 	.word	0x1fff64d0

0000737c <global_stdio_init.part.0>:
    737c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7380:	4c2a      	ldr	r4, [pc, #168]	; (742c <global_stdio_init.part.0+0xb0>)
    7382:	4b2b      	ldr	r3, [pc, #172]	; (7430 <global_stdio_init.part.0+0xb4>)
    7384:	482b      	ldr	r0, [pc, #172]	; (7434 <global_stdio_init.part.0+0xb8>)
    7386:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 7448 <global_stdio_init.part.0+0xcc>
    738a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 744c <global_stdio_init.part.0+0xd0>
    738e:	4f2a      	ldr	r7, [pc, #168]	; (7438 <global_stdio_init.part.0+0xbc>)
    7390:	6018      	str	r0, [r3, #0]
    7392:	2500      	movs	r5, #0
    7394:	2304      	movs	r3, #4
    7396:	2208      	movs	r2, #8
    7398:	4629      	mov	r1, r5
    739a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    739e:	4e27      	ldr	r6, [pc, #156]	; (743c <global_stdio_init.part.0+0xc0>)
    73a0:	6665      	str	r5, [r4, #100]	; 0x64
    73a2:	e9c4 5302 	strd	r5, r3, [r4, #8]
    73a6:	e9c4 5500 	strd	r5, r5, [r4]
    73aa:	e9c4 5504 	strd	r5, r5, [r4, #16]
    73ae:	61a5      	str	r5, [r4, #24]
    73b0:	f000 f9c4 	bl	773c <memset>
    73b4:	4b22      	ldr	r3, [pc, #136]	; (7440 <global_stdio_init.part.0+0xc4>)
    73b6:	6763      	str	r3, [r4, #116]	; 0x74
    73b8:	2208      	movs	r2, #8
    73ba:	4629      	mov	r1, r5
    73bc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    73c0:	e9c4 4907 	strd	r4, r9, [r4, #28]
    73c4:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    73c8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    73cc:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    73d0:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    73d4:	6725      	str	r5, [r4, #112]	; 0x70
    73d6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    73da:	62e6      	str	r6, [r4, #44]	; 0x2c
    73dc:	f000 f9ae 	bl	773c <memset>
    73e0:	4b18      	ldr	r3, [pc, #96]	; (7444 <global_stdio_init.part.0+0xc8>)
    73e2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    73e6:	4629      	mov	r1, r5
    73e8:	f104 0368 	add.w	r3, r4, #104	; 0x68
    73ec:	2208      	movs	r2, #8
    73ee:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    73f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    73f6:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    73fa:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    73fe:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    7402:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    7406:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    740a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    740e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    7412:	f000 f993 	bl	773c <memset>
    7416:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    741a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    741e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    7422:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    7426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    742a:	bf00      	nop
    742c:	1fff6400 	.word	0x1fff6400
    7430:	1fff6538 	.word	0x1fff6538
    7434:	00007325 	.word	0x00007325
    7438:	00007551 	.word	0x00007551
    743c:	00007571 	.word	0x00007571
    7440:	00010009 	.word	0x00010009
    7444:	00020012 	.word	0x00020012
    7448:	000074ed 	.word	0x000074ed
    744c:	00007511 	.word	0x00007511

00007450 <__sinit>:
    7450:	b510      	push	{r4, lr}
    7452:	4604      	mov	r4, r0
    7454:	480a      	ldr	r0, [pc, #40]	; (7480 <__sinit+0x30>)
    7456:	f000 fa8f 	bl	7978 <__retarget_lock_acquire_recursive>
    745a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    745c:	b923      	cbnz	r3, 7468 <__sinit+0x18>
    745e:	4b09      	ldr	r3, [pc, #36]	; (7484 <__sinit+0x34>)
    7460:	4a09      	ldr	r2, [pc, #36]	; (7488 <__sinit+0x38>)
    7462:	681b      	ldr	r3, [r3, #0]
    7464:	6362      	str	r2, [r4, #52]	; 0x34
    7466:	b123      	cbz	r3, 7472 <__sinit+0x22>
    7468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    746c:	4804      	ldr	r0, [pc, #16]	; (7480 <__sinit+0x30>)
    746e:	f000 ba85 	b.w	797c <__retarget_lock_release_recursive>
    7472:	f7ff ff83 	bl	737c <global_stdio_init.part.0>
    7476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    747a:	4801      	ldr	r0, [pc, #4]	; (7480 <__sinit+0x30>)
    747c:	f000 ba7e 	b.w	797c <__retarget_lock_release_recursive>
    7480:	1fff6548 	.word	0x1fff6548
    7484:	1fff6538 	.word	0x1fff6538
    7488:	0000733d 	.word	0x0000733d

0000748c <__sfp_lock_acquire>:
    748c:	4801      	ldr	r0, [pc, #4]	; (7494 <__sfp_lock_acquire+0x8>)
    748e:	f000 ba73 	b.w	7978 <__retarget_lock_acquire_recursive>
    7492:	bf00      	nop
    7494:	1fff6548 	.word	0x1fff6548

00007498 <__sfp_lock_release>:
    7498:	4801      	ldr	r0, [pc, #4]	; (74a0 <__sfp_lock_release+0x8>)
    749a:	f000 ba6f 	b.w	797c <__retarget_lock_release_recursive>
    749e:	bf00      	nop
    74a0:	1fff6548 	.word	0x1fff6548

000074a4 <_fwalk_sglue>:
    74a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    74a8:	4680      	mov	r8, r0
    74aa:	460f      	mov	r7, r1
    74ac:	4616      	mov	r6, r2
    74ae:	f04f 0900 	mov.w	r9, #0
    74b2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    74b6:	3d01      	subs	r5, #1
    74b8:	d411      	bmi.n	74de <_fwalk_sglue+0x3a>
    74ba:	89a3      	ldrh	r3, [r4, #12]
    74bc:	2b01      	cmp	r3, #1
    74be:	f105 35ff 	add.w	r5, r5, #4294967295
    74c2:	d908      	bls.n	74d6 <_fwalk_sglue+0x32>
    74c4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    74c8:	3301      	adds	r3, #1
    74ca:	4621      	mov	r1, r4
    74cc:	d003      	beq.n	74d6 <_fwalk_sglue+0x32>
    74ce:	4640      	mov	r0, r8
    74d0:	47b8      	blx	r7
    74d2:	ea49 0900 	orr.w	r9, r9, r0
    74d6:	1c6b      	adds	r3, r5, #1
    74d8:	f104 0468 	add.w	r4, r4, #104	; 0x68
    74dc:	d1ed      	bne.n	74ba <_fwalk_sglue+0x16>
    74de:	6836      	ldr	r6, [r6, #0]
    74e0:	2e00      	cmp	r6, #0
    74e2:	d1e6      	bne.n	74b2 <_fwalk_sglue+0xe>
    74e4:	4648      	mov	r0, r9
    74e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    74ea:	bf00      	nop

000074ec <__sread>:
    74ec:	b510      	push	{r4, lr}
    74ee:	460c      	mov	r4, r1
    74f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    74f4:	f000 f9d4 	bl	78a0 <_read_r>
    74f8:	2800      	cmp	r0, #0
    74fa:	db03      	blt.n	7504 <__sread+0x18>
    74fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    74fe:	4403      	add	r3, r0
    7500:	6523      	str	r3, [r4, #80]	; 0x50
    7502:	bd10      	pop	{r4, pc}
    7504:	89a3      	ldrh	r3, [r4, #12]
    7506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    750a:	81a3      	strh	r3, [r4, #12]
    750c:	bd10      	pop	{r4, pc}
    750e:	bf00      	nop

00007510 <__swrite>:
    7510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7514:	460c      	mov	r4, r1
    7516:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    751a:	461f      	mov	r7, r3
    751c:	05cb      	lsls	r3, r1, #23
    751e:	4605      	mov	r5, r0
    7520:	4616      	mov	r6, r2
    7522:	d40b      	bmi.n	753c <__swrite+0x2c>
    7524:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    7528:	81a1      	strh	r1, [r4, #12]
    752a:	463b      	mov	r3, r7
    752c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7530:	4632      	mov	r2, r6
    7532:	4628      	mov	r0, r5
    7534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7538:	f000 b9da 	b.w	78f0 <_write_r>
    753c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7540:	2302      	movs	r3, #2
    7542:	2200      	movs	r2, #0
    7544:	f000 f996 	bl	7874 <_lseek_r>
    7548:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    754c:	e7ea      	b.n	7524 <__swrite+0x14>
    754e:	bf00      	nop

00007550 <__sseek>:
    7550:	b510      	push	{r4, lr}
    7552:	460c      	mov	r4, r1
    7554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7558:	f000 f98c 	bl	7874 <_lseek_r>
    755c:	89a3      	ldrh	r3, [r4, #12]
    755e:	1c42      	adds	r2, r0, #1
    7560:	bf0e      	itee	eq
    7562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    7566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    756a:	6520      	strne	r0, [r4, #80]	; 0x50
    756c:	81a3      	strh	r3, [r4, #12]
    756e:	bd10      	pop	{r4, pc}

00007570 <__sclose>:
    7570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7574:	f000 b96c 	b.w	7850 <_close_r>

00007578 <_vdprintf_r>:
    7578:	b5f0      	push	{r4, r5, r6, r7, lr}
    757a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    757e:	af04      	add	r7, sp, #16
    7580:	9300      	str	r3, [sp, #0]
    7582:	4613      	mov	r3, r2
    7584:	f44f 7200 	mov.w	r2, #512	; 0x200
    7588:	460e      	mov	r6, r1
    758a:	9203      	str	r2, [sp, #12]
    758c:	4639      	mov	r1, r7
    758e:	aa03      	add	r2, sp, #12
    7590:	4605      	mov	r5, r0
    7592:	f000 f825 	bl	75e0 <_vasnprintf_r>
    7596:	b188      	cbz	r0, 75bc <_vdprintf_r+0x44>
    7598:	4604      	mov	r4, r0
    759a:	4602      	mov	r2, r0
    759c:	9b03      	ldr	r3, [sp, #12]
    759e:	4631      	mov	r1, r6
    75a0:	4628      	mov	r0, r5
    75a2:	f000 f9a5 	bl	78f0 <_write_r>
    75a6:	42bc      	cmp	r4, r7
    75a8:	9003      	str	r0, [sp, #12]
    75aa:	d004      	beq.n	75b6 <_vdprintf_r+0x3e>
    75ac:	4628      	mov	r0, r5
    75ae:	4621      	mov	r1, r4
    75b0:	f000 fab4 	bl	7b1c <_free_r>
    75b4:	9803      	ldr	r0, [sp, #12]
    75b6:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    75ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75bc:	f04f 30ff 	mov.w	r0, #4294967295
    75c0:	e7f9      	b.n	75b6 <_vdprintf_r+0x3e>
    75c2:	bf00      	nop

000075c4 <vdprintf>:
    75c4:	b410      	push	{r4}
    75c6:	4c05      	ldr	r4, [pc, #20]	; (75dc <vdprintf+0x18>)
    75c8:	4684      	mov	ip, r0
    75ca:	4613      	mov	r3, r2
    75cc:	6820      	ldr	r0, [r4, #0]
    75ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    75d2:	460a      	mov	r2, r1
    75d4:	4661      	mov	r1, ip
    75d6:	f7ff bfcf 	b.w	7578 <_vdprintf_r>
    75da:	bf00      	nop
    75dc:	1fff0ed8 	.word	0x1fff0ed8

000075e0 <_vasnprintf_r>:
    75e0:	b530      	push	{r4, r5, lr}
    75e2:	6814      	ldr	r4, [r2, #0]
    75e4:	4615      	mov	r5, r2
    75e6:	b09b      	sub	sp, #108	; 0x6c
    75e8:	461a      	mov	r2, r3
    75ea:	b109      	cbz	r1, 75f0 <_vasnprintf_r+0x10>
    75ec:	2c00      	cmp	r4, #0
    75ee:	d119      	bne.n	7624 <_vasnprintf_r+0x44>
    75f0:	2100      	movs	r1, #0
    75f2:	f44f 7322 	mov.w	r3, #648	; 0x288
    75f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    75fa:	9100      	str	r1, [sp, #0]
    75fc:	9104      	str	r1, [sp, #16]
    75fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7602:	9102      	str	r1, [sp, #8]
    7604:	9105      	str	r1, [sp, #20]
    7606:	f8ad 300e 	strh.w	r3, [sp, #14]
    760a:	4669      	mov	r1, sp
    760c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    760e:	f000 ff6b 	bl	84e8 <_svfprintf_r>
    7612:	2800      	cmp	r0, #0
    7614:	db13      	blt.n	763e <_vasnprintf_r+0x5e>
    7616:	9b00      	ldr	r3, [sp, #0]
    7618:	6028      	str	r0, [r5, #0]
    761a:	2200      	movs	r2, #0
    761c:	701a      	strb	r2, [r3, #0]
    761e:	9804      	ldr	r0, [sp, #16]
    7620:	b01b      	add	sp, #108	; 0x6c
    7622:	bd30      	pop	{r4, r5, pc}
    7624:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    7628:	9100      	str	r1, [sp, #0]
    762a:	9104      	str	r1, [sp, #16]
    762c:	f8ad 300c 	strh.w	r3, [sp, #12]
    7630:	4621      	mov	r1, r4
    7632:	dae4      	bge.n	75fe <_vasnprintf_r+0x1e>
    7634:	238b      	movs	r3, #139	; 0x8b
    7636:	6003      	str	r3, [r0, #0]
    7638:	2000      	movs	r0, #0
    763a:	b01b      	add	sp, #108	; 0x6c
    763c:	bd30      	pop	{r4, r5, pc}
    763e:	2000      	movs	r0, #0
    7640:	e7ee      	b.n	7620 <_vasnprintf_r+0x40>
    7642:	bf00      	nop

00007644 <memmove>:
    7644:	4288      	cmp	r0, r1
    7646:	d90d      	bls.n	7664 <memmove+0x20>
    7648:	188b      	adds	r3, r1, r2
    764a:	4283      	cmp	r3, r0
    764c:	d90a      	bls.n	7664 <memmove+0x20>
    764e:	eb00 0c02 	add.w	ip, r0, r2
    7652:	b1ba      	cbz	r2, 7684 <memmove+0x40>
    7654:	4662      	mov	r2, ip
    7656:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    765a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    765e:	4299      	cmp	r1, r3
    7660:	d1f9      	bne.n	7656 <memmove+0x12>
    7662:	4770      	bx	lr
    7664:	2a0f      	cmp	r2, #15
    7666:	d80e      	bhi.n	7686 <memmove+0x42>
    7668:	4603      	mov	r3, r0
    766a:	f102 3cff 	add.w	ip, r2, #4294967295
    766e:	b14a      	cbz	r2, 7684 <memmove+0x40>
    7670:	f10c 0c01 	add.w	ip, ip, #1
    7674:	3b01      	subs	r3, #1
    7676:	448c      	add	ip, r1
    7678:	f811 2b01 	ldrb.w	r2, [r1], #1
    767c:	f803 2f01 	strb.w	r2, [r3, #1]!
    7680:	4561      	cmp	r1, ip
    7682:	d1f9      	bne.n	7678 <memmove+0x34>
    7684:	4770      	bx	lr
    7686:	ea40 0301 	orr.w	r3, r0, r1
    768a:	079b      	lsls	r3, r3, #30
    768c:	d150      	bne.n	7730 <memmove+0xec>
    768e:	f1a2 0310 	sub.w	r3, r2, #16
    7692:	b570      	push	{r4, r5, r6, lr}
    7694:	f101 0c20 	add.w	ip, r1, #32
    7698:	f023 050f 	bic.w	r5, r3, #15
    769c:	f101 0e10 	add.w	lr, r1, #16
    76a0:	f100 0410 	add.w	r4, r0, #16
    76a4:	44ac      	add	ip, r5
    76a6:	091b      	lsrs	r3, r3, #4
    76a8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    76ac:	f844 5c10 	str.w	r5, [r4, #-16]
    76b0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    76b4:	f844 5c0c 	str.w	r5, [r4, #-12]
    76b8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    76bc:	f844 5c08 	str.w	r5, [r4, #-8]
    76c0:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    76c4:	f844 5c04 	str.w	r5, [r4, #-4]
    76c8:	f10e 0e10 	add.w	lr, lr, #16
    76cc:	45e6      	cmp	lr, ip
    76ce:	f104 0410 	add.w	r4, r4, #16
    76d2:	d1e9      	bne.n	76a8 <memmove+0x64>
    76d4:	3301      	adds	r3, #1
    76d6:	f012 0f0c 	tst.w	r2, #12
    76da:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    76de:	f002 040f 	and.w	r4, r2, #15
    76e2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    76e6:	d027      	beq.n	7738 <memmove+0xf4>
    76e8:	3c04      	subs	r4, #4
    76ea:	f024 0603 	bic.w	r6, r4, #3
    76ee:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    76f2:	441e      	add	r6, r3
    76f4:	1f1c      	subs	r4, r3, #4
    76f6:	468e      	mov	lr, r1
    76f8:	f85e 5b04 	ldr.w	r5, [lr], #4
    76fc:	f844 5f04 	str.w	r5, [r4, #4]!
    7700:	42b4      	cmp	r4, r6
    7702:	d1f9      	bne.n	76f8 <memmove+0xb4>
    7704:	f10c 0401 	add.w	r4, ip, #1
    7708:	f002 0203 	and.w	r2, r2, #3
    770c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7710:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    7714:	f102 3cff 	add.w	ip, r2, #4294967295
    7718:	b14a      	cbz	r2, 772e <memmove+0xea>
    771a:	f10c 0c01 	add.w	ip, ip, #1
    771e:	3b01      	subs	r3, #1
    7720:	448c      	add	ip, r1
    7722:	f811 2b01 	ldrb.w	r2, [r1], #1
    7726:	f803 2f01 	strb.w	r2, [r3, #1]!
    772a:	4561      	cmp	r1, ip
    772c:	d1f9      	bne.n	7722 <memmove+0xde>
    772e:	bd70      	pop	{r4, r5, r6, pc}
    7730:	f102 3cff 	add.w	ip, r2, #4294967295
    7734:	4603      	mov	r3, r0
    7736:	e79b      	b.n	7670 <memmove+0x2c>
    7738:	4622      	mov	r2, r4
    773a:	e7eb      	b.n	7714 <memmove+0xd0>

0000773c <memset>:
    773c:	0783      	lsls	r3, r0, #30
    773e:	b530      	push	{r4, r5, lr}
    7740:	d048      	beq.n	77d4 <memset+0x98>
    7742:	1e54      	subs	r4, r2, #1
    7744:	2a00      	cmp	r2, #0
    7746:	d03f      	beq.n	77c8 <memset+0x8c>
    7748:	b2ca      	uxtb	r2, r1
    774a:	4603      	mov	r3, r0
    774c:	e001      	b.n	7752 <memset+0x16>
    774e:	3c01      	subs	r4, #1
    7750:	d33a      	bcc.n	77c8 <memset+0x8c>
    7752:	f803 2b01 	strb.w	r2, [r3], #1
    7756:	079d      	lsls	r5, r3, #30
    7758:	d1f9      	bne.n	774e <memset+0x12>
    775a:	2c03      	cmp	r4, #3
    775c:	d92d      	bls.n	77ba <memset+0x7e>
    775e:	b2cd      	uxtb	r5, r1
    7760:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    7764:	2c0f      	cmp	r4, #15
    7766:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    776a:	d936      	bls.n	77da <memset+0x9e>
    776c:	f1a4 0210 	sub.w	r2, r4, #16
    7770:	f022 0c0f 	bic.w	ip, r2, #15
    7774:	f103 0e20 	add.w	lr, r3, #32
    7778:	44e6      	add	lr, ip
    777a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    777e:	f103 0210 	add.w	r2, r3, #16
    7782:	e942 5504 	strd	r5, r5, [r2, #-16]
    7786:	e942 5502 	strd	r5, r5, [r2, #-8]
    778a:	3210      	adds	r2, #16
    778c:	4572      	cmp	r2, lr
    778e:	d1f8      	bne.n	7782 <memset+0x46>
    7790:	f10c 0201 	add.w	r2, ip, #1
    7794:	f014 0f0c 	tst.w	r4, #12
    7798:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    779c:	f004 0c0f 	and.w	ip, r4, #15
    77a0:	d013      	beq.n	77ca <memset+0x8e>
    77a2:	f1ac 0304 	sub.w	r3, ip, #4
    77a6:	f023 0303 	bic.w	r3, r3, #3
    77aa:	3304      	adds	r3, #4
    77ac:	4413      	add	r3, r2
    77ae:	f842 5b04 	str.w	r5, [r2], #4
    77b2:	4293      	cmp	r3, r2
    77b4:	d1fb      	bne.n	77ae <memset+0x72>
    77b6:	f00c 0403 	and.w	r4, ip, #3
    77ba:	b12c      	cbz	r4, 77c8 <memset+0x8c>
    77bc:	b2c9      	uxtb	r1, r1
    77be:	441c      	add	r4, r3
    77c0:	f803 1b01 	strb.w	r1, [r3], #1
    77c4:	429c      	cmp	r4, r3
    77c6:	d1fb      	bne.n	77c0 <memset+0x84>
    77c8:	bd30      	pop	{r4, r5, pc}
    77ca:	4664      	mov	r4, ip
    77cc:	4613      	mov	r3, r2
    77ce:	2c00      	cmp	r4, #0
    77d0:	d1f4      	bne.n	77bc <memset+0x80>
    77d2:	e7f9      	b.n	77c8 <memset+0x8c>
    77d4:	4603      	mov	r3, r0
    77d6:	4614      	mov	r4, r2
    77d8:	e7bf      	b.n	775a <memset+0x1e>
    77da:	461a      	mov	r2, r3
    77dc:	46a4      	mov	ip, r4
    77de:	e7e0      	b.n	77a2 <memset+0x66>

000077e0 <strncpy>:
    77e0:	ea40 0301 	orr.w	r3, r0, r1
    77e4:	079b      	lsls	r3, r3, #30
    77e6:	b530      	push	{r4, r5, lr}
    77e8:	d101      	bne.n	77ee <strncpy+0xe>
    77ea:	2a03      	cmp	r2, #3
    77ec:	d80f      	bhi.n	780e <strncpy+0x2e>
    77ee:	4684      	mov	ip, r0
    77f0:	f101 3eff 	add.w	lr, r1, #4294967295
    77f4:	e007      	b.n	7806 <strncpy+0x26>
    77f6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    77fa:	f803 1b01 	strb.w	r1, [r3], #1
    77fe:	1e54      	subs	r4, r2, #1
    7800:	b1c1      	cbz	r1, 7834 <strncpy+0x54>
    7802:	469c      	mov	ip, r3
    7804:	4622      	mov	r2, r4
    7806:	4663      	mov	r3, ip
    7808:	2a00      	cmp	r2, #0
    780a:	d1f4      	bne.n	77f6 <strncpy+0x16>
    780c:	bd30      	pop	{r4, r5, pc}
    780e:	460b      	mov	r3, r1
    7810:	4684      	mov	ip, r0
    7812:	4619      	mov	r1, r3
    7814:	f853 5b04 	ldr.w	r5, [r3], #4
    7818:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    781c:	ea24 0405 	bic.w	r4, r4, r5
    7820:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    7824:	d1e4      	bne.n	77f0 <strncpy+0x10>
    7826:	3a04      	subs	r2, #4
    7828:	2a03      	cmp	r2, #3
    782a:	f84c 5b04 	str.w	r5, [ip], #4
    782e:	4619      	mov	r1, r3
    7830:	d8ef      	bhi.n	7812 <strncpy+0x32>
    7832:	e7dd      	b.n	77f0 <strncpy+0x10>
    7834:	4494      	add	ip, r2
    7836:	2c00      	cmp	r4, #0
    7838:	d0e8      	beq.n	780c <strncpy+0x2c>
    783a:	f803 1b01 	strb.w	r1, [r3], #1
    783e:	4563      	cmp	r3, ip
    7840:	d1fb      	bne.n	783a <strncpy+0x5a>
    7842:	bd30      	pop	{r4, r5, pc}

00007844 <__locale_mb_cur_max>:
    7844:	4b01      	ldr	r3, [pc, #4]	; (784c <__locale_mb_cur_max+0x8>)
    7846:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    784a:	4770      	bx	lr
    784c:	1fff0c48 	.word	0x1fff0c48

00007850 <_close_r>:
    7850:	b538      	push	{r3, r4, r5, lr}
    7852:	4d07      	ldr	r5, [pc, #28]	; (7870 <_close_r+0x20>)
    7854:	2200      	movs	r2, #0
    7856:	4604      	mov	r4, r0
    7858:	4608      	mov	r0, r1
    785a:	602a      	str	r2, [r5, #0]
    785c:	f7fd fae0 	bl	4e20 <_close>
    7860:	1c43      	adds	r3, r0, #1
    7862:	d000      	beq.n	7866 <_close_r+0x16>
    7864:	bd38      	pop	{r3, r4, r5, pc}
    7866:	682b      	ldr	r3, [r5, #0]
    7868:	2b00      	cmp	r3, #0
    786a:	d0fb      	beq.n	7864 <_close_r+0x14>
    786c:	6023      	str	r3, [r4, #0]
    786e:	bd38      	pop	{r3, r4, r5, pc}
    7870:	1fff653c 	.word	0x1fff653c

00007874 <_lseek_r>:
    7874:	b538      	push	{r3, r4, r5, lr}
    7876:	460c      	mov	r4, r1
    7878:	4d08      	ldr	r5, [pc, #32]	; (789c <_lseek_r+0x28>)
    787a:	4684      	mov	ip, r0
    787c:	4611      	mov	r1, r2
    787e:	4620      	mov	r0, r4
    7880:	461a      	mov	r2, r3
    7882:	2300      	movs	r3, #0
    7884:	602b      	str	r3, [r5, #0]
    7886:	4664      	mov	r4, ip
    7888:	f7fd fad6 	bl	4e38 <_lseek>
    788c:	1c43      	adds	r3, r0, #1
    788e:	d000      	beq.n	7892 <_lseek_r+0x1e>
    7890:	bd38      	pop	{r3, r4, r5, pc}
    7892:	682b      	ldr	r3, [r5, #0]
    7894:	2b00      	cmp	r3, #0
    7896:	d0fb      	beq.n	7890 <_lseek_r+0x1c>
    7898:	6023      	str	r3, [r4, #0]
    789a:	bd38      	pop	{r3, r4, r5, pc}
    789c:	1fff653c 	.word	0x1fff653c

000078a0 <_read_r>:
    78a0:	b538      	push	{r3, r4, r5, lr}
    78a2:	460c      	mov	r4, r1
    78a4:	4d08      	ldr	r5, [pc, #32]	; (78c8 <_read_r+0x28>)
    78a6:	4684      	mov	ip, r0
    78a8:	4611      	mov	r1, r2
    78aa:	4620      	mov	r0, r4
    78ac:	461a      	mov	r2, r3
    78ae:	2300      	movs	r3, #0
    78b0:	602b      	str	r3, [r5, #0]
    78b2:	4664      	mov	r4, ip
    78b4:	f7fd fab2 	bl	4e1c <_read>
    78b8:	1c43      	adds	r3, r0, #1
    78ba:	d000      	beq.n	78be <_read_r+0x1e>
    78bc:	bd38      	pop	{r3, r4, r5, pc}
    78be:	682b      	ldr	r3, [r5, #0]
    78c0:	2b00      	cmp	r3, #0
    78c2:	d0fb      	beq.n	78bc <_read_r+0x1c>
    78c4:	6023      	str	r3, [r4, #0]
    78c6:	bd38      	pop	{r3, r4, r5, pc}
    78c8:	1fff653c 	.word	0x1fff653c

000078cc <_sbrk_r>:
    78cc:	b538      	push	{r3, r4, r5, lr}
    78ce:	4d07      	ldr	r5, [pc, #28]	; (78ec <_sbrk_r+0x20>)
    78d0:	2200      	movs	r2, #0
    78d2:	4604      	mov	r4, r0
    78d4:	4608      	mov	r0, r1
    78d6:	602a      	str	r2, [r5, #0]
    78d8:	f7fd fa86 	bl	4de8 <_sbrk>
    78dc:	1c43      	adds	r3, r0, #1
    78de:	d000      	beq.n	78e2 <_sbrk_r+0x16>
    78e0:	bd38      	pop	{r3, r4, r5, pc}
    78e2:	682b      	ldr	r3, [r5, #0]
    78e4:	2b00      	cmp	r3, #0
    78e6:	d0fb      	beq.n	78e0 <_sbrk_r+0x14>
    78e8:	6023      	str	r3, [r4, #0]
    78ea:	bd38      	pop	{r3, r4, r5, pc}
    78ec:	1fff653c 	.word	0x1fff653c

000078f0 <_write_r>:
    78f0:	b538      	push	{r3, r4, r5, lr}
    78f2:	460c      	mov	r4, r1
    78f4:	4d08      	ldr	r5, [pc, #32]	; (7918 <_write_r+0x28>)
    78f6:	4684      	mov	ip, r0
    78f8:	4611      	mov	r1, r2
    78fa:	4620      	mov	r0, r4
    78fc:	461a      	mov	r2, r3
    78fe:	2300      	movs	r3, #0
    7900:	602b      	str	r3, [r5, #0]
    7902:	4664      	mov	r4, ip
    7904:	f7fd f944 	bl	4b90 <_write>
    7908:	1c43      	adds	r3, r0, #1
    790a:	d000      	beq.n	790e <_write_r+0x1e>
    790c:	bd38      	pop	{r3, r4, r5, pc}
    790e:	682b      	ldr	r3, [r5, #0]
    7910:	2b00      	cmp	r3, #0
    7912:	d0fb      	beq.n	790c <_write_r+0x1c>
    7914:	6023      	str	r3, [r4, #0]
    7916:	bd38      	pop	{r3, r4, r5, pc}
    7918:	1fff653c 	.word	0x1fff653c

0000791c <__errno>:
    791c:	4b01      	ldr	r3, [pc, #4]	; (7924 <__errno+0x8>)
    791e:	6818      	ldr	r0, [r3, #0]
    7920:	4770      	bx	lr
    7922:	bf00      	nop
    7924:	1fff0ed8 	.word	0x1fff0ed8

00007928 <__libc_init_array>:
    7928:	b570      	push	{r4, r5, r6, lr}
    792a:	4e0d      	ldr	r6, [pc, #52]	; (7960 <__libc_init_array+0x38>)
    792c:	4d0d      	ldr	r5, [pc, #52]	; (7964 <__libc_init_array+0x3c>)
    792e:	1b76      	subs	r6, r6, r5
    7930:	10b6      	asrs	r6, r6, #2
    7932:	d006      	beq.n	7942 <__libc_init_array+0x1a>
    7934:	2400      	movs	r4, #0
    7936:	f855 3b04 	ldr.w	r3, [r5], #4
    793a:	3401      	adds	r4, #1
    793c:	4798      	blx	r3
    793e:	42a6      	cmp	r6, r4
    7940:	d1f9      	bne.n	7936 <__libc_init_array+0xe>
    7942:	4e09      	ldr	r6, [pc, #36]	; (7968 <__libc_init_array+0x40>)
    7944:	4d09      	ldr	r5, [pc, #36]	; (796c <__libc_init_array+0x44>)
    7946:	1b76      	subs	r6, r6, r5
    7948:	f006 f8f0 	bl	db2c <_init>
    794c:	10b6      	asrs	r6, r6, #2
    794e:	d006      	beq.n	795e <__libc_init_array+0x36>
    7950:	2400      	movs	r4, #0
    7952:	f855 3b04 	ldr.w	r3, [r5], #4
    7956:	3401      	adds	r4, #1
    7958:	4798      	blx	r3
    795a:	42a6      	cmp	r6, r4
    795c:	d1f9      	bne.n	7952 <__libc_init_array+0x2a>
    795e:	bd70      	pop	{r4, r5, r6, pc}
    7960:	0000db38 	.word	0x0000db38
    7964:	0000db38 	.word	0x0000db38
    7968:	0000db44 	.word	0x0000db44
    796c:	0000db38 	.word	0x0000db38

00007970 <__retarget_lock_init_recursive>:
    7970:	4770      	bx	lr
    7972:	bf00      	nop

00007974 <__retarget_lock_close_recursive>:
    7974:	4770      	bx	lr
    7976:	bf00      	nop

00007978 <__retarget_lock_acquire_recursive>:
    7978:	4770      	bx	lr
    797a:	bf00      	nop

0000797c <__retarget_lock_release_recursive>:
    797c:	4770      	bx	lr
    797e:	bf00      	nop

00007980 <strlen>:
    7980:	f890 f000 	pld	[r0]
    7984:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    7988:	f020 0107 	bic.w	r1, r0, #7
    798c:	f06f 0c00 	mvn.w	ip, #0
    7990:	f010 0407 	ands.w	r4, r0, #7
    7994:	f891 f020 	pld	[r1, #32]
    7998:	f040 8049 	bne.w	7a2e <strlen+0xae>
    799c:	f04f 0400 	mov.w	r4, #0
    79a0:	f06f 0007 	mvn.w	r0, #7
    79a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    79a8:	f891 f040 	pld	[r1, #64]	; 0x40
    79ac:	f100 0008 	add.w	r0, r0, #8
    79b0:	fa82 f24c 	uadd8	r2, r2, ip
    79b4:	faa4 f28c 	sel	r2, r4, ip
    79b8:	fa83 f34c 	uadd8	r3, r3, ip
    79bc:	faa2 f38c 	sel	r3, r2, ip
    79c0:	bb4b      	cbnz	r3, 7a16 <strlen+0x96>
    79c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    79c6:	fa82 f24c 	uadd8	r2, r2, ip
    79ca:	f100 0008 	add.w	r0, r0, #8
    79ce:	faa4 f28c 	sel	r2, r4, ip
    79d2:	fa83 f34c 	uadd8	r3, r3, ip
    79d6:	faa2 f38c 	sel	r3, r2, ip
    79da:	b9e3      	cbnz	r3, 7a16 <strlen+0x96>
    79dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    79e0:	fa82 f24c 	uadd8	r2, r2, ip
    79e4:	f100 0008 	add.w	r0, r0, #8
    79e8:	faa4 f28c 	sel	r2, r4, ip
    79ec:	fa83 f34c 	uadd8	r3, r3, ip
    79f0:	faa2 f38c 	sel	r3, r2, ip
    79f4:	b97b      	cbnz	r3, 7a16 <strlen+0x96>
    79f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    79fa:	f101 0120 	add.w	r1, r1, #32
    79fe:	fa82 f24c 	uadd8	r2, r2, ip
    7a02:	f100 0008 	add.w	r0, r0, #8
    7a06:	faa4 f28c 	sel	r2, r4, ip
    7a0a:	fa83 f34c 	uadd8	r3, r3, ip
    7a0e:	faa2 f38c 	sel	r3, r2, ip
    7a12:	2b00      	cmp	r3, #0
    7a14:	d0c6      	beq.n	79a4 <strlen+0x24>
    7a16:	2a00      	cmp	r2, #0
    7a18:	bf04      	itt	eq
    7a1a:	3004      	addeq	r0, #4
    7a1c:	461a      	moveq	r2, r3
    7a1e:	ba12      	rev	r2, r2
    7a20:	fab2 f282 	clz	r2, r2
    7a24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    7a28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    7a2c:	4770      	bx	lr
    7a2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    7a32:	f004 0503 	and.w	r5, r4, #3
    7a36:	f1c4 0000 	rsb	r0, r4, #0
    7a3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    7a3e:	f014 0f04 	tst.w	r4, #4
    7a42:	f891 f040 	pld	[r1, #64]	; 0x40
    7a46:	fa0c f505 	lsl.w	r5, ip, r5
    7a4a:	ea62 0205 	orn	r2, r2, r5
    7a4e:	bf1c      	itt	ne
    7a50:	ea63 0305 	ornne	r3, r3, r5
    7a54:	4662      	movne	r2, ip
    7a56:	f04f 0400 	mov.w	r4, #0
    7a5a:	e7a9      	b.n	79b0 <strlen+0x30>

00007a5c <register_fini>:
    7a5c:	4b02      	ldr	r3, [pc, #8]	; (7a68 <register_fini+0xc>)
    7a5e:	b113      	cbz	r3, 7a66 <register_fini+0xa>
    7a60:	4802      	ldr	r0, [pc, #8]	; (7a6c <register_fini+0x10>)
    7a62:	f000 b805 	b.w	7a70 <atexit>
    7a66:	4770      	bx	lr
    7a68:	00000000 	.word	0x00000000
    7a6c:	0000a31d 	.word	0x0000a31d

00007a70 <atexit>:
    7a70:	2300      	movs	r3, #0
    7a72:	4601      	mov	r1, r0
    7a74:	461a      	mov	r2, r3
    7a76:	4618      	mov	r0, r3
    7a78:	f002 bcf0 	b.w	a45c <__register_exitproc>

00007a7c <_malloc_trim_r>:
    7a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a7e:	4f24      	ldr	r7, [pc, #144]	; (7b10 <_malloc_trim_r+0x94>)
    7a80:	460c      	mov	r4, r1
    7a82:	4606      	mov	r6, r0
    7a84:	f7ff fa56 	bl	6f34 <__malloc_lock>
    7a88:	68bb      	ldr	r3, [r7, #8]
    7a8a:	685d      	ldr	r5, [r3, #4]
    7a8c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    7a90:	310f      	adds	r1, #15
    7a92:	f025 0503 	bic.w	r5, r5, #3
    7a96:	194b      	adds	r3, r1, r5
    7a98:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    7a9c:	f023 030f 	bic.w	r3, r3, #15
    7aa0:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    7aa4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    7aa8:	db07      	blt.n	7aba <_malloc_trim_r+0x3e>
    7aaa:	2100      	movs	r1, #0
    7aac:	4630      	mov	r0, r6
    7aae:	f7ff ff0d 	bl	78cc <_sbrk_r>
    7ab2:	68bb      	ldr	r3, [r7, #8]
    7ab4:	442b      	add	r3, r5
    7ab6:	4298      	cmp	r0, r3
    7ab8:	d004      	beq.n	7ac4 <_malloc_trim_r+0x48>
    7aba:	4630      	mov	r0, r6
    7abc:	f7ff fa40 	bl	6f40 <__malloc_unlock>
    7ac0:	2000      	movs	r0, #0
    7ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ac4:	4261      	negs	r1, r4
    7ac6:	4630      	mov	r0, r6
    7ac8:	f7ff ff00 	bl	78cc <_sbrk_r>
    7acc:	3001      	adds	r0, #1
    7ace:	d00d      	beq.n	7aec <_malloc_trim_r+0x70>
    7ad0:	4a10      	ldr	r2, [pc, #64]	; (7b14 <_malloc_trim_r+0x98>)
    7ad2:	68bb      	ldr	r3, [r7, #8]
    7ad4:	1b2d      	subs	r5, r5, r4
    7ad6:	f045 0501 	orr.w	r5, r5, #1
    7ada:	605d      	str	r5, [r3, #4]
    7adc:	6813      	ldr	r3, [r2, #0]
    7ade:	4630      	mov	r0, r6
    7ae0:	1b1b      	subs	r3, r3, r4
    7ae2:	6013      	str	r3, [r2, #0]
    7ae4:	f7ff fa2c 	bl	6f40 <__malloc_unlock>
    7ae8:	2001      	movs	r0, #1
    7aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7aec:	2100      	movs	r1, #0
    7aee:	4630      	mov	r0, r6
    7af0:	f7ff feec 	bl	78cc <_sbrk_r>
    7af4:	68ba      	ldr	r2, [r7, #8]
    7af6:	1a83      	subs	r3, r0, r2
    7af8:	2b0f      	cmp	r3, #15
    7afa:	ddde      	ble.n	7aba <_malloc_trim_r+0x3e>
    7afc:	f043 0301 	orr.w	r3, r3, #1
    7b00:	6053      	str	r3, [r2, #4]
    7b02:	4b05      	ldr	r3, [pc, #20]	; (7b18 <_malloc_trim_r+0x9c>)
    7b04:	4903      	ldr	r1, [pc, #12]	; (7b14 <_malloc_trim_r+0x98>)
    7b06:	681b      	ldr	r3, [r3, #0]
    7b08:	1ac0      	subs	r0, r0, r3
    7b0a:	6008      	str	r0, [r1, #0]
    7b0c:	e7d5      	b.n	7aba <_malloc_trim_r+0x3e>
    7b0e:	bf00      	nop
    7b10:	1fff082c 	.word	0x1fff082c
    7b14:	1fff63cc 	.word	0x1fff63cc
    7b18:	1fff0c34 	.word	0x1fff0c34

00007b1c <_free_r>:
    7b1c:	2900      	cmp	r1, #0
    7b1e:	d061      	beq.n	7be4 <_free_r+0xc8>
    7b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b22:	460c      	mov	r4, r1
    7b24:	4606      	mov	r6, r0
    7b26:	f7ff fa05 	bl	6f34 <__malloc_lock>
    7b2a:	f854 2c04 	ldr.w	r2, [r4, #-4]
    7b2e:	4f7b      	ldr	r7, [pc, #492]	; (7d1c <_free_r+0x200>)
    7b30:	f1a4 0508 	sub.w	r5, r4, #8
    7b34:	f022 0101 	bic.w	r1, r2, #1
    7b38:	eb05 0c01 	add.w	ip, r5, r1
    7b3c:	68b8      	ldr	r0, [r7, #8]
    7b3e:	f8dc 3004 	ldr.w	r3, [ip, #4]
    7b42:	4560      	cmp	r0, ip
    7b44:	f023 0303 	bic.w	r3, r3, #3
    7b48:	f000 808b 	beq.w	7c62 <_free_r+0x146>
    7b4c:	07d2      	lsls	r2, r2, #31
    7b4e:	f8cc 3004 	str.w	r3, [ip, #4]
    7b52:	d432      	bmi.n	7bba <_free_r+0x9e>
    7b54:	f854 2c08 	ldr.w	r2, [r4, #-8]
    7b58:	1aad      	subs	r5, r5, r2
    7b5a:	4411      	add	r1, r2
    7b5c:	68aa      	ldr	r2, [r5, #8]
    7b5e:	f107 0008 	add.w	r0, r7, #8
    7b62:	4282      	cmp	r2, r0
    7b64:	d06a      	beq.n	7c3c <_free_r+0x120>
    7b66:	eb0c 0403 	add.w	r4, ip, r3
    7b6a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    7b6e:	68ec      	ldr	r4, [r5, #12]
    7b70:	60d4      	str	r4, [r2, #12]
    7b72:	f01e 0f01 	tst.w	lr, #1
    7b76:	60a2      	str	r2, [r4, #8]
    7b78:	f000 8097 	beq.w	7caa <_free_r+0x18e>
    7b7c:	f041 0301 	orr.w	r3, r1, #1
    7b80:	606b      	str	r3, [r5, #4]
    7b82:	f8cc 1000 	str.w	r1, [ip]
    7b86:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    7b8a:	d235      	bcs.n	7bf8 <_free_r+0xdc>
    7b8c:	6878      	ldr	r0, [r7, #4]
    7b8e:	08cb      	lsrs	r3, r1, #3
    7b90:	2201      	movs	r2, #1
    7b92:	0949      	lsrs	r1, r1, #5
    7b94:	3301      	adds	r3, #1
    7b96:	408a      	lsls	r2, r1
    7b98:	4302      	orrs	r2, r0
    7b9a:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    7b9e:	607a      	str	r2, [r7, #4]
    7ba0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    7ba4:	3a08      	subs	r2, #8
    7ba6:	e9c5 1202 	strd	r1, r2, [r5, #8]
    7baa:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    7bae:	60cd      	str	r5, [r1, #12]
    7bb0:	4630      	mov	r0, r6
    7bb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7bb6:	f7ff b9c3 	b.w	6f40 <__malloc_unlock>
    7bba:	eb0c 0203 	add.w	r2, ip, r3
    7bbe:	6852      	ldr	r2, [r2, #4]
    7bc0:	07d0      	lsls	r0, r2, #31
    7bc2:	d410      	bmi.n	7be6 <_free_r+0xca>
    7bc4:	4419      	add	r1, r3
    7bc6:	f107 0008 	add.w	r0, r7, #8
    7bca:	f8dc 3008 	ldr.w	r3, [ip, #8]
    7bce:	4283      	cmp	r3, r0
    7bd0:	d073      	beq.n	7cba <_free_r+0x19e>
    7bd2:	f8dc 200c 	ldr.w	r2, [ip, #12]
    7bd6:	60da      	str	r2, [r3, #12]
    7bd8:	6093      	str	r3, [r2, #8]
    7bda:	f041 0301 	orr.w	r3, r1, #1
    7bde:	606b      	str	r3, [r5, #4]
    7be0:	5069      	str	r1, [r5, r1]
    7be2:	e7d0      	b.n	7b86 <_free_r+0x6a>
    7be4:	4770      	bx	lr
    7be6:	f041 0301 	orr.w	r3, r1, #1
    7bea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    7bee:	f844 3c04 	str.w	r3, [r4, #-4]
    7bf2:	f8cc 1000 	str.w	r1, [ip]
    7bf6:	d3c9      	bcc.n	7b8c <_free_r+0x70>
    7bf8:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    7bfc:	ea4f 2351 	mov.w	r3, r1, lsr #9
    7c00:	d248      	bcs.n	7c94 <_free_r+0x178>
    7c02:	098b      	lsrs	r3, r1, #6
    7c04:	f103 0039 	add.w	r0, r3, #57	; 0x39
    7c08:	f103 0238 	add.w	r2, r3, #56	; 0x38
    7c0c:	00c3      	lsls	r3, r0, #3
    7c0e:	18f8      	adds	r0, r7, r3
    7c10:	58fb      	ldr	r3, [r7, r3]
    7c12:	3808      	subs	r0, #8
    7c14:	4298      	cmp	r0, r3
    7c16:	d059      	beq.n	7ccc <_free_r+0x1b0>
    7c18:	685a      	ldr	r2, [r3, #4]
    7c1a:	f022 0203 	bic.w	r2, r2, #3
    7c1e:	428a      	cmp	r2, r1
    7c20:	d902      	bls.n	7c28 <_free_r+0x10c>
    7c22:	689b      	ldr	r3, [r3, #8]
    7c24:	4298      	cmp	r0, r3
    7c26:	d1f7      	bne.n	7c18 <_free_r+0xfc>
    7c28:	68d8      	ldr	r0, [r3, #12]
    7c2a:	e9c5 3002 	strd	r3, r0, [r5, #8]
    7c2e:	6085      	str	r5, [r0, #8]
    7c30:	60dd      	str	r5, [r3, #12]
    7c32:	4630      	mov	r0, r6
    7c34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7c38:	f7ff b982 	b.w	6f40 <__malloc_unlock>
    7c3c:	eb0c 0203 	add.w	r2, ip, r3
    7c40:	6852      	ldr	r2, [r2, #4]
    7c42:	07d2      	lsls	r2, r2, #31
    7c44:	d463      	bmi.n	7d0e <_free_r+0x1f2>
    7c46:	440b      	add	r3, r1
    7c48:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    7c4c:	60ca      	str	r2, [r1, #12]
    7c4e:	6091      	str	r1, [r2, #8]
    7c50:	f043 0201 	orr.w	r2, r3, #1
    7c54:	606a      	str	r2, [r5, #4]
    7c56:	4630      	mov	r0, r6
    7c58:	50eb      	str	r3, [r5, r3]
    7c5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7c5e:	f7ff b96f 	b.w	6f40 <__malloc_unlock>
    7c62:	440b      	add	r3, r1
    7c64:	07d1      	lsls	r1, r2, #31
    7c66:	d407      	bmi.n	7c78 <_free_r+0x15c>
    7c68:	f854 2c08 	ldr.w	r2, [r4, #-8]
    7c6c:	1aad      	subs	r5, r5, r2
    7c6e:	4413      	add	r3, r2
    7c70:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    7c74:	60ca      	str	r2, [r1, #12]
    7c76:	6091      	str	r1, [r2, #8]
    7c78:	f043 0201 	orr.w	r2, r3, #1
    7c7c:	606a      	str	r2, [r5, #4]
    7c7e:	4a28      	ldr	r2, [pc, #160]	; (7d20 <_free_r+0x204>)
    7c80:	60bd      	str	r5, [r7, #8]
    7c82:	6812      	ldr	r2, [r2, #0]
    7c84:	429a      	cmp	r2, r3
    7c86:	d893      	bhi.n	7bb0 <_free_r+0x94>
    7c88:	4b26      	ldr	r3, [pc, #152]	; (7d24 <_free_r+0x208>)
    7c8a:	4630      	mov	r0, r6
    7c8c:	6819      	ldr	r1, [r3, #0]
    7c8e:	f7ff fef5 	bl	7a7c <_malloc_trim_r>
    7c92:	e78d      	b.n	7bb0 <_free_r+0x94>
    7c94:	2b14      	cmp	r3, #20
    7c96:	d90a      	bls.n	7cae <_free_r+0x192>
    7c98:	2b54      	cmp	r3, #84	; 0x54
    7c9a:	d81f      	bhi.n	7cdc <_free_r+0x1c0>
    7c9c:	0b0b      	lsrs	r3, r1, #12
    7c9e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    7ca2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    7ca6:	00c3      	lsls	r3, r0, #3
    7ca8:	e7b1      	b.n	7c0e <_free_r+0xf2>
    7caa:	4419      	add	r1, r3
    7cac:	e78d      	b.n	7bca <_free_r+0xae>
    7cae:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    7cb2:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    7cb6:	00c3      	lsls	r3, r0, #3
    7cb8:	e7a9      	b.n	7c0e <_free_r+0xf2>
    7cba:	f041 0301 	orr.w	r3, r1, #1
    7cbe:	e9c7 5504 	strd	r5, r5, [r7, #16]
    7cc2:	e9c5 0002 	strd	r0, r0, [r5, #8]
    7cc6:	606b      	str	r3, [r5, #4]
    7cc8:	5069      	str	r1, [r5, r1]
    7cca:	e771      	b.n	7bb0 <_free_r+0x94>
    7ccc:	6879      	ldr	r1, [r7, #4]
    7cce:	1092      	asrs	r2, r2, #2
    7cd0:	2401      	movs	r4, #1
    7cd2:	fa04 f202 	lsl.w	r2, r4, r2
    7cd6:	430a      	orrs	r2, r1
    7cd8:	607a      	str	r2, [r7, #4]
    7cda:	e7a6      	b.n	7c2a <_free_r+0x10e>
    7cdc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    7ce0:	d806      	bhi.n	7cf0 <_free_r+0x1d4>
    7ce2:	0bcb      	lsrs	r3, r1, #15
    7ce4:	f103 0078 	add.w	r0, r3, #120	; 0x78
    7ce8:	f103 0277 	add.w	r2, r3, #119	; 0x77
    7cec:	00c3      	lsls	r3, r0, #3
    7cee:	e78e      	b.n	7c0e <_free_r+0xf2>
    7cf0:	f240 5254 	movw	r2, #1364	; 0x554
    7cf4:	4293      	cmp	r3, r2
    7cf6:	d806      	bhi.n	7d06 <_free_r+0x1ea>
    7cf8:	0c8b      	lsrs	r3, r1, #18
    7cfa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    7cfe:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    7d02:	00c3      	lsls	r3, r0, #3
    7d04:	e783      	b.n	7c0e <_free_r+0xf2>
    7d06:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    7d0a:	227e      	movs	r2, #126	; 0x7e
    7d0c:	e77f      	b.n	7c0e <_free_r+0xf2>
    7d0e:	f041 0301 	orr.w	r3, r1, #1
    7d12:	606b      	str	r3, [r5, #4]
    7d14:	f8cc 1000 	str.w	r1, [ip]
    7d18:	e74a      	b.n	7bb0 <_free_r+0x94>
    7d1a:	bf00      	nop
    7d1c:	1fff082c 	.word	0x1fff082c
    7d20:	1fff0c38 	.word	0x1fff0c38
    7d24:	1fff63fc 	.word	0x1fff63fc

00007d28 <__ascii_mbtowc>:
    7d28:	b082      	sub	sp, #8
    7d2a:	b149      	cbz	r1, 7d40 <__ascii_mbtowc+0x18>
    7d2c:	b15a      	cbz	r2, 7d46 <__ascii_mbtowc+0x1e>
    7d2e:	b16b      	cbz	r3, 7d4c <__ascii_mbtowc+0x24>
    7d30:	7813      	ldrb	r3, [r2, #0]
    7d32:	600b      	str	r3, [r1, #0]
    7d34:	7812      	ldrb	r2, [r2, #0]
    7d36:	1e10      	subs	r0, r2, #0
    7d38:	bf18      	it	ne
    7d3a:	2001      	movne	r0, #1
    7d3c:	b002      	add	sp, #8
    7d3e:	4770      	bx	lr
    7d40:	a901      	add	r1, sp, #4
    7d42:	2a00      	cmp	r2, #0
    7d44:	d1f3      	bne.n	7d2e <__ascii_mbtowc+0x6>
    7d46:	4610      	mov	r0, r2
    7d48:	b002      	add	sp, #8
    7d4a:	4770      	bx	lr
    7d4c:	f06f 0001 	mvn.w	r0, #1
    7d50:	e7f4      	b.n	7d3c <__ascii_mbtowc+0x14>
    7d52:	bf00      	nop

00007d54 <_Balloc>:
    7d54:	6c43      	ldr	r3, [r0, #68]	; 0x44
    7d56:	b570      	push	{r4, r5, r6, lr}
    7d58:	4605      	mov	r5, r0
    7d5a:	460c      	mov	r4, r1
    7d5c:	b14b      	cbz	r3, 7d72 <_Balloc+0x1e>
    7d5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    7d62:	b180      	cbz	r0, 7d86 <_Balloc+0x32>
    7d64:	6802      	ldr	r2, [r0, #0]
    7d66:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    7d6a:	2300      	movs	r3, #0
    7d6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    7d70:	bd70      	pop	{r4, r5, r6, pc}
    7d72:	2221      	movs	r2, #33	; 0x21
    7d74:	2104      	movs	r1, #4
    7d76:	f002 fbd5 	bl	a524 <_calloc_r>
    7d7a:	4603      	mov	r3, r0
    7d7c:	6468      	str	r0, [r5, #68]	; 0x44
    7d7e:	2800      	cmp	r0, #0
    7d80:	d1ed      	bne.n	7d5e <_Balloc+0xa>
    7d82:	2000      	movs	r0, #0
    7d84:	bd70      	pop	{r4, r5, r6, pc}
    7d86:	2101      	movs	r1, #1
    7d88:	fa01 f604 	lsl.w	r6, r1, r4
    7d8c:	1d72      	adds	r2, r6, #5
    7d8e:	0092      	lsls	r2, r2, #2
    7d90:	4628      	mov	r0, r5
    7d92:	f002 fbc7 	bl	a524 <_calloc_r>
    7d96:	2800      	cmp	r0, #0
    7d98:	d0f3      	beq.n	7d82 <_Balloc+0x2e>
    7d9a:	e9c0 4601 	strd	r4, r6, [r0, #4]
    7d9e:	e7e4      	b.n	7d6a <_Balloc+0x16>

00007da0 <_Bfree>:
    7da0:	b131      	cbz	r1, 7db0 <_Bfree+0x10>
    7da2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    7da4:	684a      	ldr	r2, [r1, #4]
    7da6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    7daa:	6008      	str	r0, [r1, #0]
    7dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    7db0:	4770      	bx	lr
    7db2:	bf00      	nop

00007db4 <__multadd>:
    7db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7db8:	690e      	ldr	r6, [r1, #16]
    7dba:	4680      	mov	r8, r0
    7dbc:	460f      	mov	r7, r1
    7dbe:	461d      	mov	r5, r3
    7dc0:	f101 0e14 	add.w	lr, r1, #20
    7dc4:	2000      	movs	r0, #0
    7dc6:	f8de 1000 	ldr.w	r1, [lr]
    7dca:	b28c      	uxth	r4, r1
    7dcc:	fb02 5304 	mla	r3, r2, r4, r5
    7dd0:	0c09      	lsrs	r1, r1, #16
    7dd2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    7dd6:	fb02 cc01 	mla	ip, r2, r1, ip
    7dda:	3001      	adds	r0, #1
    7ddc:	b29c      	uxth	r4, r3
    7dde:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    7de2:	4286      	cmp	r6, r0
    7de4:	f84e 4b04 	str.w	r4, [lr], #4
    7de8:	ea4f 451c 	mov.w	r5, ip, lsr #16
    7dec:	dceb      	bgt.n	7dc6 <__multadd+0x12>
    7dee:	b13d      	cbz	r5, 7e00 <__multadd+0x4c>
    7df0:	68bb      	ldr	r3, [r7, #8]
    7df2:	42b3      	cmp	r3, r6
    7df4:	dd07      	ble.n	7e06 <__multadd+0x52>
    7df6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    7dfa:	3601      	adds	r6, #1
    7dfc:	615d      	str	r5, [r3, #20]
    7dfe:	613e      	str	r6, [r7, #16]
    7e00:	4638      	mov	r0, r7
    7e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e06:	6879      	ldr	r1, [r7, #4]
    7e08:	4640      	mov	r0, r8
    7e0a:	3101      	adds	r1, #1
    7e0c:	f7ff ffa2 	bl	7d54 <_Balloc>
    7e10:	4604      	mov	r4, r0
    7e12:	b1b0      	cbz	r0, 7e42 <__multadd+0x8e>
    7e14:	693a      	ldr	r2, [r7, #16]
    7e16:	3202      	adds	r2, #2
    7e18:	f107 010c 	add.w	r1, r7, #12
    7e1c:	0092      	lsls	r2, r2, #2
    7e1e:	300c      	adds	r0, #12
    7e20:	f7fc fee0 	bl	4be4 <memcpy>
    7e24:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    7e28:	687a      	ldr	r2, [r7, #4]
    7e2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7e2e:	6039      	str	r1, [r7, #0]
    7e30:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    7e34:	4627      	mov	r7, r4
    7e36:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    7e3a:	3601      	adds	r6, #1
    7e3c:	615d      	str	r5, [r3, #20]
    7e3e:	613e      	str	r6, [r7, #16]
    7e40:	e7de      	b.n	7e00 <__multadd+0x4c>
    7e42:	4b03      	ldr	r3, [pc, #12]	; (7e50 <__multadd+0x9c>)
    7e44:	4803      	ldr	r0, [pc, #12]	; (7e54 <__multadd+0xa0>)
    7e46:	4622      	mov	r2, r4
    7e48:	21ba      	movs	r1, #186	; 0xba
    7e4a:	f002 fb4b 	bl	a4e4 <__assert_func>
    7e4e:	bf00      	nop
    7e50:	0000d890 	.word	0x0000d890
    7e54:	0000d8a4 	.word	0x0000d8a4

00007e58 <__hi0bits>:
    7e58:	0c03      	lsrs	r3, r0, #16
    7e5a:	041b      	lsls	r3, r3, #16
    7e5c:	b9d3      	cbnz	r3, 7e94 <__hi0bits+0x3c>
    7e5e:	0400      	lsls	r0, r0, #16
    7e60:	2310      	movs	r3, #16
    7e62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    7e66:	bf04      	itt	eq
    7e68:	0200      	lsleq	r0, r0, #8
    7e6a:	3308      	addeq	r3, #8
    7e6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    7e70:	bf04      	itt	eq
    7e72:	0100      	lsleq	r0, r0, #4
    7e74:	3304      	addeq	r3, #4
    7e76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    7e7a:	bf04      	itt	eq
    7e7c:	0080      	lsleq	r0, r0, #2
    7e7e:	3302      	addeq	r3, #2
    7e80:	2800      	cmp	r0, #0
    7e82:	db05      	blt.n	7e90 <__hi0bits+0x38>
    7e84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    7e88:	f103 0301 	add.w	r3, r3, #1
    7e8c:	bf08      	it	eq
    7e8e:	2320      	moveq	r3, #32
    7e90:	4618      	mov	r0, r3
    7e92:	4770      	bx	lr
    7e94:	2300      	movs	r3, #0
    7e96:	e7e4      	b.n	7e62 <__hi0bits+0xa>

00007e98 <__lo0bits>:
    7e98:	6803      	ldr	r3, [r0, #0]
    7e9a:	f013 0207 	ands.w	r2, r3, #7
    7e9e:	d008      	beq.n	7eb2 <__lo0bits+0x1a>
    7ea0:	07d9      	lsls	r1, r3, #31
    7ea2:	d41f      	bmi.n	7ee4 <__lo0bits+0x4c>
    7ea4:	079a      	lsls	r2, r3, #30
    7ea6:	d522      	bpl.n	7eee <__lo0bits+0x56>
    7ea8:	085b      	lsrs	r3, r3, #1
    7eaa:	6003      	str	r3, [r0, #0]
    7eac:	2201      	movs	r2, #1
    7eae:	4610      	mov	r0, r2
    7eb0:	4770      	bx	lr
    7eb2:	b299      	uxth	r1, r3
    7eb4:	b909      	cbnz	r1, 7eba <__lo0bits+0x22>
    7eb6:	0c1b      	lsrs	r3, r3, #16
    7eb8:	2210      	movs	r2, #16
    7eba:	b2d9      	uxtb	r1, r3
    7ebc:	b909      	cbnz	r1, 7ec2 <__lo0bits+0x2a>
    7ebe:	3208      	adds	r2, #8
    7ec0:	0a1b      	lsrs	r3, r3, #8
    7ec2:	0719      	lsls	r1, r3, #28
    7ec4:	bf04      	itt	eq
    7ec6:	091b      	lsreq	r3, r3, #4
    7ec8:	3204      	addeq	r2, #4
    7eca:	0799      	lsls	r1, r3, #30
    7ecc:	bf04      	itt	eq
    7ece:	089b      	lsreq	r3, r3, #2
    7ed0:	3202      	addeq	r2, #2
    7ed2:	07d9      	lsls	r1, r3, #31
    7ed4:	d403      	bmi.n	7ede <__lo0bits+0x46>
    7ed6:	085b      	lsrs	r3, r3, #1
    7ed8:	f102 0201 	add.w	r2, r2, #1
    7edc:	d005      	beq.n	7eea <__lo0bits+0x52>
    7ede:	6003      	str	r3, [r0, #0]
    7ee0:	4610      	mov	r0, r2
    7ee2:	4770      	bx	lr
    7ee4:	2200      	movs	r2, #0
    7ee6:	4610      	mov	r0, r2
    7ee8:	4770      	bx	lr
    7eea:	2220      	movs	r2, #32
    7eec:	e7df      	b.n	7eae <__lo0bits+0x16>
    7eee:	089b      	lsrs	r3, r3, #2
    7ef0:	2202      	movs	r2, #2
    7ef2:	6003      	str	r3, [r0, #0]
    7ef4:	4610      	mov	r0, r2
    7ef6:	4770      	bx	lr

00007ef8 <__i2b>:
    7ef8:	b538      	push	{r3, r4, r5, lr}
    7efa:	6c43      	ldr	r3, [r0, #68]	; 0x44
    7efc:	4604      	mov	r4, r0
    7efe:	460d      	mov	r5, r1
    7f00:	b14b      	cbz	r3, 7f16 <__i2b+0x1e>
    7f02:	6858      	ldr	r0, [r3, #4]
    7f04:	b1b0      	cbz	r0, 7f34 <__i2b+0x3c>
    7f06:	6802      	ldr	r2, [r0, #0]
    7f08:	605a      	str	r2, [r3, #4]
    7f0a:	2200      	movs	r2, #0
    7f0c:	2301      	movs	r3, #1
    7f0e:	e9c0 3504 	strd	r3, r5, [r0, #16]
    7f12:	60c2      	str	r2, [r0, #12]
    7f14:	bd38      	pop	{r3, r4, r5, pc}
    7f16:	2221      	movs	r2, #33	; 0x21
    7f18:	2104      	movs	r1, #4
    7f1a:	f002 fb03 	bl	a524 <_calloc_r>
    7f1e:	4603      	mov	r3, r0
    7f20:	6460      	str	r0, [r4, #68]	; 0x44
    7f22:	2800      	cmp	r0, #0
    7f24:	d1ed      	bne.n	7f02 <__i2b+0xa>
    7f26:	4b09      	ldr	r3, [pc, #36]	; (7f4c <__i2b+0x54>)
    7f28:	4809      	ldr	r0, [pc, #36]	; (7f50 <__i2b+0x58>)
    7f2a:	2200      	movs	r2, #0
    7f2c:	f240 1145 	movw	r1, #325	; 0x145
    7f30:	f002 fad8 	bl	a4e4 <__assert_func>
    7f34:	221c      	movs	r2, #28
    7f36:	2101      	movs	r1, #1
    7f38:	4620      	mov	r0, r4
    7f3a:	f002 faf3 	bl	a524 <_calloc_r>
    7f3e:	2800      	cmp	r0, #0
    7f40:	d0f1      	beq.n	7f26 <__i2b+0x2e>
    7f42:	2201      	movs	r2, #1
    7f44:	2302      	movs	r3, #2
    7f46:	e9c0 2301 	strd	r2, r3, [r0, #4]
    7f4a:	e7de      	b.n	7f0a <__i2b+0x12>
    7f4c:	0000d890 	.word	0x0000d890
    7f50:	0000d8a4 	.word	0x0000d8a4

00007f54 <__multiply>:
    7f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f58:	690e      	ldr	r6, [r1, #16]
    7f5a:	6915      	ldr	r5, [r2, #16]
    7f5c:	42ae      	cmp	r6, r5
    7f5e:	b085      	sub	sp, #20
    7f60:	4688      	mov	r8, r1
    7f62:	4614      	mov	r4, r2
    7f64:	db05      	blt.n	7f72 <__multiply+0x1e>
    7f66:	462a      	mov	r2, r5
    7f68:	4623      	mov	r3, r4
    7f6a:	4635      	mov	r5, r6
    7f6c:	460c      	mov	r4, r1
    7f6e:	4616      	mov	r6, r2
    7f70:	4698      	mov	r8, r3
    7f72:	68a3      	ldr	r3, [r4, #8]
    7f74:	6861      	ldr	r1, [r4, #4]
    7f76:	19af      	adds	r7, r5, r6
    7f78:	42bb      	cmp	r3, r7
    7f7a:	bfb8      	it	lt
    7f7c:	3101      	addlt	r1, #1
    7f7e:	f7ff fee9 	bl	7d54 <_Balloc>
    7f82:	9001      	str	r0, [sp, #4]
    7f84:	2800      	cmp	r0, #0
    7f86:	f000 8087 	beq.w	8098 <__multiply+0x144>
    7f8a:	9b01      	ldr	r3, [sp, #4]
    7f8c:	f103 0914 	add.w	r9, r3, #20
    7f90:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    7f94:	45d1      	cmp	r9, sl
    7f96:	d205      	bcs.n	7fa4 <__multiply+0x50>
    7f98:	464b      	mov	r3, r9
    7f9a:	2200      	movs	r2, #0
    7f9c:	f843 2b04 	str.w	r2, [r3], #4
    7fa0:	459a      	cmp	sl, r3
    7fa2:	d8fb      	bhi.n	7f9c <__multiply+0x48>
    7fa4:	f108 0814 	add.w	r8, r8, #20
    7fa8:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    7fac:	f104 0314 	add.w	r3, r4, #20
    7fb0:	45d8      	cmp	r8, fp
    7fb2:	461a      	mov	r2, r3
    7fb4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7fb8:	d25f      	bcs.n	807a <__multiply+0x126>
    7fba:	1b2b      	subs	r3, r5, r4
    7fbc:	3b15      	subs	r3, #21
    7fbe:	f023 0303 	bic.w	r3, r3, #3
    7fc2:	3304      	adds	r3, #4
    7fc4:	3415      	adds	r4, #21
    7fc6:	42a5      	cmp	r5, r4
    7fc8:	bf38      	it	cc
    7fca:	2304      	movcc	r3, #4
    7fcc:	e9cd a702 	strd	sl, r7, [sp, #8]
    7fd0:	46ac      	mov	ip, r5
    7fd2:	461f      	mov	r7, r3
    7fd4:	4692      	mov	sl, r2
    7fd6:	e005      	b.n	7fe4 <__multiply+0x90>
    7fd8:	0c09      	lsrs	r1, r1, #16
    7fda:	d129      	bne.n	8030 <__multiply+0xdc>
    7fdc:	45c3      	cmp	fp, r8
    7fde:	f109 0904 	add.w	r9, r9, #4
    7fe2:	d948      	bls.n	8076 <__multiply+0x122>
    7fe4:	f858 1b04 	ldr.w	r1, [r8], #4
    7fe8:	b28d      	uxth	r5, r1
    7fea:	2d00      	cmp	r5, #0
    7fec:	d0f4      	beq.n	7fd8 <__multiply+0x84>
    7fee:	4656      	mov	r6, sl
    7ff0:	464c      	mov	r4, r9
    7ff2:	2300      	movs	r3, #0
    7ff4:	f856 1b04 	ldr.w	r1, [r6], #4
    7ff8:	6822      	ldr	r2, [r4, #0]
    7ffa:	fa1f fe81 	uxth.w	lr, r1
    7ffe:	b290      	uxth	r0, r2
    8000:	0c09      	lsrs	r1, r1, #16
    8002:	fb05 000e 	mla	r0, r5, lr, r0
    8006:	0c12      	lsrs	r2, r2, #16
    8008:	4403      	add	r3, r0
    800a:	fb05 2201 	mla	r2, r5, r1, r2
    800e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    8012:	b29b      	uxth	r3, r3
    8014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    8018:	45b4      	cmp	ip, r6
    801a:	f844 3b04 	str.w	r3, [r4], #4
    801e:	ea4f 4312 	mov.w	r3, r2, lsr #16
    8022:	d8e7      	bhi.n	7ff4 <__multiply+0xa0>
    8024:	f849 3007 	str.w	r3, [r9, r7]
    8028:	f858 1c04 	ldr.w	r1, [r8, #-4]
    802c:	0c09      	lsrs	r1, r1, #16
    802e:	d0d5      	beq.n	7fdc <__multiply+0x88>
    8030:	f8d9 3000 	ldr.w	r3, [r9]
    8034:	4650      	mov	r0, sl
    8036:	461a      	mov	r2, r3
    8038:	464c      	mov	r4, r9
    803a:	2600      	movs	r6, #0
    803c:	8805      	ldrh	r5, [r0, #0]
    803e:	0c12      	lsrs	r2, r2, #16
    8040:	fb01 2205 	mla	r2, r1, r5, r2
    8044:	4416      	add	r6, r2
    8046:	b29b      	uxth	r3, r3
    8048:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    804c:	f844 3b04 	str.w	r3, [r4], #4
    8050:	f850 5b04 	ldr.w	r5, [r0], #4
    8054:	6822      	ldr	r2, [r4, #0]
    8056:	0c2d      	lsrs	r5, r5, #16
    8058:	b293      	uxth	r3, r2
    805a:	fb01 3305 	mla	r3, r1, r5, r3
    805e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    8062:	4584      	cmp	ip, r0
    8064:	ea4f 4613 	mov.w	r6, r3, lsr #16
    8068:	d8e8      	bhi.n	803c <__multiply+0xe8>
    806a:	45c3      	cmp	fp, r8
    806c:	f849 3007 	str.w	r3, [r9, r7]
    8070:	f109 0904 	add.w	r9, r9, #4
    8074:	d8b6      	bhi.n	7fe4 <__multiply+0x90>
    8076:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    807a:	2f00      	cmp	r7, #0
    807c:	dc02      	bgt.n	8084 <__multiply+0x130>
    807e:	e005      	b.n	808c <__multiply+0x138>
    8080:	3f01      	subs	r7, #1
    8082:	d003      	beq.n	808c <__multiply+0x138>
    8084:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    8088:	2b00      	cmp	r3, #0
    808a:	d0f9      	beq.n	8080 <__multiply+0x12c>
    808c:	9b01      	ldr	r3, [sp, #4]
    808e:	4618      	mov	r0, r3
    8090:	611f      	str	r7, [r3, #16]
    8092:	b005      	add	sp, #20
    8094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8098:	4b03      	ldr	r3, [pc, #12]	; (80a8 <__multiply+0x154>)
    809a:	4804      	ldr	r0, [pc, #16]	; (80ac <__multiply+0x158>)
    809c:	9a01      	ldr	r2, [sp, #4]
    809e:	f44f 71b1 	mov.w	r1, #354	; 0x162
    80a2:	f002 fa1f 	bl	a4e4 <__assert_func>
    80a6:	bf00      	nop
    80a8:	0000d890 	.word	0x0000d890
    80ac:	0000d8a4 	.word	0x0000d8a4

000080b0 <__pow5mult>:
    80b0:	f012 0303 	ands.w	r3, r2, #3
    80b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80b8:	4614      	mov	r4, r2
    80ba:	4606      	mov	r6, r0
    80bc:	d132      	bne.n	8124 <__pow5mult+0x74>
    80be:	460d      	mov	r5, r1
    80c0:	10a4      	asrs	r4, r4, #2
    80c2:	d020      	beq.n	8106 <__pow5mult+0x56>
    80c4:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    80c8:	f1b8 0f00 	cmp.w	r8, #0
    80cc:	d033      	beq.n	8136 <__pow5mult+0x86>
    80ce:	07e3      	lsls	r3, r4, #31
    80d0:	f04f 0700 	mov.w	r7, #0
    80d4:	d407      	bmi.n	80e6 <__pow5mult+0x36>
    80d6:	1064      	asrs	r4, r4, #1
    80d8:	d015      	beq.n	8106 <__pow5mult+0x56>
    80da:	f8d8 0000 	ldr.w	r0, [r8]
    80de:	b1a8      	cbz	r0, 810c <__pow5mult+0x5c>
    80e0:	4680      	mov	r8, r0
    80e2:	07e3      	lsls	r3, r4, #31
    80e4:	d5f7      	bpl.n	80d6 <__pow5mult+0x26>
    80e6:	4642      	mov	r2, r8
    80e8:	4629      	mov	r1, r5
    80ea:	4630      	mov	r0, r6
    80ec:	f7ff ff32 	bl	7f54 <__multiply>
    80f0:	b1b5      	cbz	r5, 8120 <__pow5mult+0x70>
    80f2:	6869      	ldr	r1, [r5, #4]
    80f4:	6c73      	ldr	r3, [r6, #68]	; 0x44
    80f6:	1064      	asrs	r4, r4, #1
    80f8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    80fc:	602a      	str	r2, [r5, #0]
    80fe:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    8102:	4605      	mov	r5, r0
    8104:	d1e9      	bne.n	80da <__pow5mult+0x2a>
    8106:	4628      	mov	r0, r5
    8108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    810c:	4642      	mov	r2, r8
    810e:	4641      	mov	r1, r8
    8110:	4630      	mov	r0, r6
    8112:	f7ff ff1f 	bl	7f54 <__multiply>
    8116:	f8c8 0000 	str.w	r0, [r8]
    811a:	6007      	str	r7, [r0, #0]
    811c:	4680      	mov	r8, r0
    811e:	e7e0      	b.n	80e2 <__pow5mult+0x32>
    8120:	4605      	mov	r5, r0
    8122:	e7d8      	b.n	80d6 <__pow5mult+0x26>
    8124:	3b01      	subs	r3, #1
    8126:	4a0f      	ldr	r2, [pc, #60]	; (8164 <__pow5mult+0xb4>)
    8128:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    812c:	2300      	movs	r3, #0
    812e:	f7ff fe41 	bl	7db4 <__multadd>
    8132:	4605      	mov	r5, r0
    8134:	e7c4      	b.n	80c0 <__pow5mult+0x10>
    8136:	2101      	movs	r1, #1
    8138:	4630      	mov	r0, r6
    813a:	f7ff fe0b 	bl	7d54 <_Balloc>
    813e:	4680      	mov	r8, r0
    8140:	b140      	cbz	r0, 8154 <__pow5mult+0xa4>
    8142:	2301      	movs	r3, #1
    8144:	f240 2271 	movw	r2, #625	; 0x271
    8148:	e9c0 3204 	strd	r3, r2, [r0, #16]
    814c:	2300      	movs	r3, #0
    814e:	6430      	str	r0, [r6, #64]	; 0x40
    8150:	6003      	str	r3, [r0, #0]
    8152:	e7bc      	b.n	80ce <__pow5mult+0x1e>
    8154:	4b04      	ldr	r3, [pc, #16]	; (8168 <__pow5mult+0xb8>)
    8156:	4805      	ldr	r0, [pc, #20]	; (816c <__pow5mult+0xbc>)
    8158:	4642      	mov	r2, r8
    815a:	f240 1145 	movw	r1, #325	; 0x145
    815e:	f002 f9c1 	bl	a4e4 <__assert_func>
    8162:	bf00      	nop
    8164:	0000d9f0 	.word	0x0000d9f0
    8168:	0000d890 	.word	0x0000d890
    816c:	0000d8a4 	.word	0x0000d8a4

00008170 <__lshift>:
    8170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8174:	460d      	mov	r5, r1
    8176:	4614      	mov	r4, r2
    8178:	692f      	ldr	r7, [r5, #16]
    817a:	68ab      	ldr	r3, [r5, #8]
    817c:	6849      	ldr	r1, [r1, #4]
    817e:	eb07 1762 	add.w	r7, r7, r2, asr #5
    8182:	1c7e      	adds	r6, r7, #1
    8184:	429e      	cmp	r6, r3
    8186:	4680      	mov	r8, r0
    8188:	ea4f 1962 	mov.w	r9, r2, asr #5
    818c:	dd04      	ble.n	8198 <__lshift+0x28>
    818e:	005b      	lsls	r3, r3, #1
    8190:	429e      	cmp	r6, r3
    8192:	f101 0101 	add.w	r1, r1, #1
    8196:	dcfa      	bgt.n	818e <__lshift+0x1e>
    8198:	4640      	mov	r0, r8
    819a:	f7ff fddb 	bl	7d54 <_Balloc>
    819e:	4684      	mov	ip, r0
    81a0:	2800      	cmp	r0, #0
    81a2:	d052      	beq.n	824a <__lshift+0xda>
    81a4:	f1b9 0f00 	cmp.w	r9, #0
    81a8:	f100 0214 	add.w	r2, r0, #20
    81ac:	dd0e      	ble.n	81cc <__lshift+0x5c>
    81ae:	f109 0105 	add.w	r1, r9, #5
    81b2:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    81b6:	4613      	mov	r3, r2
    81b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    81bc:	2000      	movs	r0, #0
    81be:	f843 0b04 	str.w	r0, [r3], #4
    81c2:	428b      	cmp	r3, r1
    81c4:	d1fb      	bne.n	81be <__lshift+0x4e>
    81c6:	f1ae 0314 	sub.w	r3, lr, #20
    81ca:	441a      	add	r2, r3
    81cc:	6929      	ldr	r1, [r5, #16]
    81ce:	f105 0314 	add.w	r3, r5, #20
    81d2:	f014 0e1f 	ands.w	lr, r4, #31
    81d6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    81da:	d02e      	beq.n	823a <__lshift+0xca>
    81dc:	f1ce 0920 	rsb	r9, lr, #32
    81e0:	4610      	mov	r0, r2
    81e2:	f04f 0a00 	mov.w	sl, #0
    81e6:	681c      	ldr	r4, [r3, #0]
    81e8:	fa04 f40e 	lsl.w	r4, r4, lr
    81ec:	ea44 040a 	orr.w	r4, r4, sl
    81f0:	f840 4b04 	str.w	r4, [r0], #4
    81f4:	f853 4b04 	ldr.w	r4, [r3], #4
    81f8:	4299      	cmp	r1, r3
    81fa:	fa24 fa09 	lsr.w	sl, r4, r9
    81fe:	d8f2      	bhi.n	81e6 <__lshift+0x76>
    8200:	1b4b      	subs	r3, r1, r5
    8202:	3b15      	subs	r3, #21
    8204:	f023 0303 	bic.w	r3, r3, #3
    8208:	3304      	adds	r3, #4
    820a:	f105 0015 	add.w	r0, r5, #21
    820e:	4281      	cmp	r1, r0
    8210:	bf38      	it	cc
    8212:	2304      	movcc	r3, #4
    8214:	f1ba 0f00 	cmp.w	sl, #0
    8218:	bf18      	it	ne
    821a:	4637      	movne	r7, r6
    821c:	f842 a003 	str.w	sl, [r2, r3]
    8220:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    8224:	686a      	ldr	r2, [r5, #4]
    8226:	f8cc 7010 	str.w	r7, [ip, #16]
    822a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    822e:	6029      	str	r1, [r5, #0]
    8230:	4660      	mov	r0, ip
    8232:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    8236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    823a:	3a04      	subs	r2, #4
    823c:	f853 0b04 	ldr.w	r0, [r3], #4
    8240:	f842 0f04 	str.w	r0, [r2, #4]!
    8244:	4299      	cmp	r1, r3
    8246:	d8f9      	bhi.n	823c <__lshift+0xcc>
    8248:	e7ea      	b.n	8220 <__lshift+0xb0>
    824a:	4b03      	ldr	r3, [pc, #12]	; (8258 <__lshift+0xe8>)
    824c:	4803      	ldr	r0, [pc, #12]	; (825c <__lshift+0xec>)
    824e:	4662      	mov	r2, ip
    8250:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    8254:	f002 f946 	bl	a4e4 <__assert_func>
    8258:	0000d890 	.word	0x0000d890
    825c:	0000d8a4 	.word	0x0000d8a4

00008260 <__mcmp>:
    8260:	690b      	ldr	r3, [r1, #16]
    8262:	4684      	mov	ip, r0
    8264:	6900      	ldr	r0, [r0, #16]
    8266:	1ac0      	subs	r0, r0, r3
    8268:	d116      	bne.n	8298 <__mcmp+0x38>
    826a:	f10c 0c14 	add.w	ip, ip, #20
    826e:	3114      	adds	r1, #20
    8270:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    8274:	b410      	push	{r4}
    8276:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    827a:	e001      	b.n	8280 <__mcmp+0x20>
    827c:	4594      	cmp	ip, r2
    827e:	d208      	bcs.n	8292 <__mcmp+0x32>
    8280:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    8284:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    8288:	428c      	cmp	r4, r1
    828a:	d0f7      	beq.n	827c <__mcmp+0x1c>
    828c:	d205      	bcs.n	829a <__mcmp+0x3a>
    828e:	f04f 30ff 	mov.w	r0, #4294967295
    8292:	f85d 4b04 	ldr.w	r4, [sp], #4
    8296:	4770      	bx	lr
    8298:	4770      	bx	lr
    829a:	2001      	movs	r0, #1
    829c:	f85d 4b04 	ldr.w	r4, [sp], #4
    82a0:	4770      	bx	lr
    82a2:	bf00      	nop

000082a4 <__mdiff>:
    82a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82a8:	690f      	ldr	r7, [r1, #16]
    82aa:	6913      	ldr	r3, [r2, #16]
    82ac:	1aff      	subs	r7, r7, r3
    82ae:	2f00      	cmp	r7, #0
    82b0:	460e      	mov	r6, r1
    82b2:	4690      	mov	r8, r2
    82b4:	d17f      	bne.n	83b6 <__mdiff+0x112>
    82b6:	f101 0514 	add.w	r5, r1, #20
    82ba:	3214      	adds	r2, #20
    82bc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    82c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    82c4:	e001      	b.n	82ca <__mdiff+0x26>
    82c6:	429d      	cmp	r5, r3
    82c8:	d278      	bcs.n	83bc <__mdiff+0x118>
    82ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    82ce:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    82d2:	42a1      	cmp	r1, r4
    82d4:	d0f7      	beq.n	82c6 <__mdiff+0x22>
    82d6:	d369      	bcc.n	83ac <__mdiff+0x108>
    82d8:	6871      	ldr	r1, [r6, #4]
    82da:	f7ff fd3b 	bl	7d54 <_Balloc>
    82de:	4681      	mov	r9, r0
    82e0:	2800      	cmp	r0, #0
    82e2:	d077      	beq.n	83d4 <__mdiff+0x130>
    82e4:	6935      	ldr	r5, [r6, #16]
    82e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
    82ea:	60c7      	str	r7, [r0, #12]
    82ec:	f108 0e14 	add.w	lr, r8, #20
    82f0:	f106 0014 	add.w	r0, r6, #20
    82f4:	f109 0a14 	add.w	sl, r9, #20
    82f8:	f106 0110 	add.w	r1, r6, #16
    82fc:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    8300:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    8304:	4656      	mov	r6, sl
    8306:	f04f 0c00 	mov.w	ip, #0
    830a:	f85e 4b04 	ldr.w	r4, [lr], #4
    830e:	f851 bf04 	ldr.w	fp, [r1, #4]!
    8312:	b2a3      	uxth	r3, r4
    8314:	fa1c fc8b 	uxtah	ip, ip, fp
    8318:	ebac 0303 	sub.w	r3, ip, r3
    831c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    8320:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    8324:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    8328:	b29b      	uxth	r3, r3
    832a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    832e:	4572      	cmp	r2, lr
    8330:	f846 3b04 	str.w	r3, [r6], #4
    8334:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    8338:	d8e7      	bhi.n	830a <__mdiff+0x66>
    833a:	eba2 0108 	sub.w	r1, r2, r8
    833e:	3915      	subs	r1, #21
    8340:	f108 0815 	add.w	r8, r8, #21
    8344:	4542      	cmp	r2, r8
    8346:	f021 0403 	bic.w	r4, r1, #3
    834a:	f104 0404 	add.w	r4, r4, #4
    834e:	bf38      	it	cc
    8350:	2404      	movcc	r4, #4
    8352:	4420      	add	r0, r4
    8354:	f021 0203 	bic.w	r2, r1, #3
    8358:	bf38      	it	cc
    835a:	2200      	movcc	r2, #0
    835c:	4287      	cmp	r7, r0
    835e:	4452      	add	r2, sl
    8360:	4454      	add	r4, sl
    8362:	d918      	bls.n	8396 <__mdiff+0xf2>
    8364:	4626      	mov	r6, r4
    8366:	4601      	mov	r1, r0
    8368:	f851 3b04 	ldr.w	r3, [r1], #4
    836c:	fa1c fc83 	uxtah	ip, ip, r3
    8370:	ea4f 422c 	mov.w	r2, ip, asr #16
    8374:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    8378:	fa1f fc8c 	uxth.w	ip, ip
    837c:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    8380:	428f      	cmp	r7, r1
    8382:	f846 3b04 	str.w	r3, [r6], #4
    8386:	ea4f 4c22 	mov.w	ip, r2, asr #16
    838a:	d8ed      	bhi.n	8368 <__mdiff+0xc4>
    838c:	3f01      	subs	r7, #1
    838e:	1a3f      	subs	r7, r7, r0
    8390:	f027 0703 	bic.w	r7, r7, #3
    8394:	19e2      	adds	r2, r4, r7
    8396:	b923      	cbnz	r3, 83a2 <__mdiff+0xfe>
    8398:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    839c:	3d01      	subs	r5, #1
    839e:	2b00      	cmp	r3, #0
    83a0:	d0fa      	beq.n	8398 <__mdiff+0xf4>
    83a2:	f8c9 5010 	str.w	r5, [r9, #16]
    83a6:	4648      	mov	r0, r9
    83a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83ac:	4633      	mov	r3, r6
    83ae:	2701      	movs	r7, #1
    83b0:	4646      	mov	r6, r8
    83b2:	4698      	mov	r8, r3
    83b4:	e790      	b.n	82d8 <__mdiff+0x34>
    83b6:	dbf9      	blt.n	83ac <__mdiff+0x108>
    83b8:	2700      	movs	r7, #0
    83ba:	e78d      	b.n	82d8 <__mdiff+0x34>
    83bc:	2100      	movs	r1, #0
    83be:	f7ff fcc9 	bl	7d54 <_Balloc>
    83c2:	4681      	mov	r9, r0
    83c4:	b168      	cbz	r0, 83e2 <__mdiff+0x13e>
    83c6:	2201      	movs	r2, #1
    83c8:	2300      	movs	r3, #0
    83ca:	e9c9 2304 	strd	r2, r3, [r9, #16]
    83ce:	4648      	mov	r0, r9
    83d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83d4:	4b06      	ldr	r3, [pc, #24]	; (83f0 <__mdiff+0x14c>)
    83d6:	4807      	ldr	r0, [pc, #28]	; (83f4 <__mdiff+0x150>)
    83d8:	464a      	mov	r2, r9
    83da:	f240 2145 	movw	r1, #581	; 0x245
    83de:	f002 f881 	bl	a4e4 <__assert_func>
    83e2:	4b03      	ldr	r3, [pc, #12]	; (83f0 <__mdiff+0x14c>)
    83e4:	4803      	ldr	r0, [pc, #12]	; (83f4 <__mdiff+0x150>)
    83e6:	464a      	mov	r2, r9
    83e8:	f240 2137 	movw	r1, #567	; 0x237
    83ec:	f002 f87a 	bl	a4e4 <__assert_func>
    83f0:	0000d890 	.word	0x0000d890
    83f4:	0000d8a4 	.word	0x0000d8a4

000083f8 <__d2b>:
    83f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    83fc:	4688      	mov	r8, r1
    83fe:	b083      	sub	sp, #12
    8400:	2101      	movs	r1, #1
    8402:	ec57 6b10 	vmov	r6, r7, d0
    8406:	4615      	mov	r5, r2
    8408:	f7ff fca4 	bl	7d54 <_Balloc>
    840c:	4604      	mov	r4, r0
    840e:	2800      	cmp	r0, #0
    8410:	d051      	beq.n	84b6 <__d2b+0xbe>
    8412:	f3c7 590a 	ubfx	r9, r7, #20, #11
    8416:	f3c7 0313 	ubfx	r3, r7, #0, #20
    841a:	f1b9 0f00 	cmp.w	r9, #0
    841e:	d001      	beq.n	8424 <__d2b+0x2c>
    8420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8424:	2e00      	cmp	r6, #0
    8426:	9301      	str	r3, [sp, #4]
    8428:	d118      	bne.n	845c <__d2b+0x64>
    842a:	a801      	add	r0, sp, #4
    842c:	f7ff fd34 	bl	7e98 <__lo0bits>
    8430:	9a01      	ldr	r2, [sp, #4]
    8432:	6162      	str	r2, [r4, #20]
    8434:	2201      	movs	r2, #1
    8436:	f100 0320 	add.w	r3, r0, #32
    843a:	6122      	str	r2, [r4, #16]
    843c:	f1b9 0f00 	cmp.w	r9, #0
    8440:	d025      	beq.n	848e <__d2b+0x96>
    8442:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    8446:	eb09 0203 	add.w	r2, r9, r3
    844a:	4620      	mov	r0, r4
    844c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    8450:	f8c8 2000 	str.w	r2, [r8]
    8454:	602b      	str	r3, [r5, #0]
    8456:	b003      	add	sp, #12
    8458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    845c:	4668      	mov	r0, sp
    845e:	9600      	str	r6, [sp, #0]
    8460:	f7ff fd1a 	bl	7e98 <__lo0bits>
    8464:	4603      	mov	r3, r0
    8466:	b310      	cbz	r0, 84ae <__d2b+0xb6>
    8468:	e9dd 0200 	ldrd	r0, r2, [sp]
    846c:	f1c3 0120 	rsb	r1, r3, #32
    8470:	fa02 f101 	lsl.w	r1, r2, r1
    8474:	4301      	orrs	r1, r0
    8476:	40da      	lsrs	r2, r3
    8478:	6161      	str	r1, [r4, #20]
    847a:	9201      	str	r2, [sp, #4]
    847c:	2a00      	cmp	r2, #0
    847e:	61a2      	str	r2, [r4, #24]
    8480:	bf14      	ite	ne
    8482:	2202      	movne	r2, #2
    8484:	2201      	moveq	r2, #1
    8486:	6122      	str	r2, [r4, #16]
    8488:	f1b9 0f00 	cmp.w	r9, #0
    848c:	d1d9      	bne.n	8442 <__d2b+0x4a>
    848e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    8492:	f8c8 3000 	str.w	r3, [r8]
    8496:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    849a:	6918      	ldr	r0, [r3, #16]
    849c:	f7ff fcdc 	bl	7e58 <__hi0bits>
    84a0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    84a4:	4620      	mov	r0, r4
    84a6:	602b      	str	r3, [r5, #0]
    84a8:	b003      	add	sp, #12
    84aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    84ae:	9a00      	ldr	r2, [sp, #0]
    84b0:	6162      	str	r2, [r4, #20]
    84b2:	9a01      	ldr	r2, [sp, #4]
    84b4:	e7e2      	b.n	847c <__d2b+0x84>
    84b6:	4b03      	ldr	r3, [pc, #12]	; (84c4 <__d2b+0xcc>)
    84b8:	4803      	ldr	r0, [pc, #12]	; (84c8 <__d2b+0xd0>)
    84ba:	4622      	mov	r2, r4
    84bc:	f240 310f 	movw	r1, #783	; 0x30f
    84c0:	f002 f810 	bl	a4e4 <__assert_func>
    84c4:	0000d890 	.word	0x0000d890
    84c8:	0000d8a4 	.word	0x0000d8a4

000084cc <__ascii_wctomb>:
    84cc:	b149      	cbz	r1, 84e2 <__ascii_wctomb+0x16>
    84ce:	2aff      	cmp	r2, #255	; 0xff
    84d0:	d802      	bhi.n	84d8 <__ascii_wctomb+0xc>
    84d2:	700a      	strb	r2, [r1, #0]
    84d4:	2001      	movs	r0, #1
    84d6:	4770      	bx	lr
    84d8:	238a      	movs	r3, #138	; 0x8a
    84da:	6003      	str	r3, [r0, #0]
    84dc:	f04f 30ff 	mov.w	r0, #4294967295
    84e0:	4770      	bx	lr
    84e2:	4608      	mov	r0, r1
    84e4:	4770      	bx	lr
    84e6:	bf00      	nop

000084e8 <_svfprintf_r>:
    84e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84ec:	ed2d 8b06 	vpush	{d8-d10}
    84f0:	b0d3      	sub	sp, #332	; 0x14c
    84f2:	460c      	mov	r4, r1
    84f4:	ee0a 1a10 	vmov	s20, r1
    84f8:	4690      	mov	r8, r2
    84fa:	9308      	str	r3, [sp, #32]
    84fc:	4682      	mov	sl, r0
    84fe:	f001 ff09 	bl	a314 <_localeconv_r>
    8502:	6803      	ldr	r3, [r0, #0]
    8504:	9313      	str	r3, [sp, #76]	; 0x4c
    8506:	4618      	mov	r0, r3
    8508:	f7ff fa3a 	bl	7980 <strlen>
    850c:	2208      	movs	r2, #8
    850e:	9011      	str	r0, [sp, #68]	; 0x44
    8510:	2100      	movs	r1, #0
    8512:	a822      	add	r0, sp, #136	; 0x88
    8514:	f7ff f912 	bl	773c <memset>
    8518:	89a3      	ldrh	r3, [r4, #12]
    851a:	061f      	lsls	r7, r3, #24
    851c:	d503      	bpl.n	8526 <_svfprintf_r+0x3e>
    851e:	6923      	ldr	r3, [r4, #16]
    8520:	2b00      	cmp	r3, #0
    8522:	f000 8752 	beq.w	93ca <_svfprintf_r+0xee2>
    8526:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8738 <_svfprintf_r+0x250>
    852a:	2300      	movs	r3, #0
    852c:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
    8530:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    8534:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
    8538:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    853c:	aa29      	add	r2, sp, #164	; 0xa4
    853e:	930d      	str	r3, [sp, #52]	; 0x34
    8540:	9226      	str	r2, [sp, #152]	; 0x98
    8542:	4691      	mov	r9, r2
    8544:	9312      	str	r3, [sp, #72]	; 0x48
    8546:	9304      	str	r3, [sp, #16]
    8548:	4644      	mov	r4, r8
    854a:	46a0      	mov	r8, r4
    854c:	4b7c      	ldr	r3, [pc, #496]	; (8740 <_svfprintf_r+0x258>)
    854e:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    8552:	f7ff f977 	bl	7844 <__locale_mb_cur_max>
    8556:	4603      	mov	r3, r0
    8558:	a822      	add	r0, sp, #136	; 0x88
    855a:	9000      	str	r0, [sp, #0]
    855c:	4642      	mov	r2, r8
    855e:	a91e      	add	r1, sp, #120	; 0x78
    8560:	4650      	mov	r0, sl
    8562:	47a8      	blx	r5
    8564:	2800      	cmp	r0, #0
    8566:	f000 80b0 	beq.w	86ca <_svfprintf_r+0x1e2>
    856a:	f2c0 80a6 	blt.w	86ba <_svfprintf_r+0x1d2>
    856e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    8570:	2a25      	cmp	r2, #37	; 0x25
    8572:	4603      	mov	r3, r0
    8574:	d001      	beq.n	857a <_svfprintf_r+0x92>
    8576:	4498      	add	r8, r3
    8578:	e7e8      	b.n	854c <_svfprintf_r+0x64>
    857a:	ebb8 0704 	subs.w	r7, r8, r4
    857e:	4606      	mov	r6, r0
    8580:	f040 80a7 	bne.w	86d2 <_svfprintf_r+0x1ea>
    8584:	2300      	movs	r3, #0
    8586:	f04f 32ff 	mov.w	r2, #4294967295
    858a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    858e:	469b      	mov	fp, r3
    8590:	9306      	str	r3, [sp, #24]
    8592:	f108 0801 	add.w	r8, r8, #1
    8596:	f898 3000 	ldrb.w	r3, [r8]
    859a:	9203      	str	r2, [sp, #12]
    859c:	252b      	movs	r5, #43	; 0x2b
    859e:	2620      	movs	r6, #32
    85a0:	f108 0801 	add.w	r8, r8, #1
    85a4:	f1a3 0220 	sub.w	r2, r3, #32
    85a8:	2a5a      	cmp	r2, #90	; 0x5a
    85aa:	f200 80cb 	bhi.w	8744 <_svfprintf_r+0x25c>
    85ae:	e8df f012 	tbh	[pc, r2, lsl #1]
    85b2:	02f3      	.short	0x02f3
    85b4:	00c900c9 	.word	0x00c900c9
    85b8:	00c902ee 	.word	0x00c902ee
    85bc:	00c900c9 	.word	0x00c900c9
    85c0:	00c9006a 	.word	0x00c9006a
    85c4:	021400c9 	.word	0x021400c9
    85c8:	00c90290 	.word	0x00c90290
    85cc:	02d4021f 	.word	0x02d4021f
    85d0:	02cf00c9 	.word	0x02cf00c9
    85d4:	005b005b 	.word	0x005b005b
    85d8:	005b005b 	.word	0x005b005b
    85dc:	005b005b 	.word	0x005b005b
    85e0:	005b005b 	.word	0x005b005b
    85e4:	00c9005b 	.word	0x00c9005b
    85e8:	00c900c9 	.word	0x00c900c9
    85ec:	00c900c9 	.word	0x00c900c9
    85f0:	00c900c9 	.word	0x00c900c9
    85f4:	00c9014c 	.word	0x00c9014c
    85f8:	02290195 	.word	0x02290195
    85fc:	014c014c 	.word	0x014c014c
    8600:	00c9014c 	.word	0x00c9014c
    8604:	00c900c9 	.word	0x00c900c9
    8608:	022400c9 	.word	0x022400c9
    860c:	00c900c9 	.word	0x00c900c9
    8610:	00c902a2 	.word	0x00c902a2
    8614:	00c900c9 	.word	0x00c900c9
    8618:	00c901bd 	.word	0x00c901bd
    861c:	00c902b5 	.word	0x00c902b5
    8620:	06ef00c9 	.word	0x06ef00c9
    8624:	00c900c9 	.word	0x00c900c9
    8628:	00c900c9 	.word	0x00c900c9
    862c:	00c900c9 	.word	0x00c900c9
    8630:	00c900c9 	.word	0x00c900c9
    8634:	00c9014c 	.word	0x00c9014c
    8638:	01ee0195 	.word	0x01ee0195
    863c:	014c014c 	.word	0x014c014c
    8640:	0283014c 	.word	0x0283014c
    8644:	007f01ee 	.word	0x007f01ee
    8648:	029500c9 	.word	0x029500c9
    864c:	026b00c9 	.word	0x026b00c9
    8650:	023e06ec 	.word	0x023e06ec
    8654:	00c9007f 	.word	0x00c9007f
    8658:	007c01bd 	.word	0x007c01bd
    865c:	00c906c6 	.word	0x00c906c6
    8660:	06ca00c9 	.word	0x06ca00c9
    8664:	007c00c9 	.word	0x007c00c9
    8668:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    866c:	2100      	movs	r1, #0
    866e:	f818 3b01 	ldrb.w	r3, [r8], #1
    8672:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8676:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    867a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    867e:	2a09      	cmp	r2, #9
    8680:	d9f5      	bls.n	866e <_svfprintf_r+0x186>
    8682:	9106      	str	r1, [sp, #24]
    8684:	e78e      	b.n	85a4 <_svfprintf_r+0xbc>
    8686:	4650      	mov	r0, sl
    8688:	f001 fe44 	bl	a314 <_localeconv_r>
    868c:	6843      	ldr	r3, [r0, #4]
    868e:	9316      	str	r3, [sp, #88]	; 0x58
    8690:	4618      	mov	r0, r3
    8692:	f7ff f975 	bl	7980 <strlen>
    8696:	9017      	str	r0, [sp, #92]	; 0x5c
    8698:	4607      	mov	r7, r0
    869a:	4650      	mov	r0, sl
    869c:	f001 fe3a 	bl	a314 <_localeconv_r>
    86a0:	6883      	ldr	r3, [r0, #8]
    86a2:	9314      	str	r3, [sp, #80]	; 0x50
    86a4:	2f00      	cmp	r7, #0
    86a6:	f040 85d0 	bne.w	924a <_svfprintf_r+0xd62>
    86aa:	f898 3000 	ldrb.w	r3, [r8]
    86ae:	e777      	b.n	85a0 <_svfprintf_r+0xb8>
    86b0:	f898 3000 	ldrb.w	r3, [r8]
    86b4:	f04b 0b20 	orr.w	fp, fp, #32
    86b8:	e772      	b.n	85a0 <_svfprintf_r+0xb8>
    86ba:	2208      	movs	r2, #8
    86bc:	2100      	movs	r1, #0
    86be:	a822      	add	r0, sp, #136	; 0x88
    86c0:	f7ff f83c 	bl	773c <memset>
    86c4:	2301      	movs	r3, #1
    86c6:	4498      	add	r8, r3
    86c8:	e740      	b.n	854c <_svfprintf_r+0x64>
    86ca:	ebb8 0704 	subs.w	r7, r8, r4
    86ce:	4606      	mov	r6, r0
    86d0:	d011      	beq.n	86f6 <_svfprintf_r+0x20e>
    86d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    86d4:	443b      	add	r3, r7
    86d6:	9328      	str	r3, [sp, #160]	; 0xa0
    86d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    86da:	3301      	adds	r3, #1
    86dc:	2b07      	cmp	r3, #7
    86de:	e9c9 4700 	strd	r4, r7, [r9]
    86e2:	9327      	str	r3, [sp, #156]	; 0x9c
    86e4:	dc1c      	bgt.n	8720 <_svfprintf_r+0x238>
    86e6:	f109 0908 	add.w	r9, r9, #8
    86ea:	9b04      	ldr	r3, [sp, #16]
    86ec:	443b      	add	r3, r7
    86ee:	9304      	str	r3, [sp, #16]
    86f0:	2e00      	cmp	r6, #0
    86f2:	f47f af47 	bne.w	8584 <_svfprintf_r+0x9c>
    86f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    86f8:	2b00      	cmp	r3, #0
    86fa:	f041 8219 	bne.w	9b30 <_svfprintf_r+0x1648>
    86fe:	ee1a 3a10 	vmov	r3, s20
    8702:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    8706:	f013 0f40 	tst.w	r3, #64	; 0x40
    870a:	9b04      	ldr	r3, [sp, #16]
    870c:	bf18      	it	ne
    870e:	f04f 33ff 	movne.w	r3, #4294967295
    8712:	9304      	str	r3, [sp, #16]
    8714:	9804      	ldr	r0, [sp, #16]
    8716:	b053      	add	sp, #332	; 0x14c
    8718:	ecbd 8b06 	vpop	{d8-d10}
    871c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8720:	ee1a 1a10 	vmov	r1, s20
    8724:	aa26      	add	r2, sp, #152	; 0x98
    8726:	4650      	mov	r0, sl
    8728:	f002 ffb2 	bl	b690 <__ssprint_r>
    872c:	2800      	cmp	r0, #0
    872e:	d1e6      	bne.n	86fe <_svfprintf_r+0x216>
    8730:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8734:	e7d9      	b.n	86ea <_svfprintf_r+0x202>
    8736:	bf00      	nop
	...
    8740:	1fff0c48 	.word	0x1fff0c48
    8744:	930a      	str	r3, [sp, #40]	; 0x28
    8746:	2b00      	cmp	r3, #0
    8748:	d0d5      	beq.n	86f6 <_svfprintf_r+0x20e>
    874a:	2200      	movs	r2, #0
    874c:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    8750:	2301      	movs	r3, #1
    8752:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    8756:	9302      	str	r3, [sp, #8]
    8758:	9207      	str	r2, [sp, #28]
    875a:	9305      	str	r3, [sp, #20]
    875c:	9203      	str	r2, [sp, #12]
    875e:	920c      	str	r2, [sp, #48]	; 0x30
    8760:	9210      	str	r2, [sp, #64]	; 0x40
    8762:	920b      	str	r2, [sp, #44]	; 0x2c
    8764:	ac39      	add	r4, sp, #228	; 0xe4
    8766:	f01b 0302 	ands.w	r3, fp, #2
    876a:	d002      	beq.n	8772 <_svfprintf_r+0x28a>
    876c:	9902      	ldr	r1, [sp, #8]
    876e:	3102      	adds	r1, #2
    8770:	9102      	str	r1, [sp, #8]
    8772:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
    8776:	9109      	str	r1, [sp, #36]	; 0x24
    8778:	d105      	bne.n	8786 <_svfprintf_r+0x29e>
    877a:	9906      	ldr	r1, [sp, #24]
    877c:	9802      	ldr	r0, [sp, #8]
    877e:	1a0f      	subs	r7, r1, r0
    8780:	2f00      	cmp	r7, #0
    8782:	f300 8387 	bgt.w	8e94 <_svfprintf_r+0x9ac>
    8786:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    8788:	b182      	cbz	r2, 87ac <_svfprintf_r+0x2c4>
    878a:	2201      	movs	r2, #1
    878c:	f8c9 2004 	str.w	r2, [r9, #4]
    8790:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    8792:	3201      	adds	r2, #1
    8794:	3601      	adds	r6, #1
    8796:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
    879a:	2a07      	cmp	r2, #7
    879c:	9628      	str	r6, [sp, #160]	; 0xa0
    879e:	9227      	str	r2, [sp, #156]	; 0x9c
    87a0:	f8c9 1000 	str.w	r1, [r9]
    87a4:	f300 83bf 	bgt.w	8f26 <_svfprintf_r+0xa3e>
    87a8:	f109 0908 	add.w	r9, r9, #8
    87ac:	b183      	cbz	r3, 87d0 <_svfprintf_r+0x2e8>
    87ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    87b0:	aa1c      	add	r2, sp, #112	; 0x70
    87b2:	3301      	adds	r3, #1
    87b4:	3602      	adds	r6, #2
    87b6:	f8c9 2000 	str.w	r2, [r9]
    87ba:	2b07      	cmp	r3, #7
    87bc:	f04f 0202 	mov.w	r2, #2
    87c0:	9628      	str	r6, [sp, #160]	; 0xa0
    87c2:	9327      	str	r3, [sp, #156]	; 0x9c
    87c4:	f8c9 2004 	str.w	r2, [r9, #4]
    87c8:	f300 83c2 	bgt.w	8f50 <_svfprintf_r+0xa68>
    87cc:	f109 0908 	add.w	r9, r9, #8
    87d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    87d2:	2b80      	cmp	r3, #128	; 0x80
    87d4:	f000 8286 	beq.w	8ce4 <_svfprintf_r+0x7fc>
    87d8:	9b03      	ldr	r3, [sp, #12]
    87da:	9a05      	ldr	r2, [sp, #20]
    87dc:	1a9f      	subs	r7, r3, r2
    87de:	2f00      	cmp	r7, #0
    87e0:	f300 82c0 	bgt.w	8d64 <_svfprintf_r+0x87c>
    87e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
    87e8:	f040 8222 	bne.w	8c30 <_svfprintf_r+0x748>
    87ec:	9b05      	ldr	r3, [sp, #20]
    87ee:	f8c9 3004 	str.w	r3, [r9, #4]
    87f2:	441e      	add	r6, r3
    87f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    87f6:	f8c9 4000 	str.w	r4, [r9]
    87fa:	3301      	adds	r3, #1
    87fc:	2b07      	cmp	r3, #7
    87fe:	9628      	str	r6, [sp, #160]	; 0xa0
    8800:	9327      	str	r3, [sp, #156]	; 0x9c
    8802:	f300 833b 	bgt.w	8e7c <_svfprintf_r+0x994>
    8806:	f109 0908 	add.w	r9, r9, #8
    880a:	f01b 0f04 	tst.w	fp, #4
    880e:	d005      	beq.n	881c <_svfprintf_r+0x334>
    8810:	9b06      	ldr	r3, [sp, #24]
    8812:	9a02      	ldr	r2, [sp, #8]
    8814:	1a9c      	subs	r4, r3, r2
    8816:	2c00      	cmp	r4, #0
    8818:	f300 83a7 	bgt.w	8f6a <_svfprintf_r+0xa82>
    881c:	9b04      	ldr	r3, [sp, #16]
    881e:	9a06      	ldr	r2, [sp, #24]
    8820:	9902      	ldr	r1, [sp, #8]
    8822:	428a      	cmp	r2, r1
    8824:	bfac      	ite	ge
    8826:	189b      	addge	r3, r3, r2
    8828:	185b      	addlt	r3, r3, r1
    882a:	9304      	str	r3, [sp, #16]
    882c:	2e00      	cmp	r6, #0
    882e:	f040 82cd 	bne.w	8dcc <_svfprintf_r+0x8e4>
    8832:	2300      	movs	r3, #0
    8834:	9327      	str	r3, [sp, #156]	; 0x9c
    8836:	9b07      	ldr	r3, [sp, #28]
    8838:	b11b      	cbz	r3, 8842 <_svfprintf_r+0x35a>
    883a:	9907      	ldr	r1, [sp, #28]
    883c:	4650      	mov	r0, sl
    883e:	f7ff f96d 	bl	7b1c <_free_r>
    8842:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8846:	4644      	mov	r4, r8
    8848:	e67f      	b.n	854a <_svfprintf_r+0x62>
    884a:	930a      	str	r3, [sp, #40]	; 0x28
    884c:	9b08      	ldr	r3, [sp, #32]
    884e:	3307      	adds	r3, #7
    8850:	f023 0307 	bic.w	r3, r3, #7
    8854:	ecb3 7b02 	vldmia	r3!, {d7}
    8858:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    885c:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
    8860:	9308      	str	r3, [sp, #32]
    8862:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
    8866:	ee09 3a90 	vmov	s19, r3
    886a:	ee09 5a10 	vmov	s18, r5
    886e:	4bb4      	ldr	r3, [pc, #720]	; (8b40 <_svfprintf_r+0x658>)
    8870:	ec51 0b19 	vmov	r0, r1, d9
    8874:	f04f 32ff 	mov.w	r2, #4294967295
    8878:	f7fe f896 	bl	69a8 <__aeabi_dcmpun>
    887c:	2800      	cmp	r0, #0
    887e:	f040 8502 	bne.w	9286 <_svfprintf_r+0xd9e>
    8882:	4baf      	ldr	r3, [pc, #700]	; (8b40 <_svfprintf_r+0x658>)
    8884:	ec51 0b19 	vmov	r0, r1, d9
    8888:	f04f 32ff 	mov.w	r2, #4294967295
    888c:	f7fe f86e 	bl	696c <__aeabi_dcmple>
    8890:	2800      	cmp	r0, #0
    8892:	f040 84f8 	bne.w	9286 <_svfprintf_r+0xd9e>
    8896:	2200      	movs	r2, #0
    8898:	2300      	movs	r3, #0
    889a:	4628      	mov	r0, r5
    889c:	4631      	mov	r1, r6
    889e:	f7fe f85b 	bl	6958 <__aeabi_dcmplt>
    88a2:	2800      	cmp	r0, #0
    88a4:	f041 805c 	bne.w	9960 <_svfprintf_r+0x1478>
    88a8:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    88ac:	4ca5      	ldr	r4, [pc, #660]	; (8b44 <_svfprintf_r+0x65c>)
    88ae:	4ba6      	ldr	r3, [pc, #664]	; (8b48 <_svfprintf_r+0x660>)
    88b0:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    88b4:	990a      	ldr	r1, [sp, #40]	; 0x28
    88b6:	2947      	cmp	r1, #71	; 0x47
    88b8:	bfc8      	it	gt
    88ba:	461c      	movgt	r4, r3
    88bc:	2300      	movs	r3, #0
    88be:	2103      	movs	r1, #3
    88c0:	9307      	str	r3, [sp, #28]
    88c2:	9102      	str	r1, [sp, #8]
    88c4:	9105      	str	r1, [sp, #20]
    88c6:	9303      	str	r3, [sp, #12]
    88c8:	930c      	str	r3, [sp, #48]	; 0x30
    88ca:	9310      	str	r3, [sp, #64]	; 0x40
    88cc:	930b      	str	r3, [sp, #44]	; 0x2c
    88ce:	2a00      	cmp	r2, #0
    88d0:	f43f af49 	beq.w	8766 <_svfprintf_r+0x27e>
    88d4:	9b02      	ldr	r3, [sp, #8]
    88d6:	3301      	adds	r3, #1
    88d8:	9302      	str	r3, [sp, #8]
    88da:	e744      	b.n	8766 <_svfprintf_r+0x27e>
    88dc:	2b43      	cmp	r3, #67	; 0x43
    88de:	930a      	str	r3, [sp, #40]	; 0x28
    88e0:	d003      	beq.n	88ea <_svfprintf_r+0x402>
    88e2:	f01b 0f10 	tst.w	fp, #16
    88e6:	f000 8557 	beq.w	9398 <_svfprintf_r+0xeb0>
    88ea:	9e08      	ldr	r6, [sp, #32]
    88ec:	2208      	movs	r2, #8
    88ee:	2100      	movs	r1, #0
    88f0:	a824      	add	r0, sp, #144	; 0x90
    88f2:	ac39      	add	r4, sp, #228	; 0xe4
    88f4:	f7fe ff22 	bl	773c <memset>
    88f8:	ab24      	add	r3, sp, #144	; 0x90
    88fa:	f856 2b04 	ldr.w	r2, [r6], #4
    88fe:	4621      	mov	r1, r4
    8900:	4650      	mov	r0, sl
    8902:	f002 fe7f 	bl	b604 <_wcrtomb_r>
    8906:	4603      	mov	r3, r0
    8908:	3301      	adds	r3, #1
    890a:	9005      	str	r0, [sp, #20]
    890c:	f001 8323 	beq.w	9f56 <_svfprintf_r+0x1a6e>
    8910:	9b05      	ldr	r3, [sp, #20]
    8912:	9608      	str	r6, [sp, #32]
    8914:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8918:	9302      	str	r3, [sp, #8]
    891a:	2200      	movs	r2, #0
    891c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    8920:	9207      	str	r2, [sp, #28]
    8922:	9203      	str	r2, [sp, #12]
    8924:	920c      	str	r2, [sp, #48]	; 0x30
    8926:	9210      	str	r2, [sp, #64]	; 0x40
    8928:	920b      	str	r2, [sp, #44]	; 0x2c
    892a:	e71c      	b.n	8766 <_svfprintf_r+0x27e>
    892c:	9f08      	ldr	r7, [sp, #32]
    892e:	930a      	str	r3, [sp, #40]	; 0x28
    8930:	f857 4b04 	ldr.w	r4, [r7], #4
    8934:	2300      	movs	r3, #0
    8936:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    893a:	2c00      	cmp	r4, #0
    893c:	f000 8552 	beq.w	93e4 <_svfprintf_r+0xefc>
    8940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8942:	2b53      	cmp	r3, #83	; 0x53
    8944:	f000 86de 	beq.w	9704 <_svfprintf_r+0x121c>
    8948:	f01b 0310 	ands.w	r3, fp, #16
    894c:	930b      	str	r3, [sp, #44]	; 0x2c
    894e:	f040 86d9 	bne.w	9704 <_svfprintf_r+0x121c>
    8952:	9b03      	ldr	r3, [sp, #12]
    8954:	1c5d      	adds	r5, r3, #1
    8956:	f001 80e3 	beq.w	9b20 <_svfprintf_r+0x1638>
    895a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    895c:	461a      	mov	r2, r3
    895e:	4620      	mov	r0, r4
    8960:	f001 fcf6 	bl	a350 <memchr>
    8964:	9007      	str	r0, [sp, #28]
    8966:	2800      	cmp	r0, #0
    8968:	f001 833b 	beq.w	9fe2 <_svfprintf_r+0x1afa>
    896c:	9b07      	ldr	r3, [sp, #28]
    896e:	9708      	str	r7, [sp, #32]
    8970:	1b19      	subs	r1, r3, r4
    8972:	9105      	str	r1, [sp, #20]
    8974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8976:	9303      	str	r3, [sp, #12]
    8978:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    897c:	930c      	str	r3, [sp, #48]	; 0x30
    897e:	9310      	str	r3, [sp, #64]	; 0x40
    8980:	9307      	str	r3, [sp, #28]
    8982:	2373      	movs	r3, #115	; 0x73
    8984:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    8988:	9102      	str	r1, [sp, #8]
    898a:	930a      	str	r3, [sp, #40]	; 0x28
    898c:	e79f      	b.n	88ce <_svfprintf_r+0x3e6>
    898e:	f01b 0f20 	tst.w	fp, #32
    8992:	930a      	str	r3, [sp, #40]	; 0x28
    8994:	9b08      	ldr	r3, [sp, #32]
    8996:	d03c      	beq.n	8a12 <_svfprintf_r+0x52a>
    8998:	3307      	adds	r3, #7
    899a:	f023 0307 	bic.w	r3, r3, #7
    899e:	461a      	mov	r2, r3
    89a0:	4611      	mov	r1, r2
    89a2:	685b      	ldr	r3, [r3, #4]
    89a4:	f851 2b08 	ldr.w	r2, [r1], #8
    89a8:	9108      	str	r1, [sp, #32]
    89aa:	4619      	mov	r1, r3
    89ac:	2b00      	cmp	r3, #0
    89ae:	f2c0 8407 	blt.w	91c0 <_svfprintf_r+0xcd8>
    89b2:	9b03      	ldr	r3, [sp, #12]
    89b4:	3301      	adds	r3, #1
    89b6:	f000 82a7 	beq.w	8f08 <_svfprintf_r+0xa20>
    89ba:	ea52 0301 	orrs.w	r3, r2, r1
    89be:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
    89c2:	f040 82a2 	bne.w	8f0a <_svfprintf_r+0xa22>
    89c6:	9b03      	ldr	r3, [sp, #12]
    89c8:	2b00      	cmp	r3, #0
    89ca:	f040 82a3 	bne.w	8f14 <_svfprintf_r+0xa2c>
    89ce:	46ab      	mov	fp, r5
    89d0:	2300      	movs	r3, #0
    89d2:	9303      	str	r3, [sp, #12]
    89d4:	9305      	str	r3, [sp, #20]
    89d6:	ac52      	add	r4, sp, #328	; 0x148
    89d8:	e100      	b.n	8bdc <_svfprintf_r+0x6f4>
    89da:	9b08      	ldr	r3, [sp, #32]
    89dc:	f853 2b04 	ldr.w	r2, [r3], #4
    89e0:	9206      	str	r2, [sp, #24]
    89e2:	2a00      	cmp	r2, #0
    89e4:	f280 8414 	bge.w	9210 <_svfprintf_r+0xd28>
    89e8:	9a06      	ldr	r2, [sp, #24]
    89ea:	9308      	str	r3, [sp, #32]
    89ec:	4252      	negs	r2, r2
    89ee:	9206      	str	r2, [sp, #24]
    89f0:	f898 3000 	ldrb.w	r3, [r8]
    89f4:	f04b 0b04 	orr.w	fp, fp, #4
    89f8:	e5d2      	b.n	85a0 <_svfprintf_r+0xb8>
    89fa:	f898 3000 	ldrb.w	r3, [r8]
    89fe:	f04b 0b08 	orr.w	fp, fp, #8
    8a02:	e5cd      	b.n	85a0 <_svfprintf_r+0xb8>
    8a04:	f04b 0b10 	orr.w	fp, fp, #16
    8a08:	f01b 0f20 	tst.w	fp, #32
    8a0c:	930a      	str	r3, [sp, #40]	; 0x28
    8a0e:	9b08      	ldr	r3, [sp, #32]
    8a10:	d1c2      	bne.n	8998 <_svfprintf_r+0x4b0>
    8a12:	f01b 0f10 	tst.w	fp, #16
    8a16:	f040 8406 	bne.w	9226 <_svfprintf_r+0xd3e>
    8a1a:	f01b 0f40 	tst.w	fp, #64	; 0x40
    8a1e:	f000 83fe 	beq.w	921e <_svfprintf_r+0xd36>
    8a22:	f933 2b04 	ldrsh.w	r2, [r3], #4
    8a26:	9308      	str	r3, [sp, #32]
    8a28:	17d1      	asrs	r1, r2, #31
    8a2a:	460b      	mov	r3, r1
    8a2c:	e7be      	b.n	89ac <_svfprintf_r+0x4c4>
    8a2e:	9b08      	ldr	r3, [sp, #32]
    8a30:	f853 2b04 	ldr.w	r2, [r3], #4
    8a34:	9308      	str	r3, [sp, #32]
    8a36:	f647 0330 	movw	r3, #30768	; 0x7830
    8a3a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    8a3e:	2078      	movs	r0, #120	; 0x78
    8a40:	4b42      	ldr	r3, [pc, #264]	; (8b4c <_svfprintf_r+0x664>)
    8a42:	9312      	str	r3, [sp, #72]	; 0x48
    8a44:	f04b 0502 	orr.w	r5, fp, #2
    8a48:	2100      	movs	r1, #0
    8a4a:	2302      	movs	r3, #2
    8a4c:	900a      	str	r0, [sp, #40]	; 0x28
    8a4e:	2000      	movs	r0, #0
    8a50:	9c03      	ldr	r4, [sp, #12]
    8a52:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    8a56:	1c60      	adds	r0, r4, #1
    8a58:	f000 80a9 	beq.w	8bae <_svfprintf_r+0x6c6>
    8a5c:	ea52 0001 	orrs.w	r0, r2, r1
    8a60:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
    8a64:	f040 80a2 	bne.w	8bac <_svfprintf_r+0x6c4>
    8a68:	2c00      	cmp	r4, #0
    8a6a:	f040 86a1 	bne.w	97b0 <_svfprintf_r+0x12c8>
    8a6e:	2b00      	cmp	r3, #0
    8a70:	d1ae      	bne.n	89d0 <_svfprintf_r+0x4e8>
    8a72:	f015 0301 	ands.w	r3, r5, #1
    8a76:	9305      	str	r3, [sp, #20]
    8a78:	f000 83cf 	beq.w	921a <_svfprintf_r+0xd32>
    8a7c:	2330      	movs	r3, #48	; 0x30
    8a7e:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
    8a82:	f20d 1447 	addw	r4, sp, #327	; 0x147
    8a86:	e0a9      	b.n	8bdc <_svfprintf_r+0x6f4>
    8a88:	f01b 0f20 	tst.w	fp, #32
    8a8c:	f040 83f0 	bne.w	9270 <_svfprintf_r+0xd88>
    8a90:	f01b 0f10 	tst.w	fp, #16
    8a94:	f040 8692 	bne.w	97bc <_svfprintf_r+0x12d4>
    8a98:	f01b 0f40 	tst.w	fp, #64	; 0x40
    8a9c:	f040 8797 	bne.w	99ce <_svfprintf_r+0x14e6>
    8aa0:	f41b 7f00 	tst.w	fp, #512	; 0x200
    8aa4:	f000 868a 	beq.w	97bc <_svfprintf_r+0x12d4>
    8aa8:	9b08      	ldr	r3, [sp, #32]
    8aaa:	9904      	ldr	r1, [sp, #16]
    8aac:	f853 2b04 	ldr.w	r2, [r3], #4
    8ab0:	9308      	str	r3, [sp, #32]
    8ab2:	7011      	strb	r1, [r2, #0]
    8ab4:	4644      	mov	r4, r8
    8ab6:	e548      	b.n	854a <_svfprintf_r+0x62>
    8ab8:	f898 3000 	ldrb.w	r3, [r8]
    8abc:	2b68      	cmp	r3, #104	; 0x68
    8abe:	bf03      	ittte	eq
    8ac0:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    8ac4:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    8ac8:	f108 0801 	addeq.w	r8, r8, #1
    8acc:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    8ad0:	e566      	b.n	85a0 <_svfprintf_r+0xb8>
    8ad2:	f898 3000 	ldrb.w	r3, [r8]
    8ad6:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
    8ada:	e561      	b.n	85a0 <_svfprintf_r+0xb8>
    8adc:	f898 3000 	ldrb.w	r3, [r8]
    8ae0:	2b6c      	cmp	r3, #108	; 0x6c
    8ae2:	bf03      	ittte	eq
    8ae4:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    8ae8:	f04b 0b20 	orreq.w	fp, fp, #32
    8aec:	f108 0801 	addeq.w	r8, r8, #1
    8af0:	f04b 0b10 	orrne.w	fp, fp, #16
    8af4:	e554      	b.n	85a0 <_svfprintf_r+0xb8>
    8af6:	930a      	str	r3, [sp, #40]	; 0x28
    8af8:	f04b 0b10 	orr.w	fp, fp, #16
    8afc:	f01b 0120 	ands.w	r1, fp, #32
    8b00:	f000 8350 	beq.w	91a4 <_svfprintf_r+0xcbc>
    8b04:	9b08      	ldr	r3, [sp, #32]
    8b06:	3307      	adds	r3, #7
    8b08:	f023 0307 	bic.w	r3, r3, #7
    8b0c:	6859      	ldr	r1, [r3, #4]
    8b0e:	f853 2b08 	ldr.w	r2, [r3], #8
    8b12:	9308      	str	r3, [sp, #32]
    8b14:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    8b18:	2300      	movs	r3, #0
    8b1a:	e798      	b.n	8a4e <_svfprintf_r+0x566>
    8b1c:	930a      	str	r3, [sp, #40]	; 0x28
    8b1e:	f04b 0510 	orr.w	r5, fp, #16
    8b22:	f015 0120 	ands.w	r1, r5, #32
    8b26:	f000 832e 	beq.w	9186 <_svfprintf_r+0xc9e>
    8b2a:	9b08      	ldr	r3, [sp, #32]
    8b2c:	3307      	adds	r3, #7
    8b2e:	f023 0307 	bic.w	r3, r3, #7
    8b32:	6859      	ldr	r1, [r3, #4]
    8b34:	f853 2b08 	ldr.w	r2, [r3], #8
    8b38:	9308      	str	r3, [sp, #32]
    8b3a:	2301      	movs	r3, #1
    8b3c:	e787      	b.n	8a4e <_svfprintf_r+0x566>
    8b3e:	bf00      	nop
    8b40:	7fefffff 	.word	0x7fefffff
    8b44:	0000d9fc 	.word	0x0000d9fc
    8b48:	0000da00 	.word	0x0000da00
    8b4c:	0000da0c 	.word	0x0000da0c
    8b50:	f898 3000 	ldrb.w	r3, [r8]
    8b54:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    8b58:	e522      	b.n	85a0 <_svfprintf_r+0xb8>
    8b5a:	4641      	mov	r1, r8
    8b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
    8b60:	2b2a      	cmp	r3, #42	; 0x2a
    8b62:	f001 8277 	beq.w	a054 <_svfprintf_r+0x1b6c>
    8b66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8b6a:	2a09      	cmp	r2, #9
    8b6c:	4688      	mov	r8, r1
    8b6e:	bf98      	it	ls
    8b70:	2100      	movls	r1, #0
    8b72:	f201 818c 	bhi.w	9e8e <_svfprintf_r+0x19a6>
    8b76:	f818 3b01 	ldrb.w	r3, [r8], #1
    8b7a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8b7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    8b82:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8b86:	2a09      	cmp	r2, #9
    8b88:	d9f5      	bls.n	8b76 <_svfprintf_r+0x68e>
    8b8a:	9103      	str	r1, [sp, #12]
    8b8c:	e50a      	b.n	85a4 <_svfprintf_r+0xbc>
    8b8e:	f898 3000 	ldrb.w	r3, [r8]
    8b92:	f04b 0b01 	orr.w	fp, fp, #1
    8b96:	e503      	b.n	85a0 <_svfprintf_r+0xb8>
    8b98:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	f47f ad84 	bne.w	86aa <_svfprintf_r+0x1c2>
    8ba2:	f898 3000 	ldrb.w	r3, [r8]
    8ba6:	f88d 606f 	strb.w	r6, [sp, #111]	; 0x6f
    8baa:	e4f9      	b.n	85a0 <_svfprintf_r+0xb8>
    8bac:	465d      	mov	r5, fp
    8bae:	2b01      	cmp	r3, #1
    8bb0:	f000 81ab 	beq.w	8f0a <_svfprintf_r+0xa22>
    8bb4:	2b02      	cmp	r3, #2
    8bb6:	ac52      	add	r4, sp, #328	; 0x148
    8bb8:	d11f      	bne.n	8bfa <_svfprintf_r+0x712>
    8bba:	9812      	ldr	r0, [sp, #72]	; 0x48
    8bbc:	f002 030f 	and.w	r3, r2, #15
    8bc0:	0912      	lsrs	r2, r2, #4
    8bc2:	5cc3      	ldrb	r3, [r0, r3]
    8bc4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    8bc8:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    8bcc:	0909      	lsrs	r1, r1, #4
    8bce:	ea52 0301 	orrs.w	r3, r2, r1
    8bd2:	d1f3      	bne.n	8bbc <_svfprintf_r+0x6d4>
    8bd4:	ab52      	add	r3, sp, #328	; 0x148
    8bd6:	1b1b      	subs	r3, r3, r4
    8bd8:	46ab      	mov	fp, r5
    8bda:	9305      	str	r3, [sp, #20]
    8bdc:	9905      	ldr	r1, [sp, #20]
    8bde:	9803      	ldr	r0, [sp, #12]
    8be0:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    8be4:	4281      	cmp	r1, r0
    8be6:	f04f 0300 	mov.w	r3, #0
    8bea:	bfb8      	it	lt
    8bec:	4601      	movlt	r1, r0
    8bee:	9307      	str	r3, [sp, #28]
    8bf0:	9102      	str	r1, [sp, #8]
    8bf2:	930c      	str	r3, [sp, #48]	; 0x30
    8bf4:	9310      	str	r3, [sp, #64]	; 0x40
    8bf6:	930b      	str	r3, [sp, #44]	; 0x2c
    8bf8:	e669      	b.n	88ce <_svfprintf_r+0x3e6>
    8bfa:	f002 0307 	and.w	r3, r2, #7
    8bfe:	08d2      	lsrs	r2, r2, #3
    8c00:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    8c04:	08c9      	lsrs	r1, r1, #3
    8c06:	3330      	adds	r3, #48	; 0x30
    8c08:	ea52 0601 	orrs.w	r6, r2, r1
    8c0c:	4620      	mov	r0, r4
    8c0e:	f804 3d01 	strb.w	r3, [r4, #-1]!
    8c12:	d1f2      	bne.n	8bfa <_svfprintf_r+0x712>
    8c14:	07e9      	lsls	r1, r5, #31
    8c16:	d5dd      	bpl.n	8bd4 <_svfprintf_r+0x6ec>
    8c18:	2b30      	cmp	r3, #48	; 0x30
    8c1a:	d0db      	beq.n	8bd4 <_svfprintf_r+0x6ec>
    8c1c:	2330      	movs	r3, #48	; 0x30
    8c1e:	3802      	subs	r0, #2
    8c20:	f804 3c01 	strb.w	r3, [r4, #-1]
    8c24:	ab52      	add	r3, sp, #328	; 0x148
    8c26:	1a1b      	subs	r3, r3, r0
    8c28:	46ab      	mov	fp, r5
    8c2a:	9305      	str	r3, [sp, #20]
    8c2c:	4604      	mov	r4, r0
    8c2e:	e7d5      	b.n	8bdc <_svfprintf_r+0x6f4>
    8c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8c32:	2b65      	cmp	r3, #101	; 0x65
    8c34:	f340 80dc 	ble.w	8df0 <_svfprintf_r+0x908>
    8c38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    8c3c:	2200      	movs	r2, #0
    8c3e:	2300      	movs	r3, #0
    8c40:	f7fd fe80 	bl	6944 <__aeabi_dcmpeq>
    8c44:	2800      	cmp	r0, #0
    8c46:	f000 81c8 	beq.w	8fda <_svfprintf_r+0xaf2>
    8c4a:	2301      	movs	r3, #1
    8c4c:	f8c9 3004 	str.w	r3, [r9, #4]
    8c50:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8c52:	4abc      	ldr	r2, [pc, #752]	; (8f44 <_svfprintf_r+0xa5c>)
    8c54:	f8c9 2000 	str.w	r2, [r9]
    8c58:	3301      	adds	r3, #1
    8c5a:	3601      	adds	r6, #1
    8c5c:	2b07      	cmp	r3, #7
    8c5e:	9628      	str	r6, [sp, #160]	; 0xa0
    8c60:	9327      	str	r3, [sp, #156]	; 0x9c
    8c62:	f300 8541 	bgt.w	96e8 <_svfprintf_r+0x1200>
    8c66:	f109 0908 	add.w	r9, r9, #8
    8c6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8c6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8c6e:	4293      	cmp	r3, r2
    8c70:	f280 82c9 	bge.w	9206 <_svfprintf_r+0xd1e>
    8c74:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8c76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8c78:	441e      	add	r6, r3
    8c7a:	e9c9 2300 	strd	r2, r3, [r9]
    8c7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8c80:	9628      	str	r6, [sp, #160]	; 0xa0
    8c82:	3301      	adds	r3, #1
    8c84:	2b07      	cmp	r3, #7
    8c86:	9327      	str	r3, [sp, #156]	; 0x9c
    8c88:	f300 8392 	bgt.w	93b0 <_svfprintf_r+0xec8>
    8c8c:	f109 0908 	add.w	r9, r9, #8
    8c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8c92:	1e5c      	subs	r4, r3, #1
    8c94:	2c00      	cmp	r4, #0
    8c96:	f77f adb8 	ble.w	880a <_svfprintf_r+0x322>
    8c9a:	2c10      	cmp	r4, #16
    8c9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8c9e:	4daa      	ldr	r5, [pc, #680]	; (8f48 <_svfprintf_r+0xa60>)
    8ca0:	f340 855e 	ble.w	9760 <_svfprintf_r+0x1278>
    8ca4:	4632      	mov	r2, r6
    8ca6:	2710      	movs	r7, #16
    8ca8:	ee1a 6a10 	vmov	r6, s20
    8cac:	e005      	b.n	8cba <_svfprintf_r+0x7d2>
    8cae:	f109 0908 	add.w	r9, r9, #8
    8cb2:	3c10      	subs	r4, #16
    8cb4:	2c10      	cmp	r4, #16
    8cb6:	f340 8552 	ble.w	975e <_svfprintf_r+0x1276>
    8cba:	3301      	adds	r3, #1
    8cbc:	3210      	adds	r2, #16
    8cbe:	2b07      	cmp	r3, #7
    8cc0:	e9c9 5700 	strd	r5, r7, [r9]
    8cc4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    8cc8:	ddf1      	ble.n	8cae <_svfprintf_r+0x7c6>
    8cca:	aa26      	add	r2, sp, #152	; 0x98
    8ccc:	4631      	mov	r1, r6
    8cce:	4650      	mov	r0, sl
    8cd0:	f002 fcde 	bl	b690 <__ssprint_r>
    8cd4:	2800      	cmp	r0, #0
    8cd6:	f040 8082 	bne.w	8dde <_svfprintf_r+0x8f6>
    8cda:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    8cde:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8ce2:	e7e6      	b.n	8cb2 <_svfprintf_r+0x7ca>
    8ce4:	9b06      	ldr	r3, [sp, #24]
    8ce6:	9a02      	ldr	r2, [sp, #8]
    8ce8:	1a9f      	subs	r7, r3, r2
    8cea:	2f00      	cmp	r7, #0
    8cec:	f77f ad74 	ble.w	87d8 <_svfprintf_r+0x2f0>
    8cf0:	2f10      	cmp	r7, #16
    8cf2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8cf4:	4d94      	ldr	r5, [pc, #592]	; (8f48 <_svfprintf_r+0xa60>)
    8cf6:	dd22      	ble.n	8d3e <_svfprintf_r+0x856>
    8cf8:	4632      	mov	r2, r6
    8cfa:	ee1a 6a10 	vmov	r6, s20
    8cfe:	e004      	b.n	8d0a <_svfprintf_r+0x822>
    8d00:	3f10      	subs	r7, #16
    8d02:	2f10      	cmp	r7, #16
    8d04:	f109 0908 	add.w	r9, r9, #8
    8d08:	dd18      	ble.n	8d3c <_svfprintf_r+0x854>
    8d0a:	3301      	adds	r3, #1
    8d0c:	3210      	adds	r2, #16
    8d0e:	2110      	movs	r1, #16
    8d10:	2b07      	cmp	r3, #7
    8d12:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    8d16:	f8c9 5000 	str.w	r5, [r9]
    8d1a:	f8c9 1004 	str.w	r1, [r9, #4]
    8d1e:	ddef      	ble.n	8d00 <_svfprintf_r+0x818>
    8d20:	aa26      	add	r2, sp, #152	; 0x98
    8d22:	4631      	mov	r1, r6
    8d24:	4650      	mov	r0, sl
    8d26:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8d2a:	f002 fcb1 	bl	b690 <__ssprint_r>
    8d2e:	2800      	cmp	r0, #0
    8d30:	d155      	bne.n	8dde <_svfprintf_r+0x8f6>
    8d32:	3f10      	subs	r7, #16
    8d34:	2f10      	cmp	r7, #16
    8d36:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    8d3a:	dce6      	bgt.n	8d0a <_svfprintf_r+0x822>
    8d3c:	4616      	mov	r6, r2
    8d3e:	3301      	adds	r3, #1
    8d40:	443e      	add	r6, r7
    8d42:	2b07      	cmp	r3, #7
    8d44:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    8d48:	f8c9 5000 	str.w	r5, [r9]
    8d4c:	f8c9 7004 	str.w	r7, [r9, #4]
    8d50:	f300 8520 	bgt.w	9794 <_svfprintf_r+0x12ac>
    8d54:	9b03      	ldr	r3, [sp, #12]
    8d56:	9a05      	ldr	r2, [sp, #20]
    8d58:	1a9f      	subs	r7, r3, r2
    8d5a:	2f00      	cmp	r7, #0
    8d5c:	f109 0908 	add.w	r9, r9, #8
    8d60:	f77f ad40 	ble.w	87e4 <_svfprintf_r+0x2fc>
    8d64:	2f10      	cmp	r7, #16
    8d66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8d68:	4d77      	ldr	r5, [pc, #476]	; (8f48 <_svfprintf_r+0xa60>)
    8d6a:	dd21      	ble.n	8db0 <_svfprintf_r+0x8c8>
    8d6c:	4632      	mov	r2, r6
    8d6e:	ee1a 6a10 	vmov	r6, s20
    8d72:	e004      	b.n	8d7e <_svfprintf_r+0x896>
    8d74:	3f10      	subs	r7, #16
    8d76:	2f10      	cmp	r7, #16
    8d78:	f109 0908 	add.w	r9, r9, #8
    8d7c:	dd17      	ble.n	8dae <_svfprintf_r+0x8c6>
    8d7e:	3301      	adds	r3, #1
    8d80:	3210      	adds	r2, #16
    8d82:	2110      	movs	r1, #16
    8d84:	2b07      	cmp	r3, #7
    8d86:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    8d8a:	f8c9 5000 	str.w	r5, [r9]
    8d8e:	f8c9 1004 	str.w	r1, [r9, #4]
    8d92:	ddef      	ble.n	8d74 <_svfprintf_r+0x88c>
    8d94:	aa26      	add	r2, sp, #152	; 0x98
    8d96:	4631      	mov	r1, r6
    8d98:	4650      	mov	r0, sl
    8d9a:	f002 fc79 	bl	b690 <__ssprint_r>
    8d9e:	b9f0      	cbnz	r0, 8dde <_svfprintf_r+0x8f6>
    8da0:	3f10      	subs	r7, #16
    8da2:	2f10      	cmp	r7, #16
    8da4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    8da8:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8dac:	dce7      	bgt.n	8d7e <_svfprintf_r+0x896>
    8dae:	4616      	mov	r6, r2
    8db0:	3301      	adds	r3, #1
    8db2:	443e      	add	r6, r7
    8db4:	2b07      	cmp	r3, #7
    8db6:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    8dba:	f8c9 5000 	str.w	r5, [r9]
    8dbe:	f8c9 7004 	str.w	r7, [r9, #4]
    8dc2:	f300 81d2 	bgt.w	916a <_svfprintf_r+0xc82>
    8dc6:	f109 0908 	add.w	r9, r9, #8
    8dca:	e50b      	b.n	87e4 <_svfprintf_r+0x2fc>
    8dcc:	ee1a 1a10 	vmov	r1, s20
    8dd0:	aa26      	add	r2, sp, #152	; 0x98
    8dd2:	4650      	mov	r0, sl
    8dd4:	f002 fc5c 	bl	b690 <__ssprint_r>
    8dd8:	2800      	cmp	r0, #0
    8dda:	f43f ad2a 	beq.w	8832 <_svfprintf_r+0x34a>
    8dde:	9b07      	ldr	r3, [sp, #28]
    8de0:	2b00      	cmp	r3, #0
    8de2:	f43f ac8c 	beq.w	86fe <_svfprintf_r+0x216>
    8de6:	9907      	ldr	r1, [sp, #28]
    8de8:	4650      	mov	r0, sl
    8dea:	f7fe fe97 	bl	7b1c <_free_r>
    8dee:	e486      	b.n	86fe <_svfprintf_r+0x216>
    8df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8df2:	2b01      	cmp	r3, #1
    8df4:	f340 816f 	ble.w	90d6 <_svfprintf_r+0xbee>
    8df8:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    8dfa:	f8c9 4000 	str.w	r4, [r9]
    8dfe:	2301      	movs	r3, #1
    8e00:	441f      	add	r7, r3
    8e02:	3601      	adds	r6, #1
    8e04:	2f07      	cmp	r7, #7
    8e06:	f8c9 3004 	str.w	r3, [r9, #4]
    8e0a:	9628      	str	r6, [sp, #160]	; 0xa0
    8e0c:	9727      	str	r7, [sp, #156]	; 0x9c
    8e0e:	f300 81de 	bgt.w	91ce <_svfprintf_r+0xce6>
    8e12:	f109 0908 	add.w	r9, r9, #8
    8e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8e1a:	3701      	adds	r7, #1
    8e1c:	441e      	add	r6, r3
    8e1e:	2f07      	cmp	r7, #7
    8e20:	e9c9 2300 	strd	r2, r3, [r9]
    8e24:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    8e28:	f300 81df 	bgt.w	91ea <_svfprintf_r+0xd02>
    8e2c:	f109 0908 	add.w	r9, r9, #8
    8e30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    8e34:	2200      	movs	r2, #0
    8e36:	2300      	movs	r3, #0
    8e38:	f7fd fd84 	bl	6944 <__aeabi_dcmpeq>
    8e3c:	2800      	cmp	r0, #0
    8e3e:	f040 8169 	bne.w	9114 <_svfprintf_r+0xc2c>
    8e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8e44:	3701      	adds	r7, #1
    8e46:	3b01      	subs	r3, #1
    8e48:	3401      	adds	r4, #1
    8e4a:	441e      	add	r6, r3
    8e4c:	2f07      	cmp	r7, #7
    8e4e:	f8c9 4000 	str.w	r4, [r9]
    8e52:	9727      	str	r7, [sp, #156]	; 0x9c
    8e54:	f8c9 3004 	str.w	r3, [r9, #4]
    8e58:	9628      	str	r6, [sp, #160]	; 0xa0
    8e5a:	f300 814d 	bgt.w	90f8 <_svfprintf_r+0xc10>
    8e5e:	f109 0908 	add.w	r9, r9, #8
    8e62:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8e64:	f8c9 3004 	str.w	r3, [r9, #4]
    8e68:	3701      	adds	r7, #1
    8e6a:	441e      	add	r6, r3
    8e6c:	2f07      	cmp	r7, #7
    8e6e:	ab20      	add	r3, sp, #128	; 0x80
    8e70:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    8e74:	f8c9 3000 	str.w	r3, [r9]
    8e78:	f77f acc5 	ble.w	8806 <_svfprintf_r+0x31e>
    8e7c:	ee1a 1a10 	vmov	r1, s20
    8e80:	aa26      	add	r2, sp, #152	; 0x98
    8e82:	4650      	mov	r0, sl
    8e84:	f002 fc04 	bl	b690 <__ssprint_r>
    8e88:	2800      	cmp	r0, #0
    8e8a:	d1a8      	bne.n	8dde <_svfprintf_r+0x8f6>
    8e8c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    8e8e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8e92:	e4ba      	b.n	880a <_svfprintf_r+0x322>
    8e94:	2f10      	cmp	r7, #16
    8e96:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
    8e9a:	4d2c      	ldr	r5, [pc, #176]	; (8f4c <_svfprintf_r+0xa64>)
    8e9c:	dd24      	ble.n	8ee8 <_svfprintf_r+0xa00>
    8e9e:	9318      	str	r3, [sp, #96]	; 0x60
    8ea0:	9419      	str	r4, [sp, #100]	; 0x64
    8ea2:	2610      	movs	r6, #16
    8ea4:	ee1a 4a10 	vmov	r4, s20
    8ea8:	460b      	mov	r3, r1
    8eaa:	e004      	b.n	8eb6 <_svfprintf_r+0x9ce>
    8eac:	3f10      	subs	r7, #16
    8eae:	2f10      	cmp	r7, #16
    8eb0:	f109 0908 	add.w	r9, r9, #8
    8eb4:	dd15      	ble.n	8ee2 <_svfprintf_r+0x9fa>
    8eb6:	3201      	adds	r2, #1
    8eb8:	3310      	adds	r3, #16
    8eba:	2a07      	cmp	r2, #7
    8ebc:	e9c9 5600 	strd	r5, r6, [r9]
    8ec0:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
    8ec4:	ddf2      	ble.n	8eac <_svfprintf_r+0x9c4>
    8ec6:	aa26      	add	r2, sp, #152	; 0x98
    8ec8:	4621      	mov	r1, r4
    8eca:	4650      	mov	r0, sl
    8ecc:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8ed0:	f002 fbde 	bl	b690 <__ssprint_r>
    8ed4:	2800      	cmp	r0, #0
    8ed6:	d182      	bne.n	8dde <_svfprintf_r+0x8f6>
    8ed8:	3f10      	subs	r7, #16
    8eda:	2f10      	cmp	r7, #16
    8edc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
    8ee0:	dce9      	bgt.n	8eb6 <_svfprintf_r+0x9ce>
    8ee2:	4619      	mov	r1, r3
    8ee4:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
    8ee8:	3201      	adds	r2, #1
    8eea:	187e      	adds	r6, r7, r1
    8eec:	2a07      	cmp	r2, #7
    8eee:	e9cd 2627 	strd	r2, r6, [sp, #156]	; 0x9c
    8ef2:	f8c9 5000 	str.w	r5, [r9]
    8ef6:	f8c9 7004 	str.w	r7, [r9, #4]
    8efa:	f300 83a3 	bgt.w	9644 <_svfprintf_r+0x115c>
    8efe:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    8f02:	f109 0908 	add.w	r9, r9, #8
    8f06:	e43f      	b.n	8788 <_svfprintf_r+0x2a0>
    8f08:	465d      	mov	r5, fp
    8f0a:	2a0a      	cmp	r2, #10
    8f0c:	f171 0300 	sbcs.w	r3, r1, #0
    8f10:	f080 8334 	bcs.w	957c <_svfprintf_r+0x1094>
    8f14:	3230      	adds	r2, #48	; 0x30
    8f16:	2301      	movs	r3, #1
    8f18:	f88d 2147 	strb.w	r2, [sp, #327]	; 0x147
    8f1c:	46ab      	mov	fp, r5
    8f1e:	9305      	str	r3, [sp, #20]
    8f20:	f20d 1447 	addw	r4, sp, #327	; 0x147
    8f24:	e65a      	b.n	8bdc <_svfprintf_r+0x6f4>
    8f26:	ee1a 1a10 	vmov	r1, s20
    8f2a:	aa26      	add	r2, sp, #152	; 0x98
    8f2c:	4650      	mov	r0, sl
    8f2e:	9318      	str	r3, [sp, #96]	; 0x60
    8f30:	f002 fbae 	bl	b690 <__ssprint_r>
    8f34:	2800      	cmp	r0, #0
    8f36:	f47f af52 	bne.w	8dde <_svfprintf_r+0x8f6>
    8f3a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    8f3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8f3e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8f42:	e433      	b.n	87ac <_svfprintf_r+0x2c4>
    8f44:	0000da3c 	.word	0x0000da3c
    8f48:	0000da50 	.word	0x0000da50
    8f4c:	0000da40 	.word	0x0000da40
    8f50:	ee1a 1a10 	vmov	r1, s20
    8f54:	aa26      	add	r2, sp, #152	; 0x98
    8f56:	4650      	mov	r0, sl
    8f58:	f002 fb9a 	bl	b690 <__ssprint_r>
    8f5c:	2800      	cmp	r0, #0
    8f5e:	f47f af3e 	bne.w	8dde <_svfprintf_r+0x8f6>
    8f62:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    8f64:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8f68:	e432      	b.n	87d0 <_svfprintf_r+0x2e8>
    8f6a:	2c10      	cmp	r4, #16
    8f6c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8f6e:	4dbe      	ldr	r5, [pc, #760]	; (9268 <_svfprintf_r+0xd80>)
    8f70:	dd1f      	ble.n	8fb2 <_svfprintf_r+0xaca>
    8f72:	ee1a ba10 	vmov	fp, s20
    8f76:	2710      	movs	r7, #16
    8f78:	e004      	b.n	8f84 <_svfprintf_r+0xa9c>
    8f7a:	3c10      	subs	r4, #16
    8f7c:	2c10      	cmp	r4, #16
    8f7e:	f109 0908 	add.w	r9, r9, #8
    8f82:	dd16      	ble.n	8fb2 <_svfprintf_r+0xaca>
    8f84:	3301      	adds	r3, #1
    8f86:	3610      	adds	r6, #16
    8f88:	2b07      	cmp	r3, #7
    8f8a:	e9c9 5700 	strd	r5, r7, [r9]
    8f8e:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    8f92:	ddf2      	ble.n	8f7a <_svfprintf_r+0xa92>
    8f94:	aa26      	add	r2, sp, #152	; 0x98
    8f96:	4659      	mov	r1, fp
    8f98:	4650      	mov	r0, sl
    8f9a:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8f9e:	f002 fb77 	bl	b690 <__ssprint_r>
    8fa2:	2800      	cmp	r0, #0
    8fa4:	f47f af1b 	bne.w	8dde <_svfprintf_r+0x8f6>
    8fa8:	3c10      	subs	r4, #16
    8faa:	2c10      	cmp	r4, #16
    8fac:	e9dd 3627 	ldrd	r3, r6, [sp, #156]	; 0x9c
    8fb0:	dce8      	bgt.n	8f84 <_svfprintf_r+0xa9c>
    8fb2:	3301      	adds	r3, #1
    8fb4:	4426      	add	r6, r4
    8fb6:	2b07      	cmp	r3, #7
    8fb8:	e9c9 5400 	strd	r5, r4, [r9]
    8fbc:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    8fc0:	f77f ac2c 	ble.w	881c <_svfprintf_r+0x334>
    8fc4:	ee1a 1a10 	vmov	r1, s20
    8fc8:	aa26      	add	r2, sp, #152	; 0x98
    8fca:	4650      	mov	r0, sl
    8fcc:	f002 fb60 	bl	b690 <__ssprint_r>
    8fd0:	2800      	cmp	r0, #0
    8fd2:	f47f af04 	bne.w	8dde <_svfprintf_r+0x8f6>
    8fd6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    8fd8:	e420      	b.n	881c <_svfprintf_r+0x334>
    8fda:	991d      	ldr	r1, [sp, #116]	; 0x74
    8fdc:	2900      	cmp	r1, #0
    8fde:	f340 8343 	ble.w	9668 <_svfprintf_r+0x1180>
    8fe2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8fe6:	429d      	cmp	r5, r3
    8fe8:	bfa8      	it	ge
    8fea:	461d      	movge	r5, r3
    8fec:	2d00      	cmp	r5, #0
    8fee:	dd0b      	ble.n	9008 <_svfprintf_r+0xb20>
    8ff0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8ff2:	3301      	adds	r3, #1
    8ff4:	442e      	add	r6, r5
    8ff6:	2b07      	cmp	r3, #7
    8ff8:	e9c9 4500 	strd	r4, r5, [r9]
    8ffc:	9628      	str	r6, [sp, #160]	; 0xa0
    8ffe:	9327      	str	r3, [sp, #156]	; 0x9c
    9000:	f300 86fc 	bgt.w	9dfc <_svfprintf_r+0x1914>
    9004:	f109 0908 	add.w	r9, r9, #8
    9008:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    900a:	2d00      	cmp	r5, #0
    900c:	bfa8      	it	ge
    900e:	1b7f      	subge	r7, r7, r5
    9010:	2f00      	cmp	r7, #0
    9012:	f300 81f8 	bgt.w	9406 <_svfprintf_r+0xf1e>
    9016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9018:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    901c:	4423      	add	r3, r4
    901e:	9305      	str	r3, [sp, #20]
    9020:	f040 8218 	bne.w	9454 <_svfprintf_r+0xf6c>
    9024:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9028:	4293      	cmp	r3, r2
    902a:	db03      	blt.n	9034 <_svfprintf_r+0xb4c>
    902c:	f01b 0f01 	tst.w	fp, #1
    9030:	f000 84bc 	beq.w	99ac <_svfprintf_r+0x14c4>
    9034:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9036:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9038:	4416      	add	r6, r2
    903a:	e9c9 1200 	strd	r1, r2, [r9]
    903e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    9040:	9628      	str	r6, [sp, #160]	; 0xa0
    9042:	3201      	adds	r2, #1
    9044:	2a07      	cmp	r2, #7
    9046:	9227      	str	r2, [sp, #156]	; 0x9c
    9048:	f300 86e6 	bgt.w	9e18 <_svfprintf_r+0x1930>
    904c:	f109 0908 	add.w	r9, r9, #8
    9050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9052:	18a5      	adds	r5, r4, r2
    9054:	1ad4      	subs	r4, r2, r3
    9056:	9b05      	ldr	r3, [sp, #20]
    9058:	1aed      	subs	r5, r5, r3
    905a:	42a5      	cmp	r5, r4
    905c:	bfa8      	it	ge
    905e:	4625      	movge	r5, r4
    9060:	2d00      	cmp	r5, #0
    9062:	dd0d      	ble.n	9080 <_svfprintf_r+0xb98>
    9064:	f8c9 3000 	str.w	r3, [r9]
    9068:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    906a:	f8c9 5004 	str.w	r5, [r9, #4]
    906e:	3301      	adds	r3, #1
    9070:	442e      	add	r6, r5
    9072:	2b07      	cmp	r3, #7
    9074:	9628      	str	r6, [sp, #160]	; 0xa0
    9076:	9327      	str	r3, [sp, #156]	; 0x9c
    9078:	f300 86f8 	bgt.w	9e6c <_svfprintf_r+0x1984>
    907c:	f109 0908 	add.w	r9, r9, #8
    9080:	2d00      	cmp	r5, #0
    9082:	bfa8      	it	ge
    9084:	1b64      	subge	r4, r4, r5
    9086:	2c00      	cmp	r4, #0
    9088:	f77f abbf 	ble.w	880a <_svfprintf_r+0x322>
    908c:	2c10      	cmp	r4, #16
    908e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9090:	4d76      	ldr	r5, [pc, #472]	; (926c <_svfprintf_r+0xd84>)
    9092:	f340 8365 	ble.w	9760 <_svfprintf_r+0x1278>
    9096:	4632      	mov	r2, r6
    9098:	2710      	movs	r7, #16
    909a:	ee1a 6a10 	vmov	r6, s20
    909e:	e005      	b.n	90ac <_svfprintf_r+0xbc4>
    90a0:	f109 0908 	add.w	r9, r9, #8
    90a4:	3c10      	subs	r4, #16
    90a6:	2c10      	cmp	r4, #16
    90a8:	f340 8359 	ble.w	975e <_svfprintf_r+0x1276>
    90ac:	3301      	adds	r3, #1
    90ae:	3210      	adds	r2, #16
    90b0:	2b07      	cmp	r3, #7
    90b2:	e9c9 5700 	strd	r5, r7, [r9]
    90b6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    90ba:	ddf1      	ble.n	90a0 <_svfprintf_r+0xbb8>
    90bc:	aa26      	add	r2, sp, #152	; 0x98
    90be:	4631      	mov	r1, r6
    90c0:	4650      	mov	r0, sl
    90c2:	f002 fae5 	bl	b690 <__ssprint_r>
    90c6:	2800      	cmp	r0, #0
    90c8:	f47f ae89 	bne.w	8dde <_svfprintf_r+0x8f6>
    90cc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    90d0:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    90d4:	e7e6      	b.n	90a4 <_svfprintf_r+0xbbc>
    90d6:	f01b 0f01 	tst.w	fp, #1
    90da:	f47f ae8d 	bne.w	8df8 <_svfprintf_r+0x910>
    90de:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    90e0:	f8c9 4000 	str.w	r4, [r9]
    90e4:	2301      	movs	r3, #1
    90e6:	441f      	add	r7, r3
    90e8:	3601      	adds	r6, #1
    90ea:	2f07      	cmp	r7, #7
    90ec:	f8c9 3004 	str.w	r3, [r9, #4]
    90f0:	9628      	str	r6, [sp, #160]	; 0xa0
    90f2:	9727      	str	r7, [sp, #156]	; 0x9c
    90f4:	f77f aeb3 	ble.w	8e5e <_svfprintf_r+0x976>
    90f8:	ee1a 1a10 	vmov	r1, s20
    90fc:	aa26      	add	r2, sp, #152	; 0x98
    90fe:	4650      	mov	r0, sl
    9100:	f002 fac6 	bl	b690 <__ssprint_r>
    9104:	2800      	cmp	r0, #0
    9106:	f47f ae6a 	bne.w	8dde <_svfprintf_r+0x8f6>
    910a:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    910e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9112:	e6a6      	b.n	8e62 <_svfprintf_r+0x97a>
    9114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9116:	1e5c      	subs	r4, r3, #1
    9118:	2c00      	cmp	r4, #0
    911a:	f77f aea2 	ble.w	8e62 <_svfprintf_r+0x97a>
    911e:	2c10      	cmp	r4, #16
    9120:	4d52      	ldr	r5, [pc, #328]	; (926c <_svfprintf_r+0xd84>)
    9122:	f340 8356 	ble.w	97d2 <_svfprintf_r+0x12ea>
    9126:	f8cd 800c 	str.w	r8, [sp, #12]
    912a:	2310      	movs	r3, #16
    912c:	ee1a 8a10 	vmov	r8, s20
    9130:	e005      	b.n	913e <_svfprintf_r+0xc56>
    9132:	f109 0908 	add.w	r9, r9, #8
    9136:	3c10      	subs	r4, #16
    9138:	2c10      	cmp	r4, #16
    913a:	f340 8348 	ble.w	97ce <_svfprintf_r+0x12e6>
    913e:	3701      	adds	r7, #1
    9140:	3610      	adds	r6, #16
    9142:	2f07      	cmp	r7, #7
    9144:	e9c9 5300 	strd	r5, r3, [r9]
    9148:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    914c:	ddf1      	ble.n	9132 <_svfprintf_r+0xc4a>
    914e:	aa26      	add	r2, sp, #152	; 0x98
    9150:	4641      	mov	r1, r8
    9152:	4650      	mov	r0, sl
    9154:	f002 fa9c 	bl	b690 <__ssprint_r>
    9158:	2800      	cmp	r0, #0
    915a:	f47f ae40 	bne.w	8dde <_svfprintf_r+0x8f6>
    915e:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    9162:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9166:	2310      	movs	r3, #16
    9168:	e7e5      	b.n	9136 <_svfprintf_r+0xc4e>
    916a:	ee1a 1a10 	vmov	r1, s20
    916e:	aa26      	add	r2, sp, #152	; 0x98
    9170:	4650      	mov	r0, sl
    9172:	f002 fa8d 	bl	b690 <__ssprint_r>
    9176:	2800      	cmp	r0, #0
    9178:	f47f ae31 	bne.w	8dde <_svfprintf_r+0x8f6>
    917c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    917e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9182:	f7ff bb2f 	b.w	87e4 <_svfprintf_r+0x2fc>
    9186:	f015 0310 	ands.w	r3, r5, #16
    918a:	d158      	bne.n	923e <_svfprintf_r+0xd56>
    918c:	f015 0240 	ands.w	r2, r5, #64	; 0x40
    9190:	f000 836e 	beq.w	9870 <_svfprintf_r+0x1388>
    9194:	9808      	ldr	r0, [sp, #32]
    9196:	f850 2b04 	ldr.w	r2, [r0], #4
    919a:	9008      	str	r0, [sp, #32]
    919c:	4619      	mov	r1, r3
    919e:	b292      	uxth	r2, r2
    91a0:	2301      	movs	r3, #1
    91a2:	e454      	b.n	8a4e <_svfprintf_r+0x566>
    91a4:	f01b 0310 	ands.w	r3, fp, #16
    91a8:	d144      	bne.n	9234 <_svfprintf_r+0xd4c>
    91aa:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    91ae:	f000 836e 	beq.w	988e <_svfprintf_r+0x13a6>
    91b2:	9808      	ldr	r0, [sp, #32]
    91b4:	f850 2b04 	ldr.w	r2, [r0], #4
    91b8:	9008      	str	r0, [sp, #32]
    91ba:	4619      	mov	r1, r3
    91bc:	b292      	uxth	r2, r2
    91be:	e4a9      	b.n	8b14 <_svfprintf_r+0x62c>
    91c0:	4252      	negs	r2, r2
    91c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    91c6:	465d      	mov	r5, fp
    91c8:	202d      	movs	r0, #45	; 0x2d
    91ca:	2301      	movs	r3, #1
    91cc:	e440      	b.n	8a50 <_svfprintf_r+0x568>
    91ce:	ee1a 1a10 	vmov	r1, s20
    91d2:	aa26      	add	r2, sp, #152	; 0x98
    91d4:	4650      	mov	r0, sl
    91d6:	f002 fa5b 	bl	b690 <__ssprint_r>
    91da:	2800      	cmp	r0, #0
    91dc:	f47f adff 	bne.w	8dde <_svfprintf_r+0x8f6>
    91e0:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    91e4:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    91e8:	e615      	b.n	8e16 <_svfprintf_r+0x92e>
    91ea:	ee1a 1a10 	vmov	r1, s20
    91ee:	aa26      	add	r2, sp, #152	; 0x98
    91f0:	4650      	mov	r0, sl
    91f2:	f002 fa4d 	bl	b690 <__ssprint_r>
    91f6:	2800      	cmp	r0, #0
    91f8:	f47f adf1 	bne.w	8dde <_svfprintf_r+0x8f6>
    91fc:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    9200:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9204:	e614      	b.n	8e30 <_svfprintf_r+0x948>
    9206:	f01b 0f01 	tst.w	fp, #1
    920a:	f43f aafe 	beq.w	880a <_svfprintf_r+0x322>
    920e:	e531      	b.n	8c74 <_svfprintf_r+0x78c>
    9210:	9308      	str	r3, [sp, #32]
    9212:	f898 3000 	ldrb.w	r3, [r8]
    9216:	f7ff b9c3 	b.w	85a0 <_svfprintf_r+0xb8>
    921a:	ac52      	add	r4, sp, #328	; 0x148
    921c:	e4de      	b.n	8bdc <_svfprintf_r+0x6f4>
    921e:	f41b 7f00 	tst.w	fp, #512	; 0x200
    9222:	f040 83cd 	bne.w	99c0 <_svfprintf_r+0x14d8>
    9226:	f853 2b04 	ldr.w	r2, [r3], #4
    922a:	9308      	str	r3, [sp, #32]
    922c:	17d1      	asrs	r1, r2, #31
    922e:	460b      	mov	r3, r1
    9230:	f7ff bbbc 	b.w	89ac <_svfprintf_r+0x4c4>
    9234:	9b08      	ldr	r3, [sp, #32]
    9236:	f853 2b04 	ldr.w	r2, [r3], #4
    923a:	9308      	str	r3, [sp, #32]
    923c:	e46a      	b.n	8b14 <_svfprintf_r+0x62c>
    923e:	9b08      	ldr	r3, [sp, #32]
    9240:	f853 2b04 	ldr.w	r2, [r3], #4
    9244:	9308      	str	r3, [sp, #32]
    9246:	2301      	movs	r3, #1
    9248:	e401      	b.n	8a4e <_svfprintf_r+0x566>
    924a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    924c:	2b00      	cmp	r3, #0
    924e:	f43f aa2c 	beq.w	86aa <_svfprintf_r+0x1c2>
    9252:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9254:	781b      	ldrb	r3, [r3, #0]
    9256:	2b00      	cmp	r3, #0
    9258:	f43f aa27 	beq.w	86aa <_svfprintf_r+0x1c2>
    925c:	f898 3000 	ldrb.w	r3, [r8]
    9260:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    9264:	f7ff b99c 	b.w	85a0 <_svfprintf_r+0xb8>
    9268:	0000da40 	.word	0x0000da40
    926c:	0000da50 	.word	0x0000da50
    9270:	9b08      	ldr	r3, [sp, #32]
    9272:	9804      	ldr	r0, [sp, #16]
    9274:	f853 1b04 	ldr.w	r1, [r3], #4
    9278:	9308      	str	r3, [sp, #32]
    927a:	17c2      	asrs	r2, r0, #31
    927c:	e9c1 0200 	strd	r0, r2, [r1]
    9280:	4644      	mov	r4, r8
    9282:	f7ff b962 	b.w	854a <_svfprintf_r+0x62>
    9286:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    928a:	4602      	mov	r2, r0
    928c:	460b      	mov	r3, r1
    928e:	f7fd fb8b 	bl	69a8 <__aeabi_dcmpun>
    9292:	2800      	cmp	r0, #0
    9294:	f040 86b2 	bne.w	9ffc <_svfprintf_r+0x1b14>
    9298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    929a:	2b61      	cmp	r3, #97	; 0x61
    929c:	f000 8566 	beq.w	9d6c <_svfprintf_r+0x1884>
    92a0:	2b41      	cmp	r3, #65	; 0x41
    92a2:	f000 85c8 	beq.w	9e36 <_svfprintf_r+0x194e>
    92a6:	9b03      	ldr	r3, [sp, #12]
    92a8:	3301      	adds	r3, #1
    92aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    92ac:	f023 0320 	bic.w	r3, r3, #32
    92b0:	9302      	str	r3, [sp, #8]
    92b2:	f000 8466 	beq.w	9b82 <_svfprintf_r+0x169a>
    92b6:	2b47      	cmp	r3, #71	; 0x47
    92b8:	d104      	bne.n	92c4 <_svfprintf_r+0xddc>
    92ba:	9b03      	ldr	r3, [sp, #12]
    92bc:	2b00      	cmp	r3, #0
    92be:	bf08      	it	eq
    92c0:	2301      	moveq	r3, #1
    92c2:	9303      	str	r3, [sp, #12]
    92c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    92c8:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
    92cc:	2900      	cmp	r1, #0
    92ce:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    92d2:	f04f 0300 	mov.w	r3, #0
    92d6:	4693      	mov	fp, r2
    92d8:	f2c0 8584 	blt.w	9de4 <_svfprintf_r+0x18fc>
    92dc:	ec41 0b18 	vmov	d8, r0, r1
    92e0:	9318      	str	r3, [sp, #96]	; 0x60
    92e2:	9307      	str	r3, [sp, #28]
    92e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    92e6:	3b41      	subs	r3, #65	; 0x41
    92e8:	2b25      	cmp	r3, #37	; 0x25
    92ea:	f200 8379 	bhi.w	99e0 <_svfprintf_r+0x14f8>
    92ee:	e8df f013 	tbh	[pc, r3, lsl #1]
    92f2:	0453      	.short	0x0453
    92f4:	03770377 	.word	0x03770377
    92f8:	044c0377 	.word	0x044c0377
    92fc:	03770450 	.word	0x03770450
    9300:	03770377 	.word	0x03770377
    9304:	03770377 	.word	0x03770377
    9308:	03770377 	.word	0x03770377
    930c:	03770377 	.word	0x03770377
    9310:	03770377 	.word	0x03770377
    9314:	03770377 	.word	0x03770377
    9318:	03770377 	.word	0x03770377
    931c:	03770377 	.word	0x03770377
    9320:	03770377 	.word	0x03770377
    9324:	03770377 	.word	0x03770377
    9328:	03770377 	.word	0x03770377
    932c:	03770377 	.word	0x03770377
    9330:	03770377 	.word	0x03770377
    9334:	03770377 	.word	0x03770377
    9338:	044c0377 	.word	0x044c0377
    933c:	0450      	.short	0x0450
    933e:	930a      	str	r3, [sp, #40]	; 0x28
    9340:	465d      	mov	r5, fp
    9342:	f7ff bbee 	b.w	8b22 <_svfprintf_r+0x63a>
    9346:	930a      	str	r3, [sp, #40]	; 0x28
    9348:	4bb9      	ldr	r3, [pc, #740]	; (9630 <_svfprintf_r+0x1148>)
    934a:	9312      	str	r3, [sp, #72]	; 0x48
    934c:	f01b 0120 	ands.w	r1, fp, #32
    9350:	f000 80ff 	beq.w	9552 <_svfprintf_r+0x106a>
    9354:	9b08      	ldr	r3, [sp, #32]
    9356:	3307      	adds	r3, #7
    9358:	f023 0307 	bic.w	r3, r3, #7
    935c:	6859      	ldr	r1, [r3, #4]
    935e:	f853 2b08 	ldr.w	r2, [r3], #8
    9362:	9308      	str	r3, [sp, #32]
    9364:	f01b 0f01 	tst.w	fp, #1
    9368:	d00a      	beq.n	9380 <_svfprintf_r+0xe98>
    936a:	ea52 0301 	orrs.w	r3, r2, r1
    936e:	d007      	beq.n	9380 <_svfprintf_r+0xe98>
    9370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9372:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    9376:	2330      	movs	r3, #48	; 0x30
    9378:	f04b 0b02 	orr.w	fp, fp, #2
    937c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    9380:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    9384:	2302      	movs	r3, #2
    9386:	f7ff bb62 	b.w	8a4e <_svfprintf_r+0x566>
    938a:	930a      	str	r3, [sp, #40]	; 0x28
    938c:	f7ff bbb6 	b.w	8afc <_svfprintf_r+0x614>
    9390:	930a      	str	r3, [sp, #40]	; 0x28
    9392:	4ba8      	ldr	r3, [pc, #672]	; (9634 <_svfprintf_r+0x114c>)
    9394:	9312      	str	r3, [sp, #72]	; 0x48
    9396:	e7d9      	b.n	934c <_svfprintf_r+0xe64>
    9398:	9b08      	ldr	r3, [sp, #32]
    939a:	2101      	movs	r1, #1
    939c:	f853 2b04 	ldr.w	r2, [r3], #4
    93a0:	9102      	str	r1, [sp, #8]
    93a2:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
    93a6:	9308      	str	r3, [sp, #32]
    93a8:	9105      	str	r1, [sp, #20]
    93aa:	ac39      	add	r4, sp, #228	; 0xe4
    93ac:	f7ff bab5 	b.w	891a <_svfprintf_r+0x432>
    93b0:	ee1a 1a10 	vmov	r1, s20
    93b4:	aa26      	add	r2, sp, #152	; 0x98
    93b6:	4650      	mov	r0, sl
    93b8:	f002 f96a 	bl	b690 <__ssprint_r>
    93bc:	2800      	cmp	r0, #0
    93be:	f47f ad0e 	bne.w	8dde <_svfprintf_r+0x8f6>
    93c2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    93c4:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    93c8:	e462      	b.n	8c90 <_svfprintf_r+0x7a8>
    93ca:	2140      	movs	r1, #64	; 0x40
    93cc:	4650      	mov	r0, sl
    93ce:	f7fd fb01 	bl	69d4 <_malloc_r>
    93d2:	6020      	str	r0, [r4, #0]
    93d4:	6120      	str	r0, [r4, #16]
    93d6:	2800      	cmp	r0, #0
    93d8:	f000 8662 	beq.w	a0a0 <_svfprintf_r+0x1bb8>
    93dc:	2340      	movs	r3, #64	; 0x40
    93de:	6163      	str	r3, [r4, #20]
    93e0:	f7ff b8a1 	b.w	8526 <_svfprintf_r+0x3e>
    93e4:	9b03      	ldr	r3, [sp, #12]
    93e6:	9407      	str	r4, [sp, #28]
    93e8:	2b06      	cmp	r3, #6
    93ea:	4621      	mov	r1, r4
    93ec:	bf28      	it	cs
    93ee:	2306      	movcs	r3, #6
    93f0:	9403      	str	r4, [sp, #12]
    93f2:	4622      	mov	r2, r4
    93f4:	9302      	str	r3, [sp, #8]
    93f6:	4c90      	ldr	r4, [pc, #576]	; (9638 <_svfprintf_r+0x1150>)
    93f8:	9708      	str	r7, [sp, #32]
    93fa:	9305      	str	r3, [sp, #20]
    93fc:	910c      	str	r1, [sp, #48]	; 0x30
    93fe:	9110      	str	r1, [sp, #64]	; 0x40
    9400:	910b      	str	r1, [sp, #44]	; 0x2c
    9402:	f7ff ba64 	b.w	88ce <_svfprintf_r+0x3e6>
    9406:	2f10      	cmp	r7, #16
    9408:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    940a:	4d8c      	ldr	r5, [pc, #560]	; (963c <_svfprintf_r+0x1154>)
    940c:	f340 824e 	ble.w	98ac <_svfprintf_r+0x13c4>
    9410:	4632      	mov	r2, r6
    9412:	ee1a 6a10 	vmov	r6, s20
    9416:	e005      	b.n	9424 <_svfprintf_r+0xf3c>
    9418:	f109 0908 	add.w	r9, r9, #8
    941c:	3f10      	subs	r7, #16
    941e:	2f10      	cmp	r7, #16
    9420:	f340 8243 	ble.w	98aa <_svfprintf_r+0x13c2>
    9424:	3301      	adds	r3, #1
    9426:	3210      	adds	r2, #16
    9428:	2110      	movs	r1, #16
    942a:	2b07      	cmp	r3, #7
    942c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    9430:	f8c9 5000 	str.w	r5, [r9]
    9434:	f8c9 1004 	str.w	r1, [r9, #4]
    9438:	ddee      	ble.n	9418 <_svfprintf_r+0xf30>
    943a:	aa26      	add	r2, sp, #152	; 0x98
    943c:	4631      	mov	r1, r6
    943e:	4650      	mov	r0, sl
    9440:	f002 f926 	bl	b690 <__ssprint_r>
    9444:	2800      	cmp	r0, #0
    9446:	f47f acca 	bne.w	8dde <_svfprintf_r+0x8f6>
    944a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    944e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9452:	e7e3      	b.n	941c <_svfprintf_r+0xf34>
    9454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9456:	9d05      	ldr	r5, [sp, #20]
    9458:	f8cd b014 	str.w	fp, [sp, #20]
    945c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    9460:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    9464:	18e3      	adds	r3, r4, r3
    9466:	9303      	str	r3, [sp, #12]
    9468:	464a      	mov	r2, r9
    946a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    946c:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    9470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9472:	940a      	str	r4, [sp, #40]	; 0x28
    9474:	ee1a 9a10 	vmov	r9, s20
    9478:	46b4      	mov	ip, r6
    947a:	f1bb 0f00 	cmp.w	fp, #0
    947e:	d030      	beq.n	94e2 <_svfprintf_r+0xffa>
    9480:	bb93      	cbnz	r3, 94e8 <_svfprintf_r+0x1000>
    9482:	3f01      	subs	r7, #1
    9484:	f10b 3bff 	add.w	fp, fp, #4294967295
    9488:	9b16      	ldr	r3, [sp, #88]	; 0x58
    948a:	e9c2 3800 	strd	r3, r8, [r2]
    948e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9490:	3301      	adds	r3, #1
    9492:	44c4      	add	ip, r8
    9494:	2b07      	cmp	r3, #7
    9496:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    949a:	9327      	str	r3, [sp, #156]	; 0x9c
    949c:	dc62      	bgt.n	9564 <_svfprintf_r+0x107c>
    949e:	3208      	adds	r2, #8
    94a0:	9b03      	ldr	r3, [sp, #12]
    94a2:	7838      	ldrb	r0, [r7, #0]
    94a4:	1b5b      	subs	r3, r3, r5
    94a6:	4283      	cmp	r3, r0
    94a8:	bfa8      	it	ge
    94aa:	4603      	movge	r3, r0
    94ac:	2b00      	cmp	r3, #0
    94ae:	461e      	mov	r6, r3
    94b0:	dd0c      	ble.n	94cc <_svfprintf_r+0xfe4>
    94b2:	9827      	ldr	r0, [sp, #156]	; 0x9c
    94b4:	3001      	adds	r0, #1
    94b6:	449c      	add	ip, r3
    94b8:	2807      	cmp	r0, #7
    94ba:	e9c2 5300 	strd	r5, r3, [r2]
    94be:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    94c2:	9027      	str	r0, [sp, #156]	; 0x9c
    94c4:	f300 8159 	bgt.w	977a <_svfprintf_r+0x1292>
    94c8:	7838      	ldrb	r0, [r7, #0]
    94ca:	3208      	adds	r2, #8
    94cc:	2e00      	cmp	r6, #0
    94ce:	bfac      	ite	ge
    94d0:	1b84      	subge	r4, r0, r6
    94d2:	4604      	movlt	r4, r0
    94d4:	2c00      	cmp	r4, #0
    94d6:	dc0b      	bgt.n	94f0 <_svfprintf_r+0x1008>
    94d8:	4405      	add	r5, r0
    94da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    94dc:	f1bb 0f00 	cmp.w	fp, #0
    94e0:	d1ce      	bne.n	9480 <_svfprintf_r+0xf98>
    94e2:	2b00      	cmp	r3, #0
    94e4:	f000 83d4 	beq.w	9c90 <_svfprintf_r+0x17a8>
    94e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    94ea:	3b01      	subs	r3, #1
    94ec:	930c      	str	r3, [sp, #48]	; 0x30
    94ee:	e7cb      	b.n	9488 <_svfprintf_r+0xfa0>
    94f0:	2c10      	cmp	r4, #16
    94f2:	9827      	ldr	r0, [sp, #156]	; 0x9c
    94f4:	dd1f      	ble.n	9536 <_svfprintf_r+0x104e>
    94f6:	2610      	movs	r6, #16
    94f8:	4663      	mov	r3, ip
    94fa:	e004      	b.n	9506 <_svfprintf_r+0x101e>
    94fc:	3c10      	subs	r4, #16
    94fe:	2c10      	cmp	r4, #16
    9500:	f102 0208 	add.w	r2, r2, #8
    9504:	dd16      	ble.n	9534 <_svfprintf_r+0x104c>
    9506:	3001      	adds	r0, #1
    9508:	494c      	ldr	r1, [pc, #304]	; (963c <_svfprintf_r+0x1154>)
    950a:	3310      	adds	r3, #16
    950c:	2807      	cmp	r0, #7
    950e:	e9c2 1600 	strd	r1, r6, [r2]
    9512:	e9cd 0327 	strd	r0, r3, [sp, #156]	; 0x9c
    9516:	ddf1      	ble.n	94fc <_svfprintf_r+0x1014>
    9518:	aa26      	add	r2, sp, #152	; 0x98
    951a:	4649      	mov	r1, r9
    951c:	4650      	mov	r0, sl
    951e:	f002 f8b7 	bl	b690 <__ssprint_r>
    9522:	2800      	cmp	r0, #0
    9524:	f47f ac5b 	bne.w	8dde <_svfprintf_r+0x8f6>
    9528:	3c10      	subs	r4, #16
    952a:	2c10      	cmp	r4, #16
    952c:	e9dd 0327 	ldrd	r0, r3, [sp, #156]	; 0x9c
    9530:	aa29      	add	r2, sp, #164	; 0xa4
    9532:	dce8      	bgt.n	9506 <_svfprintf_r+0x101e>
    9534:	469c      	mov	ip, r3
    9536:	3001      	adds	r0, #1
    9538:	4b40      	ldr	r3, [pc, #256]	; (963c <_svfprintf_r+0x1154>)
    953a:	6054      	str	r4, [r2, #4]
    953c:	44a4      	add	ip, r4
    953e:	2807      	cmp	r0, #7
    9540:	e9cd 0c27 	strd	r0, ip, [sp, #156]	; 0x9c
    9544:	6013      	str	r3, [r2, #0]
    9546:	f300 83fa 	bgt.w	9d3e <_svfprintf_r+0x1856>
    954a:	7838      	ldrb	r0, [r7, #0]
    954c:	3208      	adds	r2, #8
    954e:	4405      	add	r5, r0
    9550:	e7c3      	b.n	94da <_svfprintf_r+0xff2>
    9552:	f01b 0310 	ands.w	r3, fp, #16
    9556:	f000 80bc 	beq.w	96d2 <_svfprintf_r+0x11ea>
    955a:	9b08      	ldr	r3, [sp, #32]
    955c:	f853 2b04 	ldr.w	r2, [r3], #4
    9560:	9308      	str	r3, [sp, #32]
    9562:	e6ff      	b.n	9364 <_svfprintf_r+0xe7c>
    9564:	aa26      	add	r2, sp, #152	; 0x98
    9566:	4649      	mov	r1, r9
    9568:	4650      	mov	r0, sl
    956a:	f002 f891 	bl	b690 <__ssprint_r>
    956e:	2800      	cmp	r0, #0
    9570:	f47f ac35 	bne.w	8dde <_svfprintf_r+0x8f6>
    9574:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
    9578:	aa29      	add	r2, sp, #164	; 0xa4
    957a:	e791      	b.n	94a0 <_svfprintf_r+0xfb8>
    957c:	f405 6080 	and.w	r0, r5, #1024	; 0x400
    9580:	2600      	movs	r6, #0
    9582:	f8cd 8008 	str.w	r8, [sp, #8]
    9586:	9505      	str	r5, [sp, #20]
    9588:	4b2d      	ldr	r3, [pc, #180]	; (9640 <_svfprintf_r+0x1158>)
    958a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
    958e:	ee0a aa90 	vmov	s21, sl
    9592:	ac52      	add	r4, sp, #328	; 0x148
    9594:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
    9598:	46b4      	mov	ip, r6
    959a:	4605      	mov	r5, r0
    959c:	e005      	b.n	95aa <_svfprintf_r+0x10c2>
    959e:	2a0a      	cmp	r2, #10
    95a0:	f171 0100 	sbcs.w	r1, r1, #0
    95a4:	d334      	bcc.n	9610 <_svfprintf_r+0x1128>
    95a6:	4652      	mov	r2, sl
    95a8:	4639      	mov	r1, r7
    95aa:	1850      	adds	r0, r2, r1
    95ac:	f140 0000 	adc.w	r0, r0, #0
    95b0:	fba3 6700 	umull	r6, r7, r3, r0
    95b4:	f027 0603 	bic.w	r6, r7, #3
    95b8:	eb06 0697 	add.w	r6, r6, r7, lsr #2
    95bc:	1b80      	subs	r0, r0, r6
    95be:	1a16      	subs	r6, r2, r0
    95c0:	f161 0e00 	sbc.w	lr, r1, #0
    95c4:	fb0b f706 	mul.w	r7, fp, r6
    95c8:	fb03 770e 	mla	r7, r3, lr, r7
    95cc:	fba6 a603 	umull	sl, r6, r6, r3
    95d0:	4437      	add	r7, r6
    95d2:	f00a 0e01 	and.w	lr, sl, #1
    95d6:	2605      	movs	r6, #5
    95d8:	fbae 6e06 	umull	r6, lr, lr, r6
    95dc:	1830      	adds	r0, r6, r0
    95de:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    95e2:	3030      	adds	r0, #48	; 0x30
    95e4:	f804 0c01 	strb.w	r0, [r4, #-1]
    95e8:	ea4a 7ac7 	orr.w	sl, sl, r7, lsl #31
    95ec:	f10c 0c01 	add.w	ip, ip, #1
    95f0:	3c01      	subs	r4, #1
    95f2:	087f      	lsrs	r7, r7, #1
    95f4:	2d00      	cmp	r5, #0
    95f6:	d0d2      	beq.n	959e <_svfprintf_r+0x10b6>
    95f8:	f898 0000 	ldrb.w	r0, [r8]
    95fc:	4584      	cmp	ip, r0
    95fe:	d1ce      	bne.n	959e <_svfprintf_r+0x10b6>
    9600:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    9604:	d0cb      	beq.n	959e <_svfprintf_r+0x10b6>
    9606:	2a0a      	cmp	r2, #10
    9608:	f171 0100 	sbcs.w	r1, r1, #0
    960c:	f080 815d 	bcs.w	98ca <_svfprintf_r+0x13e2>
    9610:	9d05      	ldr	r5, [sp, #20]
    9612:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    9616:	ab52      	add	r3, sp, #328	; 0x148
    9618:	1b1b      	subs	r3, r3, r4
    961a:	f8dd 8008 	ldr.w	r8, [sp, #8]
    961e:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    9622:	ee1a aa90 	vmov	sl, s21
    9626:	46ab      	mov	fp, r5
    9628:	9305      	str	r3, [sp, #20]
    962a:	f7ff bad7 	b.w	8bdc <_svfprintf_r+0x6f4>
    962e:	bf00      	nop
    9630:	0000da0c 	.word	0x0000da0c
    9634:	0000da20 	.word	0x0000da20
    9638:	0000da34 	.word	0x0000da34
    963c:	0000da50 	.word	0x0000da50
    9640:	cccccccd 	.word	0xcccccccd
    9644:	ee1a 1a10 	vmov	r1, s20
    9648:	aa26      	add	r2, sp, #152	; 0x98
    964a:	4650      	mov	r0, sl
    964c:	9318      	str	r3, [sp, #96]	; 0x60
    964e:	f002 f81f 	bl	b690 <__ssprint_r>
    9652:	2800      	cmp	r0, #0
    9654:	f47f abc3 	bne.w	8dde <_svfprintf_r+0x8f6>
    9658:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    965c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    965e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9660:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9664:	f7ff b890 	b.w	8788 <_svfprintf_r+0x2a0>
    9668:	2301      	movs	r3, #1
    966a:	f8c9 3004 	str.w	r3, [r9, #4]
    966e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9670:	4abe      	ldr	r2, [pc, #760]	; (996c <_svfprintf_r+0x1484>)
    9672:	f8c9 2000 	str.w	r2, [r9]
    9676:	3301      	adds	r3, #1
    9678:	3601      	adds	r6, #1
    967a:	2b07      	cmp	r3, #7
    967c:	9628      	str	r6, [sp, #160]	; 0xa0
    967e:	9327      	str	r3, [sp, #156]	; 0x9c
    9680:	f300 817a 	bgt.w	9978 <_svfprintf_r+0x1490>
    9684:	f109 0908 	add.w	r9, r9, #8
    9688:	2900      	cmp	r1, #0
    968a:	f040 80ae 	bne.w	97ea <_svfprintf_r+0x1302>
    968e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9690:	f00b 0301 	and.w	r3, fp, #1
    9694:	4313      	orrs	r3, r2
    9696:	f43f a8b8 	beq.w	880a <_svfprintf_r+0x322>
    969a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    969c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    969e:	199a      	adds	r2, r3, r6
    96a0:	e9c9 1300 	strd	r1, r3, [r9]
    96a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    96a6:	9228      	str	r2, [sp, #160]	; 0xa0
    96a8:	3301      	adds	r3, #1
    96aa:	2b07      	cmp	r3, #7
    96ac:	9327      	str	r3, [sp, #156]	; 0x9c
    96ae:	f300 8259 	bgt.w	9b64 <_svfprintf_r+0x167c>
    96b2:	f109 0908 	add.w	r9, r9, #8
    96b6:	990d      	ldr	r1, [sp, #52]	; 0x34
    96b8:	f8c9 4000 	str.w	r4, [r9]
    96bc:	3301      	adds	r3, #1
    96be:	188e      	adds	r6, r1, r2
    96c0:	2b07      	cmp	r3, #7
    96c2:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    96c6:	f8c9 1004 	str.w	r1, [r9, #4]
    96ca:	f77f a89c 	ble.w	8806 <_svfprintf_r+0x31e>
    96ce:	f7ff bbd5 	b.w	8e7c <_svfprintf_r+0x994>
    96d2:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    96d6:	f000 80be 	beq.w	9856 <_svfprintf_r+0x136e>
    96da:	9808      	ldr	r0, [sp, #32]
    96dc:	f850 2b04 	ldr.w	r2, [r0], #4
    96e0:	9008      	str	r0, [sp, #32]
    96e2:	4619      	mov	r1, r3
    96e4:	b292      	uxth	r2, r2
    96e6:	e63d      	b.n	9364 <_svfprintf_r+0xe7c>
    96e8:	ee1a 1a10 	vmov	r1, s20
    96ec:	aa26      	add	r2, sp, #152	; 0x98
    96ee:	4650      	mov	r0, sl
    96f0:	f001 ffce 	bl	b690 <__ssprint_r>
    96f4:	2800      	cmp	r0, #0
    96f6:	f47f ab72 	bne.w	8dde <_svfprintf_r+0x8f6>
    96fa:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    96fc:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9700:	f7ff bab3 	b.w	8c6a <_svfprintf_r+0x782>
    9704:	ae24      	add	r6, sp, #144	; 0x90
    9706:	2208      	movs	r2, #8
    9708:	2100      	movs	r1, #0
    970a:	4630      	mov	r0, r6
    970c:	941f      	str	r4, [sp, #124]	; 0x7c
    970e:	f7fe f815 	bl	773c <memset>
    9712:	9b03      	ldr	r3, [sp, #12]
    9714:	1c5a      	adds	r2, r3, #1
    9716:	f000 80e8 	beq.w	98ea <_svfprintf_r+0x1402>
    971a:	2500      	movs	r5, #0
    971c:	f8cd 8008 	str.w	r8, [sp, #8]
    9720:	f8cd b01c 	str.w	fp, [sp, #28]
    9724:	46a8      	mov	r8, r5
    9726:	469b      	mov	fp, r3
    9728:	e00c      	b.n	9744 <_svfprintf_r+0x125c>
    972a:	a939      	add	r1, sp, #228	; 0xe4
    972c:	4650      	mov	r0, sl
    972e:	f001 ff69 	bl	b604 <_wcrtomb_r>
    9732:	1c43      	adds	r3, r0, #1
    9734:	4440      	add	r0, r8
    9736:	f000 840e 	beq.w	9f56 <_svfprintf_r+0x1a6e>
    973a:	4558      	cmp	r0, fp
    973c:	dc08      	bgt.n	9750 <_svfprintf_r+0x1268>
    973e:	f000 841a 	beq.w	9f76 <_svfprintf_r+0x1a8e>
    9742:	4680      	mov	r8, r0
    9744:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9746:	5952      	ldr	r2, [r2, r5]
    9748:	4633      	mov	r3, r6
    974a:	3504      	adds	r5, #4
    974c:	2a00      	cmp	r2, #0
    974e:	d1ec      	bne.n	972a <_svfprintf_r+0x1242>
    9750:	f8cd 8014 	str.w	r8, [sp, #20]
    9754:	f8dd b01c 	ldr.w	fp, [sp, #28]
    9758:	f8dd 8008 	ldr.w	r8, [sp, #8]
    975c:	e0d2      	b.n	9904 <_svfprintf_r+0x141c>
    975e:	4616      	mov	r6, r2
    9760:	3301      	adds	r3, #1
    9762:	4426      	add	r6, r4
    9764:	2b07      	cmp	r3, #7
    9766:	f8c9 5000 	str.w	r5, [r9]
    976a:	f8c9 4004 	str.w	r4, [r9, #4]
    976e:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    9772:	f77f a848 	ble.w	8806 <_svfprintf_r+0x31e>
    9776:	f7ff bb81 	b.w	8e7c <_svfprintf_r+0x994>
    977a:	aa26      	add	r2, sp, #152	; 0x98
    977c:	4649      	mov	r1, r9
    977e:	4650      	mov	r0, sl
    9780:	f001 ff86 	bl	b690 <__ssprint_r>
    9784:	2800      	cmp	r0, #0
    9786:	f47f ab2a 	bne.w	8dde <_svfprintf_r+0x8f6>
    978a:	7838      	ldrb	r0, [r7, #0]
    978c:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
    9790:	aa29      	add	r2, sp, #164	; 0xa4
    9792:	e69b      	b.n	94cc <_svfprintf_r+0xfe4>
    9794:	ee1a 1a10 	vmov	r1, s20
    9798:	aa26      	add	r2, sp, #152	; 0x98
    979a:	4650      	mov	r0, sl
    979c:	f001 ff78 	bl	b690 <__ssprint_r>
    97a0:	2800      	cmp	r0, #0
    97a2:	f47f ab1c 	bne.w	8dde <_svfprintf_r+0x8f6>
    97a6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    97a8:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    97ac:	f7ff b814 	b.w	87d8 <_svfprintf_r+0x2f0>
    97b0:	2b01      	cmp	r3, #1
    97b2:	465d      	mov	r5, fp
    97b4:	f47f a9fe 	bne.w	8bb4 <_svfprintf_r+0x6cc>
    97b8:	f7ff bbac 	b.w	8f14 <_svfprintf_r+0xa2c>
    97bc:	9b08      	ldr	r3, [sp, #32]
    97be:	9904      	ldr	r1, [sp, #16]
    97c0:	f853 2b04 	ldr.w	r2, [r3], #4
    97c4:	4644      	mov	r4, r8
    97c6:	6011      	str	r1, [r2, #0]
    97c8:	9308      	str	r3, [sp, #32]
    97ca:	f7fe bebe 	b.w	854a <_svfprintf_r+0x62>
    97ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
    97d2:	f8c9 5000 	str.w	r5, [r9]
    97d6:	3701      	adds	r7, #1
    97d8:	4426      	add	r6, r4
    97da:	2f07      	cmp	r7, #7
    97dc:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    97e0:	f8c9 4004 	str.w	r4, [r9, #4]
    97e4:	f77f ab3b 	ble.w	8e5e <_svfprintf_r+0x976>
    97e8:	e486      	b.n	90f8 <_svfprintf_r+0xc10>
    97ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    97ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    97ee:	199a      	adds	r2, r3, r6
    97f0:	e9c9 0300 	strd	r0, r3, [r9]
    97f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    97f6:	9228      	str	r2, [sp, #160]	; 0xa0
    97f8:	3301      	adds	r3, #1
    97fa:	2b07      	cmp	r3, #7
    97fc:	9327      	str	r3, [sp, #156]	; 0x9c
    97fe:	f300 81b1 	bgt.w	9b64 <_svfprintf_r+0x167c>
    9802:	f109 0908 	add.w	r9, r9, #8
    9806:	2900      	cmp	r1, #0
    9808:	f6bf af55 	bge.w	96b6 <_svfprintf_r+0x11ce>
    980c:	424f      	negs	r7, r1
    980e:	3110      	adds	r1, #16
    9810:	4d57      	ldr	r5, [pc, #348]	; (9970 <_svfprintf_r+0x1488>)
    9812:	f280 836a 	bge.w	9eea <_svfprintf_r+0x1a02>
    9816:	ee1a 1a10 	vmov	r1, s20
    981a:	2610      	movs	r6, #16
    981c:	e005      	b.n	982a <_svfprintf_r+0x1342>
    981e:	f109 0908 	add.w	r9, r9, #8
    9822:	3f10      	subs	r7, #16
    9824:	2f10      	cmp	r7, #16
    9826:	f340 8360 	ble.w	9eea <_svfprintf_r+0x1a02>
    982a:	3301      	adds	r3, #1
    982c:	3210      	adds	r2, #16
    982e:	2b07      	cmp	r3, #7
    9830:	e9c9 5600 	strd	r5, r6, [r9]
    9834:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    9838:	ddf1      	ble.n	981e <_svfprintf_r+0x1336>
    983a:	aa26      	add	r2, sp, #152	; 0x98
    983c:	4650      	mov	r0, sl
    983e:	9103      	str	r1, [sp, #12]
    9840:	f001 ff26 	bl	b690 <__ssprint_r>
    9844:	2800      	cmp	r0, #0
    9846:	f47f aaca 	bne.w	8dde <_svfprintf_r+0x8f6>
    984a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    984e:	9903      	ldr	r1, [sp, #12]
    9850:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9854:	e7e5      	b.n	9822 <_svfprintf_r+0x133a>
    9856:	9b08      	ldr	r3, [sp, #32]
    9858:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    985c:	bf1a      	itte	ne
    985e:	4611      	movne	r1, r2
    9860:	f853 2b04 	ldrne.w	r2, [r3], #4
    9864:	f853 2b04 	ldreq.w	r2, [r3], #4
    9868:	9308      	str	r3, [sp, #32]
    986a:	bf18      	it	ne
    986c:	b2d2      	uxtbne	r2, r2
    986e:	e579      	b.n	9364 <_svfprintf_r+0xe7c>
    9870:	9b08      	ldr	r3, [sp, #32]
    9872:	f415 7100 	ands.w	r1, r5, #512	; 0x200
    9876:	bf1a      	itte	ne
    9878:	4611      	movne	r1, r2
    987a:	f853 2b04 	ldrne.w	r2, [r3], #4
    987e:	f853 2b04 	ldreq.w	r2, [r3], #4
    9882:	9308      	str	r3, [sp, #32]
    9884:	bf18      	it	ne
    9886:	b2d2      	uxtbne	r2, r2
    9888:	2301      	movs	r3, #1
    988a:	f7ff b8e0 	b.w	8a4e <_svfprintf_r+0x566>
    988e:	9b08      	ldr	r3, [sp, #32]
    9890:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    9894:	bf1a      	itte	ne
    9896:	4611      	movne	r1, r2
    9898:	f853 2b04 	ldrne.w	r2, [r3], #4
    989c:	f853 2b04 	ldreq.w	r2, [r3], #4
    98a0:	9308      	str	r3, [sp, #32]
    98a2:	bf18      	it	ne
    98a4:	b2d2      	uxtbne	r2, r2
    98a6:	f7ff b935 	b.w	8b14 <_svfprintf_r+0x62c>
    98aa:	4616      	mov	r6, r2
    98ac:	3301      	adds	r3, #1
    98ae:	443e      	add	r6, r7
    98b0:	2b07      	cmp	r3, #7
    98b2:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    98b6:	f8c9 5000 	str.w	r5, [r9]
    98ba:	f8c9 7004 	str.w	r7, [r9, #4]
    98be:	f300 8143 	bgt.w	9b48 <_svfprintf_r+0x1660>
    98c2:	f109 0908 	add.w	r9, r9, #8
    98c6:	f7ff bba6 	b.w	9016 <_svfprintf_r+0xb2e>
    98ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    98cc:	9916      	ldr	r1, [sp, #88]	; 0x58
    98ce:	1ae4      	subs	r4, r4, r3
    98d0:	461a      	mov	r2, r3
    98d2:	4620      	mov	r0, r4
    98d4:	f7fd ff84 	bl	77e0 <strncpy>
    98d8:	f898 2001 	ldrb.w	r2, [r8, #1]
    98dc:	4b25      	ldr	r3, [pc, #148]	; (9974 <_svfprintf_r+0x148c>)
    98de:	b10a      	cbz	r2, 98e4 <_svfprintf_r+0x13fc>
    98e0:	f108 0801 	add.w	r8, r8, #1
    98e4:	f04f 0c00 	mov.w	ip, #0
    98e8:	e65d      	b.n	95a6 <_svfprintf_r+0x10be>
    98ea:	2300      	movs	r3, #0
    98ec:	4619      	mov	r1, r3
    98ee:	9600      	str	r6, [sp, #0]
    98f0:	aa1f      	add	r2, sp, #124	; 0x7c
    98f2:	4650      	mov	r0, sl
    98f4:	f001 feac 	bl	b650 <_wcsrtombs_r>
    98f8:	4603      	mov	r3, r0
    98fa:	3301      	adds	r3, #1
    98fc:	9005      	str	r0, [sp, #20]
    98fe:	f000 832a 	beq.w	9f56 <_svfprintf_r+0x1a6e>
    9902:	941f      	str	r4, [sp, #124]	; 0x7c
    9904:	9b05      	ldr	r3, [sp, #20]
    9906:	2b00      	cmp	r3, #0
    9908:	d044      	beq.n	9994 <_svfprintf_r+0x14ac>
    990a:	2b63      	cmp	r3, #99	; 0x63
    990c:	f340 8118 	ble.w	9b40 <_svfprintf_r+0x1658>
    9910:	1c59      	adds	r1, r3, #1
    9912:	4650      	mov	r0, sl
    9914:	f7fd f85e 	bl	69d4 <_malloc_r>
    9918:	4604      	mov	r4, r0
    991a:	2800      	cmp	r0, #0
    991c:	f000 831b 	beq.w	9f56 <_svfprintf_r+0x1a6e>
    9920:	9007      	str	r0, [sp, #28]
    9922:	2208      	movs	r2, #8
    9924:	2100      	movs	r1, #0
    9926:	4630      	mov	r0, r6
    9928:	f7fd ff08 	bl	773c <memset>
    992c:	9d05      	ldr	r5, [sp, #20]
    992e:	9600      	str	r6, [sp, #0]
    9930:	462b      	mov	r3, r5
    9932:	aa1f      	add	r2, sp, #124	; 0x7c
    9934:	4621      	mov	r1, r4
    9936:	4650      	mov	r0, sl
    9938:	f001 fe8a 	bl	b650 <_wcsrtombs_r>
    993c:	4285      	cmp	r5, r0
    993e:	f040 83bb 	bne.w	a0b8 <_svfprintf_r+0x1bd0>
    9942:	9905      	ldr	r1, [sp, #20]
    9944:	9708      	str	r7, [sp, #32]
    9946:	2300      	movs	r3, #0
    9948:	5463      	strb	r3, [r4, r1]
    994a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    994e:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    9952:	9303      	str	r3, [sp, #12]
    9954:	9102      	str	r1, [sp, #8]
    9956:	930c      	str	r3, [sp, #48]	; 0x30
    9958:	9310      	str	r3, [sp, #64]	; 0x40
    995a:	930b      	str	r3, [sp, #44]	; 0x2c
    995c:	f7fe bfb7 	b.w	88ce <_svfprintf_r+0x3e6>
    9960:	222d      	movs	r2, #45	; 0x2d
    9962:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    9966:	f7fe bfa1 	b.w	88ac <_svfprintf_r+0x3c4>
    996a:	bf00      	nop
    996c:	0000da3c 	.word	0x0000da3c
    9970:	0000da50 	.word	0x0000da50
    9974:	cccccccd 	.word	0xcccccccd
    9978:	ee1a 1a10 	vmov	r1, s20
    997c:	aa26      	add	r2, sp, #152	; 0x98
    997e:	4650      	mov	r0, sl
    9980:	f001 fe86 	bl	b690 <__ssprint_r>
    9984:	2800      	cmp	r0, #0
    9986:	f47f aa2a 	bne.w	8dde <_svfprintf_r+0x8f6>
    998a:	991d      	ldr	r1, [sp, #116]	; 0x74
    998c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    998e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9992:	e679      	b.n	9688 <_svfprintf_r+0x11a0>
    9994:	9b05      	ldr	r3, [sp, #20]
    9996:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    999a:	9708      	str	r7, [sp, #32]
    999c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    99a0:	930c      	str	r3, [sp, #48]	; 0x30
    99a2:	9310      	str	r3, [sp, #64]	; 0x40
    99a4:	930b      	str	r3, [sp, #44]	; 0x2c
    99a6:	9307      	str	r3, [sp, #28]
    99a8:	f7fe bf91 	b.w	88ce <_svfprintf_r+0x3e6>
    99ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    99ae:	9905      	ldr	r1, [sp, #20]
    99b0:	18a5      	adds	r5, r4, r2
    99b2:	1a6d      	subs	r5, r5, r1
    99b4:	1ad4      	subs	r4, r2, r3
    99b6:	42a5      	cmp	r5, r4
    99b8:	bfa8      	it	ge
    99ba:	4625      	movge	r5, r4
    99bc:	f7ff bb60 	b.w	9080 <_svfprintf_r+0xb98>
    99c0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    99c4:	9308      	str	r3, [sp, #32]
    99c6:	17d1      	asrs	r1, r2, #31
    99c8:	460b      	mov	r3, r1
    99ca:	f7fe bfef 	b.w	89ac <_svfprintf_r+0x4c4>
    99ce:	9b08      	ldr	r3, [sp, #32]
    99d0:	9904      	ldr	r1, [sp, #16]
    99d2:	f853 2b04 	ldr.w	r2, [r3], #4
    99d6:	9308      	str	r3, [sp, #32]
    99d8:	8011      	strh	r1, [r2, #0]
    99da:	4644      	mov	r4, r8
    99dc:	f7fe bdb5 	b.w	854a <_svfprintf_r+0x62>
    99e0:	9e03      	ldr	r6, [sp, #12]
    99e2:	2102      	movs	r1, #2
    99e4:	ab24      	add	r3, sp, #144	; 0x90
    99e6:	9301      	str	r3, [sp, #4]
    99e8:	ab1f      	add	r3, sp, #124	; 0x7c
    99ea:	9300      	str	r3, [sp, #0]
    99ec:	4632      	mov	r2, r6
    99ee:	ab1d      	add	r3, sp, #116	; 0x74
    99f0:	4650      	mov	r0, sl
    99f2:	eeb0 0a48 	vmov.f32	s0, s16
    99f6:	eef0 0a68 	vmov.f32	s1, s17
    99fa:	f000 fe65 	bl	a6c8 <_dtoa_r>
    99fe:	9b02      	ldr	r3, [sp, #8]
    9a00:	2b47      	cmp	r3, #71	; 0x47
    9a02:	4604      	mov	r4, r0
    9a04:	f000 8195 	beq.w	9d32 <_svfprintf_r+0x184a>
    9a08:	2b46      	cmp	r3, #70	; 0x46
    9a0a:	eb00 0506 	add.w	r5, r0, r6
    9a0e:	d105      	bne.n	9a1c <_svfprintf_r+0x1534>
    9a10:	7803      	ldrb	r3, [r0, #0]
    9a12:	2b30      	cmp	r3, #48	; 0x30
    9a14:	f000 830e 	beq.w	a034 <_svfprintf_r+0x1b4c>
    9a18:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    9a1a:	4435      	add	r5, r6
    9a1c:	ec51 0b18 	vmov	r0, r1, d8
    9a20:	2200      	movs	r2, #0
    9a22:	2300      	movs	r3, #0
    9a24:	f7fc ff8e 	bl	6944 <__aeabi_dcmpeq>
    9a28:	2800      	cmp	r0, #0
    9a2a:	f000 8176 	beq.w	9d1a <_svfprintf_r+0x1832>
    9a2e:	462b      	mov	r3, r5
    9a30:	1b1b      	subs	r3, r3, r4
    9a32:	930d      	str	r3, [sp, #52]	; 0x34
    9a34:	9b02      	ldr	r3, [sp, #8]
    9a36:	2b47      	cmp	r3, #71	; 0x47
    9a38:	f000 813b 	beq.w	9cb2 <_svfprintf_r+0x17ca>
    9a3c:	9b02      	ldr	r3, [sp, #8]
    9a3e:	2b46      	cmp	r3, #70	; 0x46
    9a40:	f000 81fb 	beq.w	9e3a <_svfprintf_r+0x1952>
    9a44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9a46:	930b      	str	r3, [sp, #44]	; 0x2c
    9a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9a4a:	9a02      	ldr	r2, [sp, #8]
    9a4c:	3b01      	subs	r3, #1
    9a4e:	2a41      	cmp	r2, #65	; 0x41
    9a50:	931d      	str	r3, [sp, #116]	; 0x74
    9a52:	f000 822d 	beq.w	9eb0 <_svfprintf_r+0x19c8>
    9a56:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    9a5a:	2100      	movs	r1, #0
    9a5c:	2b00      	cmp	r3, #0
    9a5e:	bfb8      	it	lt
    9a60:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
    9a62:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
    9a66:	bfba      	itte	lt
    9a68:	f1c3 0301 	rsblt	r3, r3, #1
    9a6c:	222d      	movlt	r2, #45	; 0x2d
    9a6e:	222b      	movge	r2, #43	; 0x2b
    9a70:	2b09      	cmp	r3, #9
    9a72:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
    9a76:	f340 8220 	ble.w	9eba <_svfprintf_r+0x19d2>
    9a7a:	f10d 0597 	add.w	r5, sp, #151	; 0x97
    9a7e:	4eb7      	ldr	r6, [pc, #732]	; (9d5c <_svfprintf_r+0x1874>)
    9a80:	462a      	mov	r2, r5
    9a82:	4610      	mov	r0, r2
    9a84:	fb86 2103 	smull	r2, r1, r6, r3
    9a88:	17da      	asrs	r2, r3, #31
    9a8a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    9a8e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    9a92:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    9a96:	3130      	adds	r1, #48	; 0x30
    9a98:	f800 1c01 	strb.w	r1, [r0, #-1]
    9a9c:	4619      	mov	r1, r3
    9a9e:	2963      	cmp	r1, #99	; 0x63
    9aa0:	4613      	mov	r3, r2
    9aa2:	f100 32ff 	add.w	r2, r0, #4294967295
    9aa6:	dcec      	bgt.n	9a82 <_svfprintf_r+0x159a>
    9aa8:	3330      	adds	r3, #48	; 0x30
    9aaa:	b2d9      	uxtb	r1, r3
    9aac:	1e83      	subs	r3, r0, #2
    9aae:	429d      	cmp	r5, r3
    9ab0:	f802 1c01 	strb.w	r1, [r2, #-1]
    9ab4:	f240 82cb 	bls.w	a04e <_svfprintf_r+0x1b66>
    9ab8:	4613      	mov	r3, r2
    9aba:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    9abe:	e001      	b.n	9ac4 <_svfprintf_r+0x15dc>
    9ac0:	f813 1b01 	ldrb.w	r1, [r3], #1
    9ac4:	f802 1b01 	strb.w	r1, [r2], #1
    9ac8:	429d      	cmp	r5, r3
    9aca:	d1f9      	bne.n	9ac0 <_svfprintf_r+0x15d8>
    9acc:	f10d 0399 	add.w	r3, sp, #153	; 0x99
    9ad0:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    9ad4:	1a1b      	subs	r3, r3, r0
    9ad6:	4413      	add	r3, r2
    9ad8:	aa20      	add	r2, sp, #128	; 0x80
    9ada:	1a9b      	subs	r3, r3, r2
    9adc:	9315      	str	r3, [sp, #84]	; 0x54
    9ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9ae0:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9ae2:	2b01      	cmp	r3, #1
    9ae4:	441a      	add	r2, r3
    9ae6:	9205      	str	r2, [sp, #20]
    9ae8:	f340 823e 	ble.w	9f68 <_svfprintf_r+0x1a80>
    9aec:	9b05      	ldr	r3, [sp, #20]
    9aee:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9af0:	4413      	add	r3, r2
    9af2:	9305      	str	r3, [sp, #20]
    9af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9af6:	9a05      	ldr	r2, [sp, #20]
    9af8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    9afc:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
    9b00:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    9b04:	2300      	movs	r3, #0
    9b06:	930c      	str	r3, [sp, #48]	; 0x30
    9b08:	9202      	str	r2, [sp, #8]
    9b0a:	9310      	str	r3, [sp, #64]	; 0x40
    9b0c:	930b      	str	r3, [sp, #44]	; 0x2c
    9b0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9b10:	2b00      	cmp	r3, #0
    9b12:	f040 80dc 	bne.w	9cce <_svfprintf_r+0x17e6>
    9b16:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    9b1a:	9303      	str	r3, [sp, #12]
    9b1c:	f7fe bed7 	b.w	88ce <_svfprintf_r+0x3e6>
    9b20:	4620      	mov	r0, r4
    9b22:	9708      	str	r7, [sp, #32]
    9b24:	f7fd ff2c 	bl	7980 <strlen>
    9b28:	4601      	mov	r1, r0
    9b2a:	9005      	str	r0, [sp, #20]
    9b2c:	f7fe bf22 	b.w	8974 <_svfprintf_r+0x48c>
    9b30:	ee1a 1a10 	vmov	r1, s20
    9b34:	aa26      	add	r2, sp, #152	; 0x98
    9b36:	4650      	mov	r0, sl
    9b38:	f001 fdaa 	bl	b690 <__ssprint_r>
    9b3c:	f7fe bddf 	b.w	86fe <_svfprintf_r+0x216>
    9b40:	2300      	movs	r3, #0
    9b42:	9307      	str	r3, [sp, #28]
    9b44:	ac39      	add	r4, sp, #228	; 0xe4
    9b46:	e6ec      	b.n	9922 <_svfprintf_r+0x143a>
    9b48:	ee1a 1a10 	vmov	r1, s20
    9b4c:	aa26      	add	r2, sp, #152	; 0x98
    9b4e:	4650      	mov	r0, sl
    9b50:	f001 fd9e 	bl	b690 <__ssprint_r>
    9b54:	2800      	cmp	r0, #0
    9b56:	f47f a942 	bne.w	8dde <_svfprintf_r+0x8f6>
    9b5a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    9b5c:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9b60:	f7ff ba59 	b.w	9016 <_svfprintf_r+0xb2e>
    9b64:	ee1a 1a10 	vmov	r1, s20
    9b68:	aa26      	add	r2, sp, #152	; 0x98
    9b6a:	4650      	mov	r0, sl
    9b6c:	f001 fd90 	bl	b690 <__ssprint_r>
    9b70:	2800      	cmp	r0, #0
    9b72:	f47f a934 	bne.w	8dde <_svfprintf_r+0x8f6>
    9b76:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    9b7a:	991d      	ldr	r1, [sp, #116]	; 0x74
    9b7c:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9b80:	e641      	b.n	9806 <_svfprintf_r+0x131e>
    9b82:	2306      	movs	r3, #6
    9b84:	9303      	str	r3, [sp, #12]
    9b86:	f7ff bb9d 	b.w	92c4 <_svfprintf_r+0xddc>
    9b8a:	9b03      	ldr	r3, [sp, #12]
    9b8c:	2102      	movs	r1, #2
    9b8e:	1c5e      	adds	r6, r3, #1
    9b90:	e728      	b.n	99e4 <_svfprintf_r+0x14fc>
    9b92:	9e03      	ldr	r6, [sp, #12]
    9b94:	2103      	movs	r1, #3
    9b96:	e725      	b.n	99e4 <_svfprintf_r+0x14fc>
    9b98:	a81d      	add	r0, sp, #116	; 0x74
    9b9a:	eeb0 0a48 	vmov.f32	s0, s16
    9b9e:	eef0 0a68 	vmov.f32	s1, s17
    9ba2:	f000 fc25 	bl	a3f0 <frexp>
    9ba6:	2200      	movs	r2, #0
    9ba8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    9bac:	ec51 0b10 	vmov	r0, r1, d0
    9bb0:	f7fc fc60 	bl	6474 <__aeabi_dmul>
    9bb4:	2200      	movs	r2, #0
    9bb6:	2300      	movs	r3, #0
    9bb8:	4606      	mov	r6, r0
    9bba:	460f      	mov	r7, r1
    9bbc:	f7fc fec2 	bl	6944 <__aeabi_dcmpeq>
    9bc0:	b108      	cbz	r0, 9bc6 <_svfprintf_r+0x16de>
    9bc2:	2301      	movs	r3, #1
    9bc4:	931d      	str	r3, [sp, #116]	; 0x74
    9bc6:	4b66      	ldr	r3, [pc, #408]	; (9d60 <_svfprintf_r+0x1878>)
    9bc8:	9305      	str	r3, [sp, #20]
    9bca:	9b03      	ldr	r3, [sp, #12]
    9bcc:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    9bd0:	3b01      	subs	r3, #1
    9bd2:	ee0a aa90 	vmov	s21, sl
    9bd6:	e9cd 9b0c 	strd	r9, fp, [sp, #48]	; 0x30
    9bda:	f8dd a014 	ldr.w	sl, [sp, #20]
    9bde:	9410      	str	r4, [sp, #64]	; 0x40
    9be0:	4625      	mov	r5, r4
    9be2:	4698      	mov	r8, r3
    9be4:	e006      	b.n	9bf4 <_svfprintf_r+0x170c>
    9be6:	2200      	movs	r2, #0
    9be8:	2300      	movs	r3, #0
    9bea:	f108 38ff 	add.w	r8, r8, #4294967295
    9bee:	f7fc fea9 	bl	6944 <__aeabi_dcmpeq>
    9bf2:	b9e8      	cbnz	r0, 9c30 <_svfprintf_r+0x1748>
    9bf4:	4b5b      	ldr	r3, [pc, #364]	; (9d64 <_svfprintf_r+0x187c>)
    9bf6:	2200      	movs	r2, #0
    9bf8:	4630      	mov	r0, r6
    9bfa:	4639      	mov	r1, r7
    9bfc:	f7fc fc3a 	bl	6474 <__aeabi_dmul>
    9c00:	460f      	mov	r7, r1
    9c02:	4606      	mov	r6, r0
    9c04:	f003 f9f2 	bl	cfec <__aeabi_d2iz>
    9c08:	4604      	mov	r4, r0
    9c0a:	f7fc fbc9 	bl	63a0 <__aeabi_i2d>
    9c0e:	460b      	mov	r3, r1
    9c10:	4602      	mov	r2, r0
    9c12:	4639      	mov	r1, r7
    9c14:	4630      	mov	r0, r6
    9c16:	f7fc fa75 	bl	6104 <__aeabi_dsub>
    9c1a:	f81a 3004 	ldrb.w	r3, [sl, r4]
    9c1e:	f1b8 3fff 	cmp.w	r8, #4294967295
    9c22:	46ab      	mov	fp, r5
    9c24:	46c1      	mov	r9, r8
    9c26:	f805 3b01 	strb.w	r3, [r5], #1
    9c2a:	4606      	mov	r6, r0
    9c2c:	460f      	mov	r7, r1
    9c2e:	d1da      	bne.n	9be6 <_svfprintf_r+0x16fe>
    9c30:	4b4d      	ldr	r3, [pc, #308]	; (9d68 <_svfprintf_r+0x1880>)
    9c32:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    9c36:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    9c3a:	2200      	movs	r2, #0
    9c3c:	4630      	mov	r0, r6
    9c3e:	4639      	mov	r1, r7
    9c40:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    9c44:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    9c48:	ee1a aa90 	vmov	sl, s21
    9c4c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    9c50:	940d      	str	r4, [sp, #52]	; 0x34
    9c52:	9c10      	ldr	r4, [sp, #64]	; 0x40
    9c54:	f7fc fe9e 	bl	6994 <__aeabi_dcmpgt>
    9c58:	2800      	cmp	r0, #0
    9c5a:	f040 8160 	bne.w	9f1e <_svfprintf_r+0x1a36>
    9c5e:	4b42      	ldr	r3, [pc, #264]	; (9d68 <_svfprintf_r+0x1880>)
    9c60:	4630      	mov	r0, r6
    9c62:	4639      	mov	r1, r7
    9c64:	2200      	movs	r2, #0
    9c66:	f7fc fe6d 	bl	6944 <__aeabi_dcmpeq>
    9c6a:	b118      	cbz	r0, 9c74 <_svfprintf_r+0x178c>
    9c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9c6e:	07de      	lsls	r6, r3, #31
    9c70:	f100 8155 	bmi.w	9f1e <_svfprintf_r+0x1a36>
    9c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9c76:	2b00      	cmp	r3, #0
    9c78:	db07      	blt.n	9c8a <_svfprintf_r+0x17a2>
    9c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9c7c:	3301      	adds	r3, #1
    9c7e:	442b      	add	r3, r5
    9c80:	2230      	movs	r2, #48	; 0x30
    9c82:	f805 2b01 	strb.w	r2, [r5], #1
    9c86:	42ab      	cmp	r3, r5
    9c88:	d1fb      	bne.n	9c82 <_svfprintf_r+0x179a>
    9c8a:	1b2b      	subs	r3, r5, r4
    9c8c:	930d      	str	r3, [sp, #52]	; 0x34
    9c8e:	e6d1      	b.n	9a34 <_svfprintf_r+0x154c>
    9c90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9c94:	f8dd b014 	ldr.w	fp, [sp, #20]
    9c98:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    9c9c:	9714      	str	r7, [sp, #80]	; 0x50
    9c9e:	18e3      	adds	r3, r4, r3
    9ca0:	429d      	cmp	r5, r3
    9ca2:	4691      	mov	r9, r2
    9ca4:	462a      	mov	r2, r5
    9ca6:	bf28      	it	cs
    9ca8:	461a      	movcs	r2, r3
    9caa:	4666      	mov	r6, ip
    9cac:	9205      	str	r2, [sp, #20]
    9cae:	f7ff b9b9 	b.w	9024 <_svfprintf_r+0xb3c>
    9cb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9cb4:	930b      	str	r3, [sp, #44]	; 0x2c
    9cb6:	1cdd      	adds	r5, r3, #3
    9cb8:	db02      	blt.n	9cc0 <_svfprintf_r+0x17d8>
    9cba:	9a03      	ldr	r2, [sp, #12]
    9cbc:	4293      	cmp	r3, r2
    9cbe:	dd0d      	ble.n	9cdc <_svfprintf_r+0x17f4>
    9cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9cc2:	3b02      	subs	r3, #2
    9cc4:	930a      	str	r3, [sp, #40]	; 0x28
    9cc6:	f023 0320 	bic.w	r3, r3, #32
    9cca:	9302      	str	r3, [sp, #8]
    9ccc:	e6bc      	b.n	9a48 <_svfprintf_r+0x1560>
    9cce:	222d      	movs	r2, #45	; 0x2d
    9cd0:	2300      	movs	r3, #0
    9cd2:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    9cd6:	9303      	str	r3, [sp, #12]
    9cd8:	f7fe bdfc 	b.w	88d4 <_svfprintf_r+0x3ec>
    9cdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9cde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9ce0:	4293      	cmp	r3, r2
    9ce2:	f2c0 80d8 	blt.w	9e96 <_svfprintf_r+0x19ae>
    9ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ce8:	f013 0f01 	tst.w	r3, #1
    9cec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9cee:	f000 8140 	beq.w	9f72 <_svfprintf_r+0x1a8a>
    9cf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9cf4:	4413      	add	r3, r2
    9cf6:	9305      	str	r3, [sp, #20]
    9cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9cfa:	0559      	lsls	r1, r3, #21
    9cfc:	d503      	bpl.n	9d06 <_svfprintf_r+0x181e>
    9cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d00:	2b00      	cmp	r3, #0
    9d02:	f300 813f 	bgt.w	9f84 <_svfprintf_r+0x1a9c>
    9d06:	9b05      	ldr	r3, [sp, #20]
    9d08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9d0c:	9302      	str	r3, [sp, #8]
    9d0e:	2367      	movs	r3, #103	; 0x67
    9d10:	930a      	str	r3, [sp, #40]	; 0x28
    9d12:	2300      	movs	r3, #0
    9d14:	930c      	str	r3, [sp, #48]	; 0x30
    9d16:	9310      	str	r3, [sp, #64]	; 0x40
    9d18:	e6f9      	b.n	9b0e <_svfprintf_r+0x1626>
    9d1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d1c:	42ab      	cmp	r3, r5
    9d1e:	f4bf ae87 	bcs.w	9a30 <_svfprintf_r+0x1548>
    9d22:	2130      	movs	r1, #48	; 0x30
    9d24:	1c5a      	adds	r2, r3, #1
    9d26:	9224      	str	r2, [sp, #144]	; 0x90
    9d28:	7019      	strb	r1, [r3, #0]
    9d2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d2c:	429d      	cmp	r5, r3
    9d2e:	d8f9      	bhi.n	9d24 <_svfprintf_r+0x183c>
    9d30:	e67e      	b.n	9a30 <_svfprintf_r+0x1548>
    9d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d34:	07db      	lsls	r3, r3, #31
    9d36:	f100 80b9 	bmi.w	9eac <_svfprintf_r+0x19c4>
    9d3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d3c:	e678      	b.n	9a30 <_svfprintf_r+0x1548>
    9d3e:	aa26      	add	r2, sp, #152	; 0x98
    9d40:	4649      	mov	r1, r9
    9d42:	4650      	mov	r0, sl
    9d44:	f001 fca4 	bl	b690 <__ssprint_r>
    9d48:	2800      	cmp	r0, #0
    9d4a:	f47f a848 	bne.w	8dde <_svfprintf_r+0x8f6>
    9d4e:	7838      	ldrb	r0, [r7, #0]
    9d50:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
    9d54:	aa29      	add	r2, sp, #164	; 0xa4
    9d56:	4405      	add	r5, r0
    9d58:	f7ff bbbf 	b.w	94da <_svfprintf_r+0xff2>
    9d5c:	66666667 	.word	0x66666667
    9d60:	0000da20 	.word	0x0000da20
    9d64:	40300000 	.word	0x40300000
    9d68:	3fe00000 	.word	0x3fe00000
    9d6c:	2378      	movs	r3, #120	; 0x78
    9d6e:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    9d72:	2330      	movs	r3, #48	; 0x30
    9d74:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    9d78:	f04b 0302 	orr.w	r3, fp, #2
    9d7c:	9309      	str	r3, [sp, #36]	; 0x24
    9d7e:	9b03      	ldr	r3, [sp, #12]
    9d80:	2b63      	cmp	r3, #99	; 0x63
    9d82:	f300 80a9 	bgt.w	9ed8 <_svfprintf_r+0x19f0>
    9d86:	2300      	movs	r3, #0
    9d88:	9307      	str	r3, [sp, #28]
    9d8a:	ac39      	add	r4, sp, #228	; 0xe4
    9d8c:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    9d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9d92:	2a00      	cmp	r2, #0
    9d94:	f023 0320 	bic.w	r3, r3, #32
    9d98:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
    9d9c:	9302      	str	r3, [sp, #8]
    9d9e:	db22      	blt.n	9de6 <_svfprintf_r+0x18fe>
    9da0:	2300      	movs	r3, #0
    9da2:	ec42 1b18 	vmov	d8, r1, r2
    9da6:	9318      	str	r3, [sp, #96]	; 0x60
    9da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9daa:	2b61      	cmp	r3, #97	; 0x61
    9dac:	f47f aa9a 	bne.w	92e4 <_svfprintf_r+0xdfc>
    9db0:	eeb0 0a48 	vmov.f32	s0, s16
    9db4:	eef0 0a68 	vmov.f32	s1, s17
    9db8:	a81d      	add	r0, sp, #116	; 0x74
    9dba:	f000 fb19 	bl	a3f0 <frexp>
    9dbe:	2200      	movs	r2, #0
    9dc0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    9dc4:	ec51 0b10 	vmov	r0, r1, d0
    9dc8:	f7fc fb54 	bl	6474 <__aeabi_dmul>
    9dcc:	2200      	movs	r2, #0
    9dce:	2300      	movs	r3, #0
    9dd0:	4606      	mov	r6, r0
    9dd2:	460f      	mov	r7, r1
    9dd4:	f7fc fdb6 	bl	6944 <__aeabi_dcmpeq>
    9dd8:	b108      	cbz	r0, 9dde <_svfprintf_r+0x18f6>
    9dda:	2301      	movs	r3, #1
    9ddc:	931d      	str	r3, [sp, #116]	; 0x74
    9dde:	4bad      	ldr	r3, [pc, #692]	; (a094 <_svfprintf_r+0x1bac>)
    9de0:	9305      	str	r3, [sp, #20]
    9de2:	e6f2      	b.n	9bca <_svfprintf_r+0x16e2>
    9de4:	9307      	str	r3, [sp, #28]
    9de6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    9dea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9dee:	ee08 3a90 	vmov	s17, r3
    9df2:	232d      	movs	r3, #45	; 0x2d
    9df4:	ee08 2a10 	vmov	s16, r2
    9df8:	9318      	str	r3, [sp, #96]	; 0x60
    9dfa:	e7d5      	b.n	9da8 <_svfprintf_r+0x18c0>
    9dfc:	ee1a 1a10 	vmov	r1, s20
    9e00:	aa26      	add	r2, sp, #152	; 0x98
    9e02:	4650      	mov	r0, sl
    9e04:	f001 fc44 	bl	b690 <__ssprint_r>
    9e08:	2800      	cmp	r0, #0
    9e0a:	f47e afe8 	bne.w	8dde <_svfprintf_r+0x8f6>
    9e0e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    9e10:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9e14:	f7ff b8f8 	b.w	9008 <_svfprintf_r+0xb20>
    9e18:	ee1a 1a10 	vmov	r1, s20
    9e1c:	aa26      	add	r2, sp, #152	; 0x98
    9e1e:	4650      	mov	r0, sl
    9e20:	f001 fc36 	bl	b690 <__ssprint_r>
    9e24:	2800      	cmp	r0, #0
    9e26:	f47e afda 	bne.w	8dde <_svfprintf_r+0x8f6>
    9e2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9e2c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    9e2e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9e32:	f7ff b90d 	b.w	9050 <_svfprintf_r+0xb68>
    9e36:	2358      	movs	r3, #88	; 0x58
    9e38:	e799      	b.n	9d6e <_svfprintf_r+0x1886>
    9e3a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    9e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9e3e:	920b      	str	r2, [sp, #44]	; 0x2c
    9e40:	2a00      	cmp	r2, #0
    9e42:	f003 0301 	and.w	r3, r3, #1
    9e46:	f340 8111 	ble.w	a06c <_svfprintf_r+0x1b84>
    9e4a:	9903      	ldr	r1, [sp, #12]
    9e4c:	430b      	orrs	r3, r1
    9e4e:	f040 80c1 	bne.w	9fd4 <_svfprintf_r+0x1aec>
    9e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e54:	9305      	str	r3, [sp, #20]
    9e56:	2366      	movs	r3, #102	; 0x66
    9e58:	930a      	str	r3, [sp, #40]	; 0x28
    9e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9e5c:	055a      	lsls	r2, r3, #21
    9e5e:	f100 8093 	bmi.w	9f88 <_svfprintf_r+0x1aa0>
    9e62:	9b05      	ldr	r3, [sp, #20]
    9e64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9e68:	9302      	str	r3, [sp, #8]
    9e6a:	e752      	b.n	9d12 <_svfprintf_r+0x182a>
    9e6c:	ee1a 1a10 	vmov	r1, s20
    9e70:	aa26      	add	r2, sp, #152	; 0x98
    9e72:	4650      	mov	r0, sl
    9e74:	f001 fc0c 	bl	b690 <__ssprint_r>
    9e78:	2800      	cmp	r0, #0
    9e7a:	f47e afb0 	bne.w	8dde <_svfprintf_r+0x8f6>
    9e7e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    9e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9e82:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    9e84:	1b1c      	subs	r4, r3, r4
    9e86:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9e8a:	f7ff b8f9 	b.w	9080 <_svfprintf_r+0xb98>
    9e8e:	2200      	movs	r2, #0
    9e90:	9203      	str	r2, [sp, #12]
    9e92:	f7fe bb87 	b.w	85a4 <_svfprintf_r+0xbc>
    9e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9e98:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9e9a:	189a      	adds	r2, r3, r2
    9e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e9e:	9205      	str	r2, [sp, #20]
    9ea0:	2b00      	cmp	r3, #0
    9ea2:	f340 80bd 	ble.w	a020 <_svfprintf_r+0x1b38>
    9ea6:	2367      	movs	r3, #103	; 0x67
    9ea8:	930a      	str	r3, [sp, #40]	; 0x28
    9eaa:	e7d6      	b.n	9e5a <_svfprintf_r+0x1972>
    9eac:	19a5      	adds	r5, r4, r6
    9eae:	e5b5      	b.n	9a1c <_svfprintf_r+0x1534>
    9eb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9eb2:	320f      	adds	r2, #15
    9eb4:	b2d2      	uxtb	r2, r2
    9eb6:	2101      	movs	r1, #1
    9eb8:	e5d0      	b.n	9a5c <_svfprintf_r+0x1574>
    9eba:	2900      	cmp	r1, #0
    9ebc:	f040 80ad 	bne.w	a01a <_svfprintf_r+0x1b32>
    9ec0:	2230      	movs	r2, #48	; 0x30
    9ec2:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
    9ec6:	f10d 0283 	add.w	r2, sp, #131	; 0x83
    9eca:	3330      	adds	r3, #48	; 0x30
    9ecc:	f802 3b01 	strb.w	r3, [r2], #1
    9ed0:	ab20      	add	r3, sp, #128	; 0x80
    9ed2:	1ad3      	subs	r3, r2, r3
    9ed4:	9315      	str	r3, [sp, #84]	; 0x54
    9ed6:	e602      	b.n	9ade <_svfprintf_r+0x15f6>
    9ed8:	1c59      	adds	r1, r3, #1
    9eda:	4650      	mov	r0, sl
    9edc:	f7fc fd7a 	bl	69d4 <_malloc_r>
    9ee0:	4604      	mov	r4, r0
    9ee2:	2800      	cmp	r0, #0
    9ee4:	d037      	beq.n	9f56 <_svfprintf_r+0x1a6e>
    9ee6:	9007      	str	r0, [sp, #28]
    9ee8:	e750      	b.n	9d8c <_svfprintf_r+0x18a4>
    9eea:	3301      	adds	r3, #1
    9eec:	443a      	add	r2, r7
    9eee:	2b07      	cmp	r3, #7
    9ef0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    9ef4:	f8c9 5000 	str.w	r5, [r9]
    9ef8:	f8c9 7004 	str.w	r7, [r9, #4]
    9efc:	f77f abd9 	ble.w	96b2 <_svfprintf_r+0x11ca>
    9f00:	ee1a 1a10 	vmov	r1, s20
    9f04:	aa26      	add	r2, sp, #152	; 0x98
    9f06:	4650      	mov	r0, sl
    9f08:	f001 fbc2 	bl	b690 <__ssprint_r>
    9f0c:	2800      	cmp	r0, #0
    9f0e:	f47e af66 	bne.w	8dde <_svfprintf_r+0x8f6>
    9f12:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    9f16:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    9f1a:	f7ff bbcc 	b.w	96b6 <_svfprintf_r+0x11ce>
    9f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9f20:	9a05      	ldr	r2, [sp, #20]
    9f22:	9324      	str	r3, [sp, #144]	; 0x90
    9f24:	7bd1      	ldrb	r1, [r2, #15]
    9f26:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    9f2a:	428b      	cmp	r3, r1
    9f2c:	462a      	mov	r2, r5
    9f2e:	d109      	bne.n	9f44 <_svfprintf_r+0x1a5c>
    9f30:	2030      	movs	r0, #48	; 0x30
    9f32:	f802 0c01 	strb.w	r0, [r2, #-1]
    9f36:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9f38:	1e53      	subs	r3, r2, #1
    9f3a:	9324      	str	r3, [sp, #144]	; 0x90
    9f3c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    9f40:	4299      	cmp	r1, r3
    9f42:	d0f6      	beq.n	9f32 <_svfprintf_r+0x1a4a>
    9f44:	2b39      	cmp	r3, #57	; 0x39
    9f46:	bf0b      	itete	eq
    9f48:	9b05      	ldreq	r3, [sp, #20]
    9f4a:	3301      	addne	r3, #1
    9f4c:	7a9b      	ldrbeq	r3, [r3, #10]
    9f4e:	b2db      	uxtbne	r3, r3
    9f50:	f802 3c01 	strb.w	r3, [r2, #-1]
    9f54:	e699      	b.n	9c8a <_svfprintf_r+0x17a2>
    9f56:	ee1a 2a10 	vmov	r2, s20
    9f5a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    9f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9f62:	8193      	strh	r3, [r2, #12]
    9f64:	f7fe bbcf 	b.w	8706 <_svfprintf_r+0x21e>
    9f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f6a:	07d8      	lsls	r0, r3, #31
    9f6c:	f57f adc2 	bpl.w	9af4 <_svfprintf_r+0x160c>
    9f70:	e5bc      	b.n	9aec <_svfprintf_r+0x1604>
    9f72:	9305      	str	r3, [sp, #20]
    9f74:	e6c0      	b.n	9cf8 <_svfprintf_r+0x1810>
    9f76:	9b03      	ldr	r3, [sp, #12]
    9f78:	f8dd 8008 	ldr.w	r8, [sp, #8]
    9f7c:	f8dd b01c 	ldr.w	fp, [sp, #28]
    9f80:	9305      	str	r3, [sp, #20]
    9f82:	e4bf      	b.n	9904 <_svfprintf_r+0x141c>
    9f84:	2367      	movs	r3, #103	; 0x67
    9f86:	930a      	str	r3, [sp, #40]	; 0x28
    9f88:	9914      	ldr	r1, [sp, #80]	; 0x50
    9f8a:	780b      	ldrb	r3, [r1, #0]
    9f8c:	2bff      	cmp	r3, #255	; 0xff
    9f8e:	f000 808f 	beq.w	a0b0 <_svfprintf_r+0x1bc8>
    9f92:	2500      	movs	r5, #0
    9f94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9f96:	4628      	mov	r0, r5
    9f98:	e003      	b.n	9fa2 <_svfprintf_r+0x1aba>
    9f9a:	3001      	adds	r0, #1
    9f9c:	3101      	adds	r1, #1
    9f9e:	2bff      	cmp	r3, #255	; 0xff
    9fa0:	d008      	beq.n	9fb4 <_svfprintf_r+0x1acc>
    9fa2:	4293      	cmp	r3, r2
    9fa4:	da06      	bge.n	9fb4 <_svfprintf_r+0x1acc>
    9fa6:	1ad2      	subs	r2, r2, r3
    9fa8:	784b      	ldrb	r3, [r1, #1]
    9faa:	2b00      	cmp	r3, #0
    9fac:	d1f5      	bne.n	9f9a <_svfprintf_r+0x1ab2>
    9fae:	780b      	ldrb	r3, [r1, #0]
    9fb0:	3501      	adds	r5, #1
    9fb2:	e7f4      	b.n	9f9e <_svfprintf_r+0x1ab6>
    9fb4:	920b      	str	r2, [sp, #44]	; 0x2c
    9fb6:	9114      	str	r1, [sp, #80]	; 0x50
    9fb8:	9010      	str	r0, [sp, #64]	; 0x40
    9fba:	950c      	str	r5, [sp, #48]	; 0x30
    9fbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9fbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9fc0:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9fc2:	4413      	add	r3, r2
    9fc4:	9a05      	ldr	r2, [sp, #20]
    9fc6:	fb01 2303 	mla	r3, r1, r3, r2
    9fca:	9305      	str	r3, [sp, #20]
    9fcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9fd0:	9302      	str	r3, [sp, #8]
    9fd2:	e59c      	b.n	9b0e <_svfprintf_r+0x1626>
    9fd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9fd6:	18d5      	adds	r5, r2, r3
    9fd8:	4429      	add	r1, r5
    9fda:	2366      	movs	r3, #102	; 0x66
    9fdc:	9105      	str	r1, [sp, #20]
    9fde:	930a      	str	r3, [sp, #40]	; 0x28
    9fe0:	e73b      	b.n	9e5a <_svfprintf_r+0x1972>
    9fe2:	9b03      	ldr	r3, [sp, #12]
    9fe4:	9302      	str	r3, [sp, #8]
    9fe6:	9305      	str	r3, [sp, #20]
    9fe8:	2373      	movs	r3, #115	; 0x73
    9fea:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    9fee:	9708      	str	r7, [sp, #32]
    9ff0:	9003      	str	r0, [sp, #12]
    9ff2:	900c      	str	r0, [sp, #48]	; 0x30
    9ff4:	9010      	str	r0, [sp, #64]	; 0x40
    9ff6:	930a      	str	r3, [sp, #40]	; 0x28
    9ff8:	f7fe bc69 	b.w	88ce <_svfprintf_r+0x3e6>
    9ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9ffe:	4c26      	ldr	r4, [pc, #152]	; (a098 <_svfprintf_r+0x1bb0>)
    a000:	2b00      	cmp	r3, #0
    a002:	bfb4      	ite	lt
    a004:	222d      	movlt	r2, #45	; 0x2d
    a006:	f89d 206f 	ldrbge.w	r2, [sp, #111]	; 0x6f
    a00a:	4b24      	ldr	r3, [pc, #144]	; (a09c <_svfprintf_r+0x1bb4>)
    a00c:	bfb8      	it	lt
    a00e:	f88d 206f 	strblt.w	r2, [sp, #111]	; 0x6f
    a012:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    a016:	f7fe bc4d 	b.w	88b4 <_svfprintf_r+0x3cc>
    a01a:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    a01e:	e754      	b.n	9eca <_svfprintf_r+0x19e2>
    a020:	f1c3 0301 	rsb	r3, r3, #1
    a024:	441a      	add	r2, r3
    a026:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    a02a:	9302      	str	r3, [sp, #8]
    a02c:	2367      	movs	r3, #103	; 0x67
    a02e:	9205      	str	r2, [sp, #20]
    a030:	930a      	str	r3, [sp, #40]	; 0x28
    a032:	e66e      	b.n	9d12 <_svfprintf_r+0x182a>
    a034:	ec51 0b18 	vmov	r0, r1, d8
    a038:	2200      	movs	r2, #0
    a03a:	2300      	movs	r3, #0
    a03c:	f7fc fc82 	bl	6944 <__aeabi_dcmpeq>
    a040:	2800      	cmp	r0, #0
    a042:	f47f ace9 	bne.w	9a18 <_svfprintf_r+0x1530>
    a046:	f1c6 0601 	rsb	r6, r6, #1
    a04a:	961d      	str	r6, [sp, #116]	; 0x74
    a04c:	e4e5      	b.n	9a1a <_svfprintf_r+0x1532>
    a04e:	2302      	movs	r3, #2
    a050:	9315      	str	r3, [sp, #84]	; 0x54
    a052:	e544      	b.n	9ade <_svfprintf_r+0x15f6>
    a054:	9a08      	ldr	r2, [sp, #32]
    a056:	f898 3001 	ldrb.w	r3, [r8, #1]
    a05a:	4688      	mov	r8, r1
    a05c:	f852 1b04 	ldr.w	r1, [r2], #4
    a060:	9208      	str	r2, [sp, #32]
    a062:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    a066:	9103      	str	r1, [sp, #12]
    a068:	f7fe ba9a 	b.w	85a0 <_svfprintf_r+0xb8>
    a06c:	9a03      	ldr	r2, [sp, #12]
    a06e:	4313      	orrs	r3, r2
    a070:	d105      	bne.n	a07e <_svfprintf_r+0x1b96>
    a072:	2301      	movs	r3, #1
    a074:	2266      	movs	r2, #102	; 0x66
    a076:	9302      	str	r3, [sp, #8]
    a078:	920a      	str	r2, [sp, #40]	; 0x28
    a07a:	9305      	str	r3, [sp, #20]
    a07c:	e649      	b.n	9d12 <_svfprintf_r+0x182a>
    a07e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a080:	1c5d      	adds	r5, r3, #1
    a082:	442a      	add	r2, r5
    a084:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    a088:	9302      	str	r3, [sp, #8]
    a08a:	2366      	movs	r3, #102	; 0x66
    a08c:	9205      	str	r2, [sp, #20]
    a08e:	930a      	str	r3, [sp, #40]	; 0x28
    a090:	e63f      	b.n	9d12 <_svfprintf_r+0x182a>
    a092:	bf00      	nop
    a094:	0000da0c 	.word	0x0000da0c
    a098:	0000da04 	.word	0x0000da04
    a09c:	0000da08 	.word	0x0000da08
    a0a0:	230c      	movs	r3, #12
    a0a2:	f8ca 3000 	str.w	r3, [sl]
    a0a6:	f04f 33ff 	mov.w	r3, #4294967295
    a0aa:	9304      	str	r3, [sp, #16]
    a0ac:	f7fe bb32 	b.w	8714 <_svfprintf_r+0x22c>
    a0b0:	2300      	movs	r3, #0
    a0b2:	930c      	str	r3, [sp, #48]	; 0x30
    a0b4:	9310      	str	r3, [sp, #64]	; 0x40
    a0b6:	e781      	b.n	9fbc <_svfprintf_r+0x1ad4>
    a0b8:	ee1a 2a10 	vmov	r2, s20
    a0bc:	8993      	ldrh	r3, [r2, #12]
    a0be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a0c2:	8193      	strh	r3, [r2, #12]
    a0c4:	f7fe be8b 	b.w	8dde <_svfprintf_r+0x8f6>

0000a0c8 <_fclose_r>:
    a0c8:	b570      	push	{r4, r5, r6, lr}
    a0ca:	2900      	cmp	r1, #0
    a0cc:	d04b      	beq.n	a166 <_fclose_r+0x9e>
    a0ce:	4606      	mov	r6, r0
    a0d0:	460c      	mov	r4, r1
    a0d2:	b110      	cbz	r0, a0da <_fclose_r+0x12>
    a0d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a0d6:	2b00      	cmp	r3, #0
    a0d8:	d048      	beq.n	a16c <_fclose_r+0xa4>
    a0da:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a0dc:	07d8      	lsls	r0, r3, #31
    a0de:	d534      	bpl.n	a14a <_fclose_r+0x82>
    a0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a0e4:	2b00      	cmp	r3, #0
    a0e6:	d03e      	beq.n	a166 <_fclose_r+0x9e>
    a0e8:	4621      	mov	r1, r4
    a0ea:	4630      	mov	r0, r6
    a0ec:	f000 f850 	bl	a190 <__sflush_r>
    a0f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a0f2:	4605      	mov	r5, r0
    a0f4:	b133      	cbz	r3, a104 <_fclose_r+0x3c>
    a0f6:	69e1      	ldr	r1, [r4, #28]
    a0f8:	4630      	mov	r0, r6
    a0fa:	4798      	blx	r3
    a0fc:	2800      	cmp	r0, #0
    a0fe:	bfb8      	it	lt
    a100:	f04f 35ff 	movlt.w	r5, #4294967295
    a104:	89a3      	ldrh	r3, [r4, #12]
    a106:	061a      	lsls	r2, r3, #24
    a108:	d43c      	bmi.n	a184 <_fclose_r+0xbc>
    a10a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a10c:	b141      	cbz	r1, a120 <_fclose_r+0x58>
    a10e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    a112:	4299      	cmp	r1, r3
    a114:	d002      	beq.n	a11c <_fclose_r+0x54>
    a116:	4630      	mov	r0, r6
    a118:	f7fd fd00 	bl	7b1c <_free_r>
    a11c:	2300      	movs	r3, #0
    a11e:	6323      	str	r3, [r4, #48]	; 0x30
    a120:	6c61      	ldr	r1, [r4, #68]	; 0x44
    a122:	b121      	cbz	r1, a12e <_fclose_r+0x66>
    a124:	4630      	mov	r0, r6
    a126:	f7fd fcf9 	bl	7b1c <_free_r>
    a12a:	2300      	movs	r3, #0
    a12c:	6463      	str	r3, [r4, #68]	; 0x44
    a12e:	f7fd f9ad 	bl	748c <__sfp_lock_acquire>
    a132:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a134:	2200      	movs	r2, #0
    a136:	07db      	lsls	r3, r3, #31
    a138:	81a2      	strh	r2, [r4, #12]
    a13a:	d51f      	bpl.n	a17c <_fclose_r+0xb4>
    a13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a13e:	f7fd fc19 	bl	7974 <__retarget_lock_close_recursive>
    a142:	f7fd f9a9 	bl	7498 <__sfp_lock_release>
    a146:	4628      	mov	r0, r5
    a148:	bd70      	pop	{r4, r5, r6, pc}
    a14a:	89a3      	ldrh	r3, [r4, #12]
    a14c:	0599      	lsls	r1, r3, #22
    a14e:	d4cb      	bmi.n	a0e8 <_fclose_r+0x20>
    a150:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a152:	f7fd fc11 	bl	7978 <__retarget_lock_acquire_recursive>
    a156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a15a:	2b00      	cmp	r3, #0
    a15c:	d1c4      	bne.n	a0e8 <_fclose_r+0x20>
    a15e:	6e65      	ldr	r5, [r4, #100]	; 0x64
    a160:	f015 0501 	ands.w	r5, r5, #1
    a164:	d005      	beq.n	a172 <_fclose_r+0xaa>
    a166:	2500      	movs	r5, #0
    a168:	4628      	mov	r0, r5
    a16a:	bd70      	pop	{r4, r5, r6, pc}
    a16c:	f7fd f970 	bl	7450 <__sinit>
    a170:	e7b3      	b.n	a0da <_fclose_r+0x12>
    a172:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a174:	f7fd fc02 	bl	797c <__retarget_lock_release_recursive>
    a178:	4628      	mov	r0, r5
    a17a:	bd70      	pop	{r4, r5, r6, pc}
    a17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a17e:	f7fd fbfd 	bl	797c <__retarget_lock_release_recursive>
    a182:	e7db      	b.n	a13c <_fclose_r+0x74>
    a184:	6921      	ldr	r1, [r4, #16]
    a186:	4630      	mov	r0, r6
    a188:	f7fd fcc8 	bl	7b1c <_free_r>
    a18c:	e7bd      	b.n	a10a <_fclose_r+0x42>
    a18e:	bf00      	nop

0000a190 <__sflush_r>:
    a190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    a194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a198:	460c      	mov	r4, r1
    a19a:	0711      	lsls	r1, r2, #28
    a19c:	4680      	mov	r8, r0
    a19e:	d447      	bmi.n	a230 <__sflush_r+0xa0>
    a1a0:	6863      	ldr	r3, [r4, #4]
    a1a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    a1a6:	2b00      	cmp	r3, #0
    a1a8:	81a2      	strh	r2, [r4, #12]
    a1aa:	dd5e      	ble.n	a26a <__sflush_r+0xda>
    a1ac:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    a1ae:	2d00      	cmp	r5, #0
    a1b0:	d058      	beq.n	a264 <__sflush_r+0xd4>
    a1b2:	2300      	movs	r3, #0
    a1b4:	f8d8 6000 	ldr.w	r6, [r8]
    a1b8:	f8c8 3000 	str.w	r3, [r8]
    a1bc:	b293      	uxth	r3, r2
    a1be:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    a1c2:	d156      	bne.n	a272 <__sflush_r+0xe2>
    a1c4:	2301      	movs	r3, #1
    a1c6:	69e1      	ldr	r1, [r4, #28]
    a1c8:	4640      	mov	r0, r8
    a1ca:	47a8      	blx	r5
    a1cc:	1c43      	adds	r3, r0, #1
    a1ce:	d067      	beq.n	a2a0 <__sflush_r+0x110>
    a1d0:	89a3      	ldrh	r3, [r4, #12]
    a1d2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    a1d4:	075f      	lsls	r7, r3, #29
    a1d6:	d505      	bpl.n	a1e4 <__sflush_r+0x54>
    a1d8:	6863      	ldr	r3, [r4, #4]
    a1da:	1ac0      	subs	r0, r0, r3
    a1dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a1de:	b10b      	cbz	r3, a1e4 <__sflush_r+0x54>
    a1e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a1e2:	1ac0      	subs	r0, r0, r3
    a1e4:	69e1      	ldr	r1, [r4, #28]
    a1e6:	4602      	mov	r2, r0
    a1e8:	2300      	movs	r3, #0
    a1ea:	4640      	mov	r0, r8
    a1ec:	47a8      	blx	r5
    a1ee:	1c41      	adds	r1, r0, #1
    a1f0:	d141      	bne.n	a276 <__sflush_r+0xe6>
    a1f2:	f8d8 3000 	ldr.w	r3, [r8]
    a1f6:	2b00      	cmp	r3, #0
    a1f8:	d03d      	beq.n	a276 <__sflush_r+0xe6>
    a1fa:	2b1d      	cmp	r3, #29
    a1fc:	d001      	beq.n	a202 <__sflush_r+0x72>
    a1fe:	2b16      	cmp	r3, #22
    a200:	d156      	bne.n	a2b0 <__sflush_r+0x120>
    a202:	89a3      	ldrh	r3, [r4, #12]
    a204:	6922      	ldr	r2, [r4, #16]
    a206:	6022      	str	r2, [r4, #0]
    a208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    a20c:	2100      	movs	r1, #0
    a20e:	6061      	str	r1, [r4, #4]
    a210:	81a3      	strh	r3, [r4, #12]
    a212:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a214:	f8c8 6000 	str.w	r6, [r8]
    a218:	b321      	cbz	r1, a264 <__sflush_r+0xd4>
    a21a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    a21e:	4299      	cmp	r1, r3
    a220:	d002      	beq.n	a228 <__sflush_r+0x98>
    a222:	4640      	mov	r0, r8
    a224:	f7fd fc7a 	bl	7b1c <_free_r>
    a228:	2000      	movs	r0, #0
    a22a:	6320      	str	r0, [r4, #48]	; 0x30
    a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a230:	6926      	ldr	r6, [r4, #16]
    a232:	b1be      	cbz	r6, a264 <__sflush_r+0xd4>
    a234:	b293      	uxth	r3, r2
    a236:	6825      	ldr	r5, [r4, #0]
    a238:	6026      	str	r6, [r4, #0]
    a23a:	079a      	lsls	r2, r3, #30
    a23c:	bf0c      	ite	eq
    a23e:	6963      	ldreq	r3, [r4, #20]
    a240:	2300      	movne	r3, #0
    a242:	1bad      	subs	r5, r5, r6
    a244:	60a3      	str	r3, [r4, #8]
    a246:	e00b      	b.n	a260 <__sflush_r+0xd0>
    a248:	462b      	mov	r3, r5
    a24a:	4632      	mov	r2, r6
    a24c:	69e1      	ldr	r1, [r4, #28]
    a24e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    a250:	4640      	mov	r0, r8
    a252:	47b8      	blx	r7
    a254:	f1b0 0c00 	subs.w	ip, r0, #0
    a258:	eba5 050c 	sub.w	r5, r5, ip
    a25c:	4466      	add	r6, ip
    a25e:	dd17      	ble.n	a290 <__sflush_r+0x100>
    a260:	2d00      	cmp	r5, #0
    a262:	dcf1      	bgt.n	a248 <__sflush_r+0xb8>
    a264:	2000      	movs	r0, #0
    a266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a26a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a26c:	2b00      	cmp	r3, #0
    a26e:	dc9d      	bgt.n	a1ac <__sflush_r+0x1c>
    a270:	e7f8      	b.n	a264 <__sflush_r+0xd4>
    a272:	6d20      	ldr	r0, [r4, #80]	; 0x50
    a274:	e7ae      	b.n	a1d4 <__sflush_r+0x44>
    a276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a27a:	6922      	ldr	r2, [r4, #16]
    a27c:	6022      	str	r2, [r4, #0]
    a27e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    a282:	81a3      	strh	r3, [r4, #12]
    a284:	2200      	movs	r2, #0
    a286:	04db      	lsls	r3, r3, #19
    a288:	6062      	str	r2, [r4, #4]
    a28a:	d5c2      	bpl.n	a212 <__sflush_r+0x82>
    a28c:	6520      	str	r0, [r4, #80]	; 0x50
    a28e:	e7c0      	b.n	a212 <__sflush_r+0x82>
    a290:	89a3      	ldrh	r3, [r4, #12]
    a292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a296:	f04f 30ff 	mov.w	r0, #4294967295
    a29a:	81a3      	strh	r3, [r4, #12]
    a29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2a0:	f8d8 3000 	ldr.w	r3, [r8]
    a2a4:	2b00      	cmp	r3, #0
    a2a6:	d093      	beq.n	a1d0 <__sflush_r+0x40>
    a2a8:	2b1d      	cmp	r3, #29
    a2aa:	d006      	beq.n	a2ba <__sflush_r+0x12a>
    a2ac:	2b16      	cmp	r3, #22
    a2ae:	d004      	beq.n	a2ba <__sflush_r+0x12a>
    a2b0:	89a3      	ldrh	r3, [r4, #12]
    a2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a2b6:	81a3      	strh	r3, [r4, #12]
    a2b8:	e7d5      	b.n	a266 <__sflush_r+0xd6>
    a2ba:	f8c8 6000 	str.w	r6, [r8]
    a2be:	e7d1      	b.n	a264 <__sflush_r+0xd4>

0000a2c0 <_fflush_r>:
    a2c0:	b538      	push	{r3, r4, r5, lr}
    a2c2:	460c      	mov	r4, r1
    a2c4:	4605      	mov	r5, r0
    a2c6:	b108      	cbz	r0, a2cc <_fflush_r+0xc>
    a2c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a2ca:	b303      	cbz	r3, a30e <_fflush_r+0x4e>
    a2cc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    a2d0:	b188      	cbz	r0, a2f6 <_fflush_r+0x36>
    a2d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a2d4:	07db      	lsls	r3, r3, #31
    a2d6:	d401      	bmi.n	a2dc <_fflush_r+0x1c>
    a2d8:	0581      	lsls	r1, r0, #22
    a2da:	d50f      	bpl.n	a2fc <_fflush_r+0x3c>
    a2dc:	4628      	mov	r0, r5
    a2de:	4621      	mov	r1, r4
    a2e0:	f7ff ff56 	bl	a190 <__sflush_r>
    a2e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a2e6:	07da      	lsls	r2, r3, #31
    a2e8:	4605      	mov	r5, r0
    a2ea:	d402      	bmi.n	a2f2 <_fflush_r+0x32>
    a2ec:	89a3      	ldrh	r3, [r4, #12]
    a2ee:	059b      	lsls	r3, r3, #22
    a2f0:	d508      	bpl.n	a304 <_fflush_r+0x44>
    a2f2:	4628      	mov	r0, r5
    a2f4:	bd38      	pop	{r3, r4, r5, pc}
    a2f6:	4605      	mov	r5, r0
    a2f8:	4628      	mov	r0, r5
    a2fa:	bd38      	pop	{r3, r4, r5, pc}
    a2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a2fe:	f7fd fb3b 	bl	7978 <__retarget_lock_acquire_recursive>
    a302:	e7eb      	b.n	a2dc <_fflush_r+0x1c>
    a304:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a306:	f7fd fb39 	bl	797c <__retarget_lock_release_recursive>
    a30a:	4628      	mov	r0, r5
    a30c:	bd38      	pop	{r3, r4, r5, pc}
    a30e:	f7fd f89f 	bl	7450 <__sinit>
    a312:	e7db      	b.n	a2cc <_fflush_r+0xc>

0000a314 <_localeconv_r>:
    a314:	4800      	ldr	r0, [pc, #0]	; (a318 <_localeconv_r+0x4>)
    a316:	4770      	bx	lr
    a318:	1fff0d38 	.word	0x1fff0d38

0000a31c <__libc_fini_array>:
    a31c:	b538      	push	{r3, r4, r5, lr}
    a31e:	4d07      	ldr	r5, [pc, #28]	; (a33c <__libc_fini_array+0x20>)
    a320:	4c07      	ldr	r4, [pc, #28]	; (a340 <__libc_fini_array+0x24>)
    a322:	1b2c      	subs	r4, r5, r4
    a324:	10a4      	asrs	r4, r4, #2
    a326:	d005      	beq.n	a334 <__libc_fini_array+0x18>
    a328:	3c01      	subs	r4, #1
    a32a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    a32e:	4798      	blx	r3
    a330:	2c00      	cmp	r4, #0
    a332:	d1f9      	bne.n	a328 <__libc_fini_array+0xc>
    a334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a338:	f003 bc04 	b.w	db44 <__init_array_end>
	...
    a344:	ffffffff 	.word	0xffffffff
    a348:	ffffffff 	.word	0xffffffff
    a34c:	ffffffff 	.word	0xffffffff

0000a350 <memchr>:
    a350:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a354:	2a10      	cmp	r2, #16
    a356:	db2b      	blt.n	a3b0 <memchr+0x60>
    a358:	f010 0f07 	tst.w	r0, #7
    a35c:	d008      	beq.n	a370 <memchr+0x20>
    a35e:	f810 3b01 	ldrb.w	r3, [r0], #1
    a362:	3a01      	subs	r2, #1
    a364:	428b      	cmp	r3, r1
    a366:	d02d      	beq.n	a3c4 <memchr+0x74>
    a368:	f010 0f07 	tst.w	r0, #7
    a36c:	b342      	cbz	r2, a3c0 <memchr+0x70>
    a36e:	d1f6      	bne.n	a35e <memchr+0xe>
    a370:	b4f0      	push	{r4, r5, r6, r7}
    a372:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a376:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    a37a:	f022 0407 	bic.w	r4, r2, #7
    a37e:	f07f 0700 	mvns.w	r7, #0
    a382:	2300      	movs	r3, #0
    a384:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    a388:	3c08      	subs	r4, #8
    a38a:	ea85 0501 	eor.w	r5, r5, r1
    a38e:	ea86 0601 	eor.w	r6, r6, r1
    a392:	fa85 f547 	uadd8	r5, r5, r7
    a396:	faa3 f587 	sel	r5, r3, r7
    a39a:	fa86 f647 	uadd8	r6, r6, r7
    a39e:	faa5 f687 	sel	r6, r5, r7
    a3a2:	b98e      	cbnz	r6, a3c8 <memchr+0x78>
    a3a4:	d1ee      	bne.n	a384 <memchr+0x34>
    a3a6:	bcf0      	pop	{r4, r5, r6, r7}
    a3a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a3ac:	f002 0207 	and.w	r2, r2, #7
    a3b0:	b132      	cbz	r2, a3c0 <memchr+0x70>
    a3b2:	f810 3b01 	ldrb.w	r3, [r0], #1
    a3b6:	3a01      	subs	r2, #1
    a3b8:	ea83 0301 	eor.w	r3, r3, r1
    a3bc:	b113      	cbz	r3, a3c4 <memchr+0x74>
    a3be:	d1f8      	bne.n	a3b2 <memchr+0x62>
    a3c0:	2000      	movs	r0, #0
    a3c2:	4770      	bx	lr
    a3c4:	3801      	subs	r0, #1
    a3c6:	4770      	bx	lr
    a3c8:	2d00      	cmp	r5, #0
    a3ca:	bf06      	itte	eq
    a3cc:	4635      	moveq	r5, r6
    a3ce:	3803      	subeq	r0, #3
    a3d0:	3807      	subne	r0, #7
    a3d2:	f015 0f01 	tst.w	r5, #1
    a3d6:	d107      	bne.n	a3e8 <memchr+0x98>
    a3d8:	3001      	adds	r0, #1
    a3da:	f415 7f80 	tst.w	r5, #256	; 0x100
    a3de:	bf02      	ittt	eq
    a3e0:	3001      	addeq	r0, #1
    a3e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    a3e6:	3001      	addeq	r0, #1
    a3e8:	bcf0      	pop	{r4, r5, r6, r7}
    a3ea:	3801      	subs	r0, #1
    a3ec:	4770      	bx	lr
    a3ee:	bf00      	nop

0000a3f0 <frexp>:
    a3f0:	ec53 2b10 	vmov	r2, r3, d0
    a3f4:	b570      	push	{r4, r5, r6, lr}
    a3f6:	4e16      	ldr	r6, [pc, #88]	; (a450 <frexp+0x60>)
    a3f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    a3fc:	2500      	movs	r5, #0
    a3fe:	42b1      	cmp	r1, r6
    a400:	4604      	mov	r4, r0
    a402:	6005      	str	r5, [r0, #0]
    a404:	dc21      	bgt.n	a44a <frexp+0x5a>
    a406:	ee10 6a10 	vmov	r6, s0
    a40a:	430e      	orrs	r6, r1
    a40c:	d01d      	beq.n	a44a <frexp+0x5a>
    a40e:	4e11      	ldr	r6, [pc, #68]	; (a454 <frexp+0x64>)
    a410:	401e      	ands	r6, r3
    a412:	4618      	mov	r0, r3
    a414:	b966      	cbnz	r6, a430 <frexp+0x40>
    a416:	4619      	mov	r1, r3
    a418:	2200      	movs	r2, #0
    a41a:	ee10 0a10 	vmov	r0, s0
    a41e:	4b0e      	ldr	r3, [pc, #56]	; (a458 <frexp+0x68>)
    a420:	f7fc f828 	bl	6474 <__aeabi_dmul>
    a424:	f06f 0535 	mvn.w	r5, #53	; 0x35
    a428:	4602      	mov	r2, r0
    a42a:	4608      	mov	r0, r1
    a42c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    a430:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
    a434:	1509      	asrs	r1, r1, #20
    a436:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
    a43a:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
    a43e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    a442:	4429      	add	r1, r5
    a444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    a448:	6021      	str	r1, [r4, #0]
    a44a:	ec43 2b10 	vmov	d0, r2, r3
    a44e:	bd70      	pop	{r4, r5, r6, pc}
    a450:	7fefffff 	.word	0x7fefffff
    a454:	7ff00000 	.word	0x7ff00000
    a458:	43500000 	.word	0x43500000

0000a45c <__register_exitproc>:
    a45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a460:	f8df a07c 	ldr.w	sl, [pc, #124]	; a4e0 <__register_exitproc+0x84>
    a464:	4606      	mov	r6, r0
    a466:	f8da 0000 	ldr.w	r0, [sl]
    a46a:	4698      	mov	r8, r3
    a46c:	460f      	mov	r7, r1
    a46e:	4691      	mov	r9, r2
    a470:	f7fd fa82 	bl	7978 <__retarget_lock_acquire_recursive>
    a474:	4b18      	ldr	r3, [pc, #96]	; (a4d8 <__register_exitproc+0x7c>)
    a476:	681c      	ldr	r4, [r3, #0]
    a478:	b324      	cbz	r4, a4c4 <__register_exitproc+0x68>
    a47a:	6865      	ldr	r5, [r4, #4]
    a47c:	2d1f      	cmp	r5, #31
    a47e:	dc24      	bgt.n	a4ca <__register_exitproc+0x6e>
    a480:	b95e      	cbnz	r6, a49a <__register_exitproc+0x3e>
    a482:	1c6b      	adds	r3, r5, #1
    a484:	3502      	adds	r5, #2
    a486:	f8da 0000 	ldr.w	r0, [sl]
    a48a:	6063      	str	r3, [r4, #4]
    a48c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    a490:	f7fd fa74 	bl	797c <__retarget_lock_release_recursive>
    a494:	2000      	movs	r0, #0
    a496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a49a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    a49e:	2301      	movs	r3, #1
    a4a0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    a4a4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    a4a8:	40ab      	lsls	r3, r5
    a4aa:	431a      	orrs	r2, r3
    a4ac:	2e02      	cmp	r6, #2
    a4ae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    a4b2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    a4b6:	d1e4      	bne.n	a482 <__register_exitproc+0x26>
    a4b8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    a4bc:	431a      	orrs	r2, r3
    a4be:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    a4c2:	e7de      	b.n	a482 <__register_exitproc+0x26>
    a4c4:	4c05      	ldr	r4, [pc, #20]	; (a4dc <__register_exitproc+0x80>)
    a4c6:	601c      	str	r4, [r3, #0]
    a4c8:	e7d7      	b.n	a47a <__register_exitproc+0x1e>
    a4ca:	f8da 0000 	ldr.w	r0, [sl]
    a4ce:	f7fd fa55 	bl	797c <__retarget_lock_release_recursive>
    a4d2:	f04f 30ff 	mov.w	r0, #4294967295
    a4d6:	e7de      	b.n	a496 <__register_exitproc+0x3a>
    a4d8:	1fff654c 	.word	0x1fff654c
    a4dc:	1fff6550 	.word	0x1fff6550
    a4e0:	1fff0edc 	.word	0x1fff0edc

0000a4e4 <__assert_func>:
    a4e4:	b500      	push	{lr}
    a4e6:	4c0b      	ldr	r4, [pc, #44]	; (a514 <__assert_func+0x30>)
    a4e8:	6825      	ldr	r5, [r4, #0]
    a4ea:	4614      	mov	r4, r2
    a4ec:	68ee      	ldr	r6, [r5, #12]
    a4ee:	461a      	mov	r2, r3
    a4f0:	b085      	sub	sp, #20
    a4f2:	4603      	mov	r3, r0
    a4f4:	460d      	mov	r5, r1
    a4f6:	b14c      	cbz	r4, a50c <__assert_func+0x28>
    a4f8:	4907      	ldr	r1, [pc, #28]	; (a518 <__assert_func+0x34>)
    a4fa:	9500      	str	r5, [sp, #0]
    a4fc:	e9cd 1401 	strd	r1, r4, [sp, #4]
    a500:	4630      	mov	r0, r6
    a502:	4906      	ldr	r1, [pc, #24]	; (a51c <__assert_func+0x38>)
    a504:	f001 f8b0 	bl	b668 <fiprintf>
    a508:	f7fa fc9a 	bl	4e40 <abort>
    a50c:	4904      	ldr	r1, [pc, #16]	; (a520 <__assert_func+0x3c>)
    a50e:	460c      	mov	r4, r1
    a510:	e7f3      	b.n	a4fa <__assert_func+0x16>
    a512:	bf00      	nop
    a514:	1fff0ed8 	.word	0x1fff0ed8
    a518:	0000da60 	.word	0x0000da60
    a51c:	0000da70 	.word	0x0000da70
    a520:	0000da6c 	.word	0x0000da6c

0000a524 <_calloc_r>:
    a524:	b538      	push	{r3, r4, r5, lr}
    a526:	fba1 1402 	umull	r1, r4, r1, r2
    a52a:	bb8c      	cbnz	r4, a590 <_calloc_r+0x6c>
    a52c:	f7fc fa52 	bl	69d4 <_malloc_r>
    a530:	4605      	mov	r5, r0
    a532:	b1e0      	cbz	r0, a56e <_calloc_r+0x4a>
    a534:	f850 2c04 	ldr.w	r2, [r0, #-4]
    a538:	f022 0203 	bic.w	r2, r2, #3
    a53c:	3a04      	subs	r2, #4
    a53e:	2a24      	cmp	r2, #36	; 0x24
    a540:	d817      	bhi.n	a572 <_calloc_r+0x4e>
    a542:	2a13      	cmp	r2, #19
    a544:	d91a      	bls.n	a57c <_calloc_r+0x58>
    a546:	2a1b      	cmp	r2, #27
    a548:	e9c0 4400 	strd	r4, r4, [r0]
    a54c:	d91d      	bls.n	a58a <_calloc_r+0x66>
    a54e:	2a24      	cmp	r2, #36	; 0x24
    a550:	bf14      	ite	ne
    a552:	f100 0210 	addne.w	r2, r0, #16
    a556:	f100 0218 	addeq.w	r2, r0, #24
    a55a:	f04f 0300 	mov.w	r3, #0
    a55e:	e9c0 4402 	strd	r4, r4, [r0, #8]
    a562:	bf04      	itt	eq
    a564:	6104      	streq	r4, [r0, #16]
    a566:	6144      	streq	r4, [r0, #20]
    a568:	e9c2 3300 	strd	r3, r3, [r2]
    a56c:	6093      	str	r3, [r2, #8]
    a56e:	4628      	mov	r0, r5
    a570:	bd38      	pop	{r3, r4, r5, pc}
    a572:	4621      	mov	r1, r4
    a574:	f7fd f8e2 	bl	773c <memset>
    a578:	4628      	mov	r0, r5
    a57a:	bd38      	pop	{r3, r4, r5, pc}
    a57c:	4602      	mov	r2, r0
    a57e:	2300      	movs	r3, #0
    a580:	e9c2 3300 	strd	r3, r3, [r2]
    a584:	6093      	str	r3, [r2, #8]
    a586:	4628      	mov	r0, r5
    a588:	bd38      	pop	{r3, r4, r5, pc}
    a58a:	f100 0208 	add.w	r2, r0, #8
    a58e:	e7f6      	b.n	a57e <_calloc_r+0x5a>
    a590:	f7fd f9c4 	bl	791c <__errno>
    a594:	230c      	movs	r3, #12
    a596:	2500      	movs	r5, #0
    a598:	6003      	str	r3, [r0, #0]
    a59a:	e7e8      	b.n	a56e <_calloc_r+0x4a>

0000a59c <quorem>:
    a59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a5a0:	6903      	ldr	r3, [r0, #16]
    a5a2:	690c      	ldr	r4, [r1, #16]
    a5a4:	42a3      	cmp	r3, r4
    a5a6:	b083      	sub	sp, #12
    a5a8:	f2c0 8087 	blt.w	a6ba <quorem+0x11e>
    a5ac:	3c01      	subs	r4, #1
    a5ae:	f101 0514 	add.w	r5, r1, #20
    a5b2:	00a3      	lsls	r3, r4, #2
    a5b4:	f100 0814 	add.w	r8, r0, #20
    a5b8:	9300      	str	r3, [sp, #0]
    a5ba:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    a5be:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    a5c2:	3301      	adds	r3, #1
    a5c4:	4681      	mov	r9, r0
    a5c6:	429a      	cmp	r2, r3
    a5c8:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    a5cc:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    a5d0:	9001      	str	r0, [sp, #4]
    a5d2:	fbb2 f6f3 	udiv	r6, r2, r3
    a5d6:	d33b      	bcc.n	a650 <quorem+0xb4>
    a5d8:	f04f 0c00 	mov.w	ip, #0
    a5dc:	46ae      	mov	lr, r5
    a5de:	4640      	mov	r0, r8
    a5e0:	46e2      	mov	sl, ip
    a5e2:	4663      	mov	r3, ip
    a5e4:	f85e bb04 	ldr.w	fp, [lr], #4
    a5e8:	6802      	ldr	r2, [r0, #0]
    a5ea:	fa1f fc8b 	uxth.w	ip, fp
    a5ee:	fb06 330c 	mla	r3, r6, ip, r3
    a5f2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    a5f6:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    a5fa:	fb06 cc0b 	mla	ip, r6, fp, ip
    a5fe:	b29b      	uxth	r3, r3
    a600:	ebaa 0303 	sub.w	r3, sl, r3
    a604:	fa1f fa8c 	uxth.w	sl, ip
    a608:	fa13 f382 	uxtah	r3, r3, r2
    a60c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    a610:	eb02 4223 	add.w	r2, r2, r3, asr #16
    a614:	b29b      	uxth	r3, r3
    a616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    a61a:	4577      	cmp	r7, lr
    a61c:	f840 3b04 	str.w	r3, [r0], #4
    a620:	ea4f 4a22 	mov.w	sl, r2, asr #16
    a624:	ea4f 431c 	mov.w	r3, ip, lsr #16
    a628:	d2dc      	bcs.n	a5e4 <quorem+0x48>
    a62a:	9b00      	ldr	r3, [sp, #0]
    a62c:	f858 3003 	ldr.w	r3, [r8, r3]
    a630:	b973      	cbnz	r3, a650 <quorem+0xb4>
    a632:	9b01      	ldr	r3, [sp, #4]
    a634:	3b04      	subs	r3, #4
    a636:	4598      	cmp	r8, r3
    a638:	d304      	bcc.n	a644 <quorem+0xa8>
    a63a:	e007      	b.n	a64c <quorem+0xb0>
    a63c:	4598      	cmp	r8, r3
    a63e:	f104 34ff 	add.w	r4, r4, #4294967295
    a642:	d203      	bcs.n	a64c <quorem+0xb0>
    a644:	f853 2904 	ldr.w	r2, [r3], #-4
    a648:	2a00      	cmp	r2, #0
    a64a:	d0f7      	beq.n	a63c <quorem+0xa0>
    a64c:	f8c9 4010 	str.w	r4, [r9, #16]
    a650:	4648      	mov	r0, r9
    a652:	f7fd fe05 	bl	8260 <__mcmp>
    a656:	2800      	cmp	r0, #0
    a658:	db2b      	blt.n	a6b2 <quorem+0x116>
    a65a:	3601      	adds	r6, #1
    a65c:	4641      	mov	r1, r8
    a65e:	2300      	movs	r3, #0
    a660:	f855 0b04 	ldr.w	r0, [r5], #4
    a664:	f8d1 c000 	ldr.w	ip, [r1]
    a668:	b282      	uxth	r2, r0
    a66a:	1a9a      	subs	r2, r3, r2
    a66c:	0c03      	lsrs	r3, r0, #16
    a66e:	fa12 f28c 	uxtah	r2, r2, ip
    a672:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    a676:	eb03 4322 	add.w	r3, r3, r2, asr #16
    a67a:	b292      	uxth	r2, r2
    a67c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    a680:	42af      	cmp	r7, r5
    a682:	f841 2b04 	str.w	r2, [r1], #4
    a686:	ea4f 4323 	mov.w	r3, r3, asr #16
    a68a:	d2e9      	bcs.n	a660 <quorem+0xc4>
    a68c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    a690:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    a694:	b96a      	cbnz	r2, a6b2 <quorem+0x116>
    a696:	3b04      	subs	r3, #4
    a698:	4598      	cmp	r8, r3
    a69a:	d304      	bcc.n	a6a6 <quorem+0x10a>
    a69c:	e007      	b.n	a6ae <quorem+0x112>
    a69e:	4598      	cmp	r8, r3
    a6a0:	f104 34ff 	add.w	r4, r4, #4294967295
    a6a4:	d203      	bcs.n	a6ae <quorem+0x112>
    a6a6:	f853 2904 	ldr.w	r2, [r3], #-4
    a6aa:	2a00      	cmp	r2, #0
    a6ac:	d0f7      	beq.n	a69e <quorem+0x102>
    a6ae:	f8c9 4010 	str.w	r4, [r9, #16]
    a6b2:	4630      	mov	r0, r6
    a6b4:	b003      	add	sp, #12
    a6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6ba:	2000      	movs	r0, #0
    a6bc:	b003      	add	sp, #12
    a6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6c2:	bf00      	nop
    a6c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000a6c8 <_dtoa_r>:
    a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6cc:	ed2d 8b06 	vpush	{d8-d10}
    a6d0:	b095      	sub	sp, #84	; 0x54
    a6d2:	ed8d 0b02 	vstr	d0, [sp, #8]
    a6d6:	9101      	str	r1, [sp, #4]
    a6d8:	6b81      	ldr	r1, [r0, #56]	; 0x38
    a6da:	9d24      	ldr	r5, [sp, #144]	; 0x90
    a6dc:	9209      	str	r2, [sp, #36]	; 0x24
    a6de:	ec59 8b10 	vmov	r8, r9, d0
    a6e2:	4604      	mov	r4, r0
    a6e4:	9306      	str	r3, [sp, #24]
    a6e6:	b141      	cbz	r1, a6fa <_dtoa_r+0x32>
    a6e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    a6ea:	604a      	str	r2, [r1, #4]
    a6ec:	2301      	movs	r3, #1
    a6ee:	4093      	lsls	r3, r2
    a6f0:	608b      	str	r3, [r1, #8]
    a6f2:	f7fd fb55 	bl	7da0 <_Bfree>
    a6f6:	2300      	movs	r3, #0
    a6f8:	63a3      	str	r3, [r4, #56]	; 0x38
    a6fa:	f1b9 0a00 	subs.w	sl, r9, #0
    a6fe:	bfb4      	ite	lt
    a700:	2301      	movlt	r3, #1
    a702:	2300      	movge	r3, #0
    a704:	602b      	str	r3, [r5, #0]
    a706:	4b7c      	ldr	r3, [pc, #496]	; (a8f8 <_dtoa_r+0x230>)
    a708:	bfbc      	itt	lt
    a70a:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
    a70e:	f8cd a00c 	strlt.w	sl, [sp, #12]
    a712:	ea33 030a 	bics.w	r3, r3, sl
    a716:	f000 80b3 	beq.w	a880 <_dtoa_r+0x1b8>
    a71a:	ed9d 7b02 	vldr	d7, [sp, #8]
    a71e:	2200      	movs	r2, #0
    a720:	ec51 0b17 	vmov	r0, r1, d7
    a724:	eeb0 9a47 	vmov.f32	s18, s14
    a728:	eef0 9a67 	vmov.f32	s19, s15
    a72c:	2300      	movs	r3, #0
    a72e:	f7fc f909 	bl	6944 <__aeabi_dcmpeq>
    a732:	4607      	mov	r7, r0
    a734:	b188      	cbz	r0, a75a <_dtoa_r+0x92>
    a736:	9a06      	ldr	r2, [sp, #24]
    a738:	2301      	movs	r3, #1
    a73a:	6013      	str	r3, [r2, #0]
    a73c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a73e:	2b00      	cmp	r3, #0
    a740:	f000 83ce 	beq.w	aee0 <_dtoa_r+0x818>
    a744:	4b6d      	ldr	r3, [pc, #436]	; (a8fc <_dtoa_r+0x234>)
    a746:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a748:	6013      	str	r3, [r2, #0]
    a74a:	3b01      	subs	r3, #1
    a74c:	9300      	str	r3, [sp, #0]
    a74e:	9800      	ldr	r0, [sp, #0]
    a750:	b015      	add	sp, #84	; 0x54
    a752:	ecbd 8b06 	vpop	{d8-d10}
    a756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a75a:	aa12      	add	r2, sp, #72	; 0x48
    a75c:	a913      	add	r1, sp, #76	; 0x4c
    a75e:	4620      	mov	r0, r4
    a760:	eeb0 0a49 	vmov.f32	s0, s18
    a764:	eef0 0a69 	vmov.f32	s1, s19
    a768:	f7fd fe46 	bl	83f8 <__d2b>
    a76c:	eeb0 8a49 	vmov.f32	s16, s18
    a770:	eef0 8a69 	vmov.f32	s17, s19
    a774:	ea5f 561a 	movs.w	r6, sl, lsr #20
    a778:	4605      	mov	r5, r0
    a77a:	f040 8099 	bne.w	a8b0 <_dtoa_r+0x1e8>
    a77e:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
    a782:	443e      	add	r6, r7
    a784:	f206 4332 	addw	r3, r6, #1074	; 0x432
    a788:	2b20      	cmp	r3, #32
    a78a:	f340 83c2 	ble.w	af12 <_dtoa_r+0x84a>
    a78e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    a792:	fa0a fa03 	lsl.w	sl, sl, r3
    a796:	f206 4312 	addw	r3, r6, #1042	; 0x412
    a79a:	fa28 f003 	lsr.w	r0, r8, r3
    a79e:	ea4a 0000 	orr.w	r0, sl, r0
    a7a2:	f7fb fded 	bl	6380 <__aeabi_ui2d>
    a7a6:	2301      	movs	r3, #1
    a7a8:	3e01      	subs	r6, #1
    a7aa:	930d      	str	r3, [sp, #52]	; 0x34
    a7ac:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    a7b0:	4b53      	ldr	r3, [pc, #332]	; (a900 <_dtoa_r+0x238>)
    a7b2:	2200      	movs	r2, #0
    a7b4:	f7fb fca6 	bl	6104 <__aeabi_dsub>
    a7b8:	a349      	add	r3, pc, #292	; (adr r3, a8e0 <_dtoa_r+0x218>)
    a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7be:	f7fb fe59 	bl	6474 <__aeabi_dmul>
    a7c2:	a349      	add	r3, pc, #292	; (adr r3, a8e8 <_dtoa_r+0x220>)
    a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7c8:	f7fb fc9e 	bl	6108 <__adddf3>
    a7cc:	4680      	mov	r8, r0
    a7ce:	4630      	mov	r0, r6
    a7d0:	4689      	mov	r9, r1
    a7d2:	f7fb fde5 	bl	63a0 <__aeabi_i2d>
    a7d6:	a346      	add	r3, pc, #280	; (adr r3, a8f0 <_dtoa_r+0x228>)
    a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7dc:	f7fb fe4a 	bl	6474 <__aeabi_dmul>
    a7e0:	4602      	mov	r2, r0
    a7e2:	460b      	mov	r3, r1
    a7e4:	4640      	mov	r0, r8
    a7e6:	4649      	mov	r1, r9
    a7e8:	f7fb fc8e 	bl	6108 <__adddf3>
    a7ec:	4680      	mov	r8, r0
    a7ee:	4689      	mov	r9, r1
    a7f0:	f002 fbfc 	bl	cfec <__aeabi_d2iz>
    a7f4:	2200      	movs	r2, #0
    a7f6:	4683      	mov	fp, r0
    a7f8:	2300      	movs	r3, #0
    a7fa:	4640      	mov	r0, r8
    a7fc:	4649      	mov	r1, r9
    a7fe:	f7fc f8ab 	bl	6958 <__aeabi_dcmplt>
    a802:	2800      	cmp	r0, #0
    a804:	f040 835f 	bne.w	aec6 <_dtoa_r+0x7fe>
    a808:	f1bb 0f16 	cmp.w	fp, #22
    a80c:	f200 834e 	bhi.w	aeac <_dtoa_r+0x7e4>
    a810:	4b3c      	ldr	r3, [pc, #240]	; (a904 <_dtoa_r+0x23c>)
    a812:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    a816:	e9d3 2300 	ldrd	r2, r3, [r3]
    a81a:	ec51 0b19 	vmov	r0, r1, d9
    a81e:	f7fc f89b 	bl	6958 <__aeabi_dcmplt>
    a822:	2800      	cmp	r0, #0
    a824:	d074      	beq.n	a910 <_dtoa_r+0x248>
    a826:	2300      	movs	r3, #0
    a828:	1bbf      	subs	r7, r7, r6
    a82a:	930c      	str	r3, [sp, #48]	; 0x30
    a82c:	1e7b      	subs	r3, r7, #1
    a82e:	f10b 3bff 	add.w	fp, fp, #4294967295
    a832:	9304      	str	r3, [sp, #16]
    a834:	f100 8341 	bmi.w	aeba <_dtoa_r+0x7f2>
    a838:	2300      	movs	r3, #0
    a83a:	9308      	str	r3, [sp, #32]
    a83c:	f1bb 0f00 	cmp.w	fp, #0
    a840:	da6d      	bge.n	a91e <_dtoa_r+0x256>
    a842:	9b08      	ldr	r3, [sp, #32]
    a844:	f8cd b014 	str.w	fp, [sp, #20]
    a848:	eba3 030b 	sub.w	r3, r3, fp
    a84c:	9308      	str	r3, [sp, #32]
    a84e:	f1cb 0300 	rsb	r3, fp, #0
    a852:	930b      	str	r3, [sp, #44]	; 0x2c
    a854:	9b01      	ldr	r3, [sp, #4]
    a856:	2b09      	cmp	r3, #9
    a858:	f04f 0b00 	mov.w	fp, #0
    a85c:	d868      	bhi.n	a930 <_dtoa_r+0x268>
    a85e:	2b05      	cmp	r3, #5
    a860:	f340 8355 	ble.w	af0e <_dtoa_r+0x846>
    a864:	3b04      	subs	r3, #4
    a866:	9301      	str	r3, [sp, #4]
    a868:	2600      	movs	r6, #0
    a86a:	9b01      	ldr	r3, [sp, #4]
    a86c:	3b02      	subs	r3, #2
    a86e:	2b03      	cmp	r3, #3
    a870:	f200 86a4 	bhi.w	b5bc <_dtoa_r+0xef4>
    a874:	e8df f013 	tbh	[pc, r3, lsl #1]
    a878:	04630466 	.word	0x04630466
    a87c:	043e045b 	.word	0x043e045b
    a880:	9a06      	ldr	r2, [sp, #24]
    a882:	f3ca 0a13 	ubfx	sl, sl, #0, #20
    a886:	f242 730f 	movw	r3, #9999	; 0x270f
    a88a:	ea5a 0a08 	orrs.w	sl, sl, r8
    a88e:	6013      	str	r3, [r2, #0]
    a890:	d11d      	bne.n	a8ce <_dtoa_r+0x206>
    a892:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a894:	2b00      	cmp	r3, #0
    a896:	f000 86a0 	beq.w	b5da <_dtoa_r+0xf12>
    a89a:	4b1b      	ldr	r3, [pc, #108]	; (a908 <_dtoa_r+0x240>)
    a89c:	9300      	str	r3, [sp, #0]
    a89e:	3308      	adds	r3, #8
    a8a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a8a2:	9800      	ldr	r0, [sp, #0]
    a8a4:	6013      	str	r3, [r2, #0]
    a8a6:	b015      	add	sp, #84	; 0x54
    a8a8:	ecbd 8b06 	vpop	{d8-d10}
    a8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8b0:	ee18 3a90 	vmov	r3, s17
    a8b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a8b8:	ec51 0b19 	vmov	r0, r1, d9
    a8bc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    a8c0:	970d      	str	r7, [sp, #52]	; 0x34
    a8c2:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    a8c6:	9f12      	ldr	r7, [sp, #72]	; 0x48
    a8c8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    a8cc:	e770      	b.n	a7b0 <_dtoa_r+0xe8>
    a8ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	f040 83f0 	bne.w	b0b6 <_dtoa_r+0x9ee>
    a8d6:	4b0d      	ldr	r3, [pc, #52]	; (a90c <_dtoa_r+0x244>)
    a8d8:	9300      	str	r3, [sp, #0]
    a8da:	e738      	b.n	a74e <_dtoa_r+0x86>
    a8dc:	f3af 8000 	nop.w
    a8e0:	636f4361 	.word	0x636f4361
    a8e4:	3fd287a7 	.word	0x3fd287a7
    a8e8:	8b60c8b3 	.word	0x8b60c8b3
    a8ec:	3fc68a28 	.word	0x3fc68a28
    a8f0:	509f79fb 	.word	0x509f79fb
    a8f4:	3fd34413 	.word	0x3fd34413
    a8f8:	7ff00000 	.word	0x7ff00000
    a8fc:	0000da3d 	.word	0x0000da3d
    a900:	3ff80000 	.word	0x3ff80000
    a904:	0000d928 	.word	0x0000d928
    a908:	0000daa0 	.word	0x0000daa0
    a90c:	0000daac 	.word	0x0000daac
    a910:	1bbf      	subs	r7, r7, r6
    a912:	1e7b      	subs	r3, r7, #1
    a914:	9304      	str	r3, [sp, #16]
    a916:	f100 849b 	bmi.w	b250 <_dtoa_r+0xb88>
    a91a:	900c      	str	r0, [sp, #48]	; 0x30
    a91c:	9008      	str	r0, [sp, #32]
    a91e:	9b04      	ldr	r3, [sp, #16]
    a920:	445b      	add	r3, fp
    a922:	e9cd 3b04 	strd	r3, fp, [sp, #16]
    a926:	2300      	movs	r3, #0
    a928:	930b      	str	r3, [sp, #44]	; 0x2c
    a92a:	9b01      	ldr	r3, [sp, #4]
    a92c:	2b09      	cmp	r3, #9
    a92e:	d996      	bls.n	a85e <_dtoa_r+0x196>
    a930:	2300      	movs	r3, #0
    a932:	2601      	movs	r6, #1
    a934:	f04f 32ff 	mov.w	r2, #4294967295
    a938:	9301      	str	r3, [sp, #4]
    a93a:	960a      	str	r6, [sp, #40]	; 0x28
    a93c:	9207      	str	r2, [sp, #28]
    a93e:	9309      	str	r3, [sp, #36]	; 0x24
    a940:	9b07      	ldr	r3, [sp, #28]
    a942:	930f      	str	r3, [sp, #60]	; 0x3c
    a944:	2100      	movs	r1, #0
    a946:	63e1      	str	r1, [r4, #60]	; 0x3c
    a948:	4620      	mov	r0, r4
    a94a:	f7fd fa03 	bl	7d54 <_Balloc>
    a94e:	9000      	str	r0, [sp, #0]
    a950:	2800      	cmp	r0, #0
    a952:	f000 863b 	beq.w	b5cc <_dtoa_r+0xf04>
    a956:	9b00      	ldr	r3, [sp, #0]
    a958:	63a3      	str	r3, [r4, #56]	; 0x38
    a95a:	9b07      	ldr	r3, [sp, #28]
    a95c:	2b0e      	cmp	r3, #14
    a95e:	f200 811e 	bhi.w	ab9e <_dtoa_r+0x4d6>
    a962:	2e00      	cmp	r6, #0
    a964:	f000 811b 	beq.w	ab9e <_dtoa_r+0x4d6>
    a968:	9905      	ldr	r1, [sp, #20]
    a96a:	2900      	cmp	r1, #0
    a96c:	f340 8472 	ble.w	b254 <_dtoa_r+0xb8c>
    a970:	4bd0      	ldr	r3, [pc, #832]	; (acb4 <_dtoa_r+0x5ec>)
    a972:	f001 020f 	and.w	r2, r1, #15
    a976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a97a:	ea4f 1821 	mov.w	r8, r1, asr #4
    a97e:	05c9      	lsls	r1, r1, #23
    a980:	e9d3 6700 	ldrd	r6, r7, [r3]
    a984:	f140 842e 	bpl.w	b1e4 <_dtoa_r+0xb1c>
    a988:	4bcb      	ldr	r3, [pc, #812]	; (acb8 <_dtoa_r+0x5f0>)
    a98a:	ec51 0b19 	vmov	r0, r1, d9
    a98e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    a992:	f7fb fe99 	bl	66c8 <__aeabi_ddiv>
    a996:	ec41 0b18 	vmov	d8, r0, r1
    a99a:	f008 080f 	and.w	r8, r8, #15
    a99e:	f04f 0a03 	mov.w	sl, #3
    a9a2:	f1b8 0f00 	cmp.w	r8, #0
    a9a6:	d013      	beq.n	a9d0 <_dtoa_r+0x308>
    a9a8:	f8df 930c 	ldr.w	r9, [pc, #780]	; acb8 <_dtoa_r+0x5f0>
    a9ac:	f018 0f01 	tst.w	r8, #1
    a9b0:	d009      	beq.n	a9c6 <_dtoa_r+0x2fe>
    a9b2:	4630      	mov	r0, r6
    a9b4:	4639      	mov	r1, r7
    a9b6:	e9d9 2300 	ldrd	r2, r3, [r9]
    a9ba:	f7fb fd5b 	bl	6474 <__aeabi_dmul>
    a9be:	f10a 0a01 	add.w	sl, sl, #1
    a9c2:	4606      	mov	r6, r0
    a9c4:	460f      	mov	r7, r1
    a9c6:	ea5f 0868 	movs.w	r8, r8, asr #1
    a9ca:	f109 0908 	add.w	r9, r9, #8
    a9ce:	d1ed      	bne.n	a9ac <_dtoa_r+0x2e4>
    a9d0:	ec51 0b18 	vmov	r0, r1, d8
    a9d4:	4632      	mov	r2, r6
    a9d6:	463b      	mov	r3, r7
    a9d8:	f7fb fe76 	bl	66c8 <__aeabi_ddiv>
    a9dc:	ec41 0b1a 	vmov	d10, r0, r1
    a9e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a9e2:	b15b      	cbz	r3, a9fc <_dtoa_r+0x334>
    a9e4:	ec57 6b1a 	vmov	r6, r7, d10
    a9e8:	4bb4      	ldr	r3, [pc, #720]	; (acbc <_dtoa_r+0x5f4>)
    a9ea:	ee1a 0a10 	vmov	r0, s20
    a9ee:	2200      	movs	r2, #0
    a9f0:	4639      	mov	r1, r7
    a9f2:	f7fb ffb1 	bl	6958 <__aeabi_dcmplt>
    a9f6:	2800      	cmp	r0, #0
    a9f8:	f040 854e 	bne.w	b498 <_dtoa_r+0xdd0>
    a9fc:	4650      	mov	r0, sl
    a9fe:	f7fb fccf 	bl	63a0 <__aeabi_i2d>
    aa02:	ec53 2b1a 	vmov	r2, r3, d10
    aa06:	f7fb fd35 	bl	6474 <__aeabi_dmul>
    aa0a:	4bad      	ldr	r3, [pc, #692]	; (acc0 <_dtoa_r+0x5f8>)
    aa0c:	2200      	movs	r2, #0
    aa0e:	f7fb fb7b 	bl	6108 <__adddf3>
    aa12:	9b07      	ldr	r3, [sp, #28]
    aa14:	4680      	mov	r8, r0
    aa16:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
    aa1a:	2b00      	cmp	r3, #0
    aa1c:	f000 80a5 	beq.w	ab6a <_dtoa_r+0x4a2>
    aa20:	9b05      	ldr	r3, [sp, #20]
    aa22:	9310      	str	r3, [sp, #64]	; 0x40
    aa24:	9b07      	ldr	r3, [sp, #28]
    aa26:	930e      	str	r3, [sp, #56]	; 0x38
    aa28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	f000 84bc 	beq.w	b3a8 <_dtoa_r+0xce0>
    aa30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    aa32:	4ba0      	ldr	r3, [pc, #640]	; (acb4 <_dtoa_r+0x5ec>)
    aa34:	49a3      	ldr	r1, [pc, #652]	; (acc4 <_dtoa_r+0x5fc>)
    aa36:	f8dd a000 	ldr.w	sl, [sp]
    aa3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    aa3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    aa42:	2000      	movs	r0, #0
    aa44:	f7fb fe40 	bl	66c8 <__aeabi_ddiv>
    aa48:	4642      	mov	r2, r8
    aa4a:	464b      	mov	r3, r9
    aa4c:	f7fb fb5a 	bl	6104 <__aeabi_dsub>
    aa50:	ec59 8b1a 	vmov	r8, r9, d10
    aa54:	ec41 0b18 	vmov	d8, r0, r1
    aa58:	4649      	mov	r1, r9
    aa5a:	ee1a 0a10 	vmov	r0, s20
    aa5e:	f002 fac5 	bl	cfec <__aeabi_d2iz>
    aa62:	4607      	mov	r7, r0
    aa64:	f7fb fc9c 	bl	63a0 <__aeabi_i2d>
    aa68:	4602      	mov	r2, r0
    aa6a:	460b      	mov	r3, r1
    aa6c:	ee1a 0a10 	vmov	r0, s20
    aa70:	4649      	mov	r1, r9
    aa72:	f7fb fb47 	bl	6104 <__aeabi_dsub>
    aa76:	3730      	adds	r7, #48	; 0x30
    aa78:	4606      	mov	r6, r0
    aa7a:	f80a 7b01 	strb.w	r7, [sl], #1
    aa7e:	460f      	mov	r7, r1
    aa80:	4632      	mov	r2, r6
    aa82:	ec51 0b18 	vmov	r0, r1, d8
    aa86:	463b      	mov	r3, r7
    aa88:	f7fb ff84 	bl	6994 <__aeabi_dcmpgt>
    aa8c:	2800      	cmp	r0, #0
    aa8e:	f040 854f 	bne.w	b530 <_dtoa_r+0xe68>
    aa92:	f04f 0800 	mov.w	r8, #0
    aa96:	ee0a 5a10 	vmov	s20, r5
    aa9a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
    aa9e:	4655      	mov	r5, sl
    aaa0:	ec5b ab18 	vmov	sl, fp, d8
    aaa4:	ee08 4a10 	vmov	s16, r4
    aaa8:	4644      	mov	r4, r8
    aaaa:	e02b      	b.n	ab04 <_dtoa_r+0x43c>
    aaac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aaae:	3401      	adds	r4, #1
    aab0:	429c      	cmp	r4, r3
    aab2:	f280 854d 	bge.w	b550 <_dtoa_r+0xe88>
    aab6:	4b84      	ldr	r3, [pc, #528]	; (acc8 <_dtoa_r+0x600>)
    aab8:	4650      	mov	r0, sl
    aaba:	4659      	mov	r1, fp
    aabc:	2200      	movs	r2, #0
    aabe:	f7fb fcd9 	bl	6474 <__aeabi_dmul>
    aac2:	4b81      	ldr	r3, [pc, #516]	; (acc8 <_dtoa_r+0x600>)
    aac4:	2200      	movs	r2, #0
    aac6:	4682      	mov	sl, r0
    aac8:	468b      	mov	fp, r1
    aaca:	4630      	mov	r0, r6
    aacc:	4639      	mov	r1, r7
    aace:	f7fb fcd1 	bl	6474 <__aeabi_dmul>
    aad2:	4689      	mov	r9, r1
    aad4:	4680      	mov	r8, r0
    aad6:	f002 fa89 	bl	cfec <__aeabi_d2iz>
    aada:	4607      	mov	r7, r0
    aadc:	f7fb fc60 	bl	63a0 <__aeabi_i2d>
    aae0:	4602      	mov	r2, r0
    aae2:	460b      	mov	r3, r1
    aae4:	4640      	mov	r0, r8
    aae6:	4649      	mov	r1, r9
    aae8:	f7fb fb0c 	bl	6104 <__aeabi_dsub>
    aaec:	3730      	adds	r7, #48	; 0x30
    aaee:	f805 7b01 	strb.w	r7, [r5], #1
    aaf2:	4652      	mov	r2, sl
    aaf4:	465b      	mov	r3, fp
    aaf6:	4606      	mov	r6, r0
    aaf8:	460f      	mov	r7, r1
    aafa:	f7fb ff2d 	bl	6958 <__aeabi_dcmplt>
    aafe:	2800      	cmp	r0, #0
    ab00:	f040 8511 	bne.w	b526 <_dtoa_r+0xe5e>
    ab04:	4632      	mov	r2, r6
    ab06:	463b      	mov	r3, r7
    ab08:	496c      	ldr	r1, [pc, #432]	; (acbc <_dtoa_r+0x5f4>)
    ab0a:	2000      	movs	r0, #0
    ab0c:	f7fb fafa 	bl	6104 <__aeabi_dsub>
    ab10:	4652      	mov	r2, sl
    ab12:	465b      	mov	r3, fp
    ab14:	f7fb ff20 	bl	6958 <__aeabi_dcmplt>
    ab18:	2800      	cmp	r0, #0
    ab1a:	d0c7      	beq.n	aaac <_dtoa_r+0x3e4>
    ab1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ab1e:	9a00      	ldr	r2, [sp, #0]
    ab20:	9305      	str	r3, [sp, #20]
    ab22:	46aa      	mov	sl, r5
    ab24:	ee18 4a10 	vmov	r4, s16
    ab28:	ee1a 5a10 	vmov	r5, s20
    ab2c:	e002      	b.n	ab34 <_dtoa_r+0x46c>
    ab2e:	4552      	cmp	r2, sl
    ab30:	f000 84e3 	beq.w	b4fa <_dtoa_r+0xe32>
    ab34:	46d1      	mov	r9, sl
    ab36:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
    ab3a:	2b39      	cmp	r3, #57	; 0x39
    ab3c:	d0f7      	beq.n	ab2e <_dtoa_r+0x466>
    ab3e:	3301      	adds	r3, #1
    ab40:	b2db      	uxtb	r3, r3
    ab42:	f88a 3000 	strb.w	r3, [sl]
    ab46:	9b05      	ldr	r3, [sp, #20]
    ab48:	3301      	adds	r3, #1
    ab4a:	9305      	str	r3, [sp, #20]
    ab4c:	e198      	b.n	ae80 <_dtoa_r+0x7b8>
    ab4e:	4650      	mov	r0, sl
    ab50:	f7fb fc26 	bl	63a0 <__aeabi_i2d>
    ab54:	ec53 2b1a 	vmov	r2, r3, d10
    ab58:	f7fb fc8c 	bl	6474 <__aeabi_dmul>
    ab5c:	4b58      	ldr	r3, [pc, #352]	; (acc0 <_dtoa_r+0x5f8>)
    ab5e:	2200      	movs	r2, #0
    ab60:	f7fb fad2 	bl	6108 <__adddf3>
    ab64:	4680      	mov	r8, r0
    ab66:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
    ab6a:	4b58      	ldr	r3, [pc, #352]	; (accc <_dtoa_r+0x604>)
    ab6c:	2200      	movs	r2, #0
    ab6e:	ec51 0b1a 	vmov	r0, r1, d10
    ab72:	f7fb fac7 	bl	6104 <__aeabi_dsub>
    ab76:	4642      	mov	r2, r8
    ab78:	464b      	mov	r3, r9
    ab7a:	4606      	mov	r6, r0
    ab7c:	460f      	mov	r7, r1
    ab7e:	f7fb ff09 	bl	6994 <__aeabi_dcmpgt>
    ab82:	4682      	mov	sl, r0
    ab84:	2800      	cmp	r0, #0
    ab86:	f040 84c8 	bne.w	b51a <_dtoa_r+0xe52>
    ab8a:	4630      	mov	r0, r6
    ab8c:	4639      	mov	r1, r7
    ab8e:	4642      	mov	r2, r8
    ab90:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    ab94:	f7fb fee0 	bl	6958 <__aeabi_dcmplt>
    ab98:	2800      	cmp	r0, #0
    ab9a:	f040 8357 	bne.w	b24c <_dtoa_r+0xb84>
    ab9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aba0:	2b00      	cmp	r3, #0
    aba2:	f2c0 8095 	blt.w	acd0 <_dtoa_r+0x608>
    aba6:	9a05      	ldr	r2, [sp, #20]
    aba8:	2a0e      	cmp	r2, #14
    abaa:	f300 8091 	bgt.w	acd0 <_dtoa_r+0x608>
    abae:	4b41      	ldr	r3, [pc, #260]	; (acb4 <_dtoa_r+0x5ec>)
    abb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    abb4:	e9d3 8900 	ldrd	r8, r9, [r3]
    abb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    abba:	2b00      	cmp	r3, #0
    abbc:	da1b      	bge.n	abf6 <_dtoa_r+0x52e>
    abbe:	9b07      	ldr	r3, [sp, #28]
    abc0:	2b00      	cmp	r3, #0
    abc2:	dc18      	bgt.n	abf6 <_dtoa_r+0x52e>
    abc4:	f040 8340 	bne.w	b248 <_dtoa_r+0xb80>
    abc8:	4b40      	ldr	r3, [pc, #256]	; (accc <_dtoa_r+0x604>)
    abca:	2200      	movs	r2, #0
    abcc:	4640      	mov	r0, r8
    abce:	4649      	mov	r1, r9
    abd0:	f7fb fc50 	bl	6474 <__aeabi_dmul>
    abd4:	4602      	mov	r2, r0
    abd6:	460b      	mov	r3, r1
    abd8:	ec51 0b19 	vmov	r0, r1, d9
    abdc:	f7fb fec6 	bl	696c <__aeabi_dcmple>
    abe0:	f8dd a01c 	ldr.w	sl, [sp, #28]
    abe4:	4656      	mov	r6, sl
    abe6:	2800      	cmp	r0, #0
    abe8:	f000 82c4 	beq.w	b174 <_dtoa_r+0xaac>
    abec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    abee:	f8dd 8000 	ldr.w	r8, [sp]
    abf2:	43df      	mvns	r7, r3
    abf4:	e2c6      	b.n	b184 <_dtoa_r+0xabc>
    abf6:	4642      	mov	r2, r8
    abf8:	464b      	mov	r3, r9
    abfa:	ec51 0b19 	vmov	r0, r1, d9
    abfe:	f7fb fd63 	bl	66c8 <__aeabi_ddiv>
    ac02:	f002 f9f3 	bl	cfec <__aeabi_d2iz>
    ac06:	4606      	mov	r6, r0
    ac08:	4683      	mov	fp, r0
    ac0a:	f7fb fbc9 	bl	63a0 <__aeabi_i2d>
    ac0e:	4642      	mov	r2, r8
    ac10:	464b      	mov	r3, r9
    ac12:	f7fb fc2f 	bl	6474 <__aeabi_dmul>
    ac16:	460b      	mov	r3, r1
    ac18:	4602      	mov	r2, r0
    ac1a:	ec51 0b19 	vmov	r0, r1, d9
    ac1e:	f7fb fa71 	bl	6104 <__aeabi_dsub>
    ac22:	f8dd a000 	ldr.w	sl, [sp]
    ac26:	4633      	mov	r3, r6
    ac28:	3330      	adds	r3, #48	; 0x30
    ac2a:	f80a 3b01 	strb.w	r3, [sl], #1
    ac2e:	9b07      	ldr	r3, [sp, #28]
    ac30:	2b01      	cmp	r3, #1
    ac32:	f000 8371 	beq.w	b318 <_dtoa_r+0xc50>
    ac36:	f04f 0b01 	mov.w	fp, #1
    ac3a:	ee08 5a10 	vmov	s16, r5
    ac3e:	ee08 4a90 	vmov	s17, r4
    ac42:	461d      	mov	r5, r3
    ac44:	4654      	mov	r4, sl
    ac46:	46da      	mov	sl, fp
    ac48:	e01d      	b.n	ac86 <_dtoa_r+0x5be>
    ac4a:	4642      	mov	r2, r8
    ac4c:	464b      	mov	r3, r9
    ac4e:	4630      	mov	r0, r6
    ac50:	4639      	mov	r1, r7
    ac52:	f7fb fd39 	bl	66c8 <__aeabi_ddiv>
    ac56:	f002 f9c9 	bl	cfec <__aeabi_d2iz>
    ac5a:	4683      	mov	fp, r0
    ac5c:	f7fb fba0 	bl	63a0 <__aeabi_i2d>
    ac60:	4642      	mov	r2, r8
    ac62:	464b      	mov	r3, r9
    ac64:	f7fb fc06 	bl	6474 <__aeabi_dmul>
    ac68:	f10a 0a01 	add.w	sl, sl, #1
    ac6c:	460b      	mov	r3, r1
    ac6e:	4602      	mov	r2, r0
    ac70:	4639      	mov	r1, r7
    ac72:	4630      	mov	r0, r6
    ac74:	f7fb fa46 	bl	6104 <__aeabi_dsub>
    ac78:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    ac7c:	45aa      	cmp	sl, r5
    ac7e:	f804 3b01 	strb.w	r3, [r4], #1
    ac82:	f000 8344 	beq.w	b30e <_dtoa_r+0xc46>
    ac86:	4b10      	ldr	r3, [pc, #64]	; (acc8 <_dtoa_r+0x600>)
    ac88:	2200      	movs	r2, #0
    ac8a:	f7fb fbf3 	bl	6474 <__aeabi_dmul>
    ac8e:	2200      	movs	r2, #0
    ac90:	2300      	movs	r3, #0
    ac92:	4606      	mov	r6, r0
    ac94:	460f      	mov	r7, r1
    ac96:	f7fb fe55 	bl	6944 <__aeabi_dcmpeq>
    ac9a:	2800      	cmp	r0, #0
    ac9c:	d0d5      	beq.n	ac4a <_dtoa_r+0x582>
    ac9e:	46a2      	mov	sl, r4
    aca0:	ee18 5a10 	vmov	r5, s16
    aca4:	ee18 4a90 	vmov	r4, s17
    aca8:	9b05      	ldr	r3, [sp, #20]
    acaa:	3301      	adds	r3, #1
    acac:	9305      	str	r3, [sp, #20]
    acae:	46d1      	mov	r9, sl
    acb0:	e0e6      	b.n	ae80 <_dtoa_r+0x7b8>
    acb2:	bf00      	nop
    acb4:	0000d928 	.word	0x0000d928
    acb8:	0000d900 	.word	0x0000d900
    acbc:	3ff00000 	.word	0x3ff00000
    acc0:	401c0000 	.word	0x401c0000
    acc4:	3fe00000 	.word	0x3fe00000
    acc8:	40240000 	.word	0x40240000
    accc:	40140000 	.word	0x40140000
    acd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    acd2:	2a00      	cmp	r2, #0
    acd4:	f000 810c 	beq.w	aef0 <_dtoa_r+0x828>
    acd8:	9a01      	ldr	r2, [sp, #4]
    acda:	2a01      	cmp	r2, #1
    acdc:	f340 829d 	ble.w	b21a <_dtoa_r+0xb52>
    ace0:	9b07      	ldr	r3, [sp, #28]
    ace2:	f103 38ff 	add.w	r8, r3, #4294967295
    ace6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ace8:	4543      	cmp	r3, r8
    acea:	f280 8260 	bge.w	b1ae <_dtoa_r+0xae6>
    acee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    acf0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    acf4:	eba8 0303 	sub.w	r3, r8, r3
    acf8:	449b      	add	fp, r3
    acfa:	f04f 0800 	mov.w	r8, #0
    acfe:	9b07      	ldr	r3, [sp, #28]
    ad00:	2b00      	cmp	r3, #0
    ad02:	f2c0 833b 	blt.w	b37c <_dtoa_r+0xcb4>
    ad06:	9a04      	ldr	r2, [sp, #16]
    ad08:	441a      	add	r2, r3
    ad0a:	9204      	str	r2, [sp, #16]
    ad0c:	9a08      	ldr	r2, [sp, #32]
    ad0e:	4617      	mov	r7, r2
    ad10:	441a      	add	r2, r3
    ad12:	9208      	str	r2, [sp, #32]
    ad14:	2101      	movs	r1, #1
    ad16:	4620      	mov	r0, r4
    ad18:	f7fd f8ee 	bl	7ef8 <__i2b>
    ad1c:	4606      	mov	r6, r0
    ad1e:	b167      	cbz	r7, ad3a <_dtoa_r+0x672>
    ad20:	9a04      	ldr	r2, [sp, #16]
    ad22:	2a00      	cmp	r2, #0
    ad24:	dd09      	ble.n	ad3a <_dtoa_r+0x672>
    ad26:	9908      	ldr	r1, [sp, #32]
    ad28:	42ba      	cmp	r2, r7
    ad2a:	4613      	mov	r3, r2
    ad2c:	bfa8      	it	ge
    ad2e:	463b      	movge	r3, r7
    ad30:	1ac9      	subs	r1, r1, r3
    ad32:	1aff      	subs	r7, r7, r3
    ad34:	1ad3      	subs	r3, r2, r3
    ad36:	9108      	str	r1, [sp, #32]
    ad38:	9304      	str	r3, [sp, #16]
    ad3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad3c:	b163      	cbz	r3, ad58 <_dtoa_r+0x690>
    ad3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad40:	2b00      	cmp	r3, #0
    ad42:	f000 82bf 	beq.w	b2c4 <_dtoa_r+0xbfc>
    ad46:	f1b8 0f00 	cmp.w	r8, #0
    ad4a:	f300 8233 	bgt.w	b1b4 <_dtoa_r+0xaec>
    ad4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad50:	ebb3 0208 	subs.w	r2, r3, r8
    ad54:	f040 8322 	bne.w	b39c <_dtoa_r+0xcd4>
    ad58:	2101      	movs	r1, #1
    ad5a:	4620      	mov	r0, r4
    ad5c:	f7fd f8cc 	bl	7ef8 <__i2b>
    ad60:	f1bb 0f00 	cmp.w	fp, #0
    ad64:	4682      	mov	sl, r0
    ad66:	f300 80d9 	bgt.w	af1c <_dtoa_r+0x854>
    ad6a:	9b01      	ldr	r3, [sp, #4]
    ad6c:	2b01      	cmp	r3, #1
    ad6e:	f340 81a9 	ble.w	b0c4 <_dtoa_r+0x9fc>
    ad72:	f04f 0800 	mov.w	r8, #0
    ad76:	2001      	movs	r0, #1
    ad78:	f1bb 0f00 	cmp.w	fp, #0
    ad7c:	f040 80da 	bne.w	af34 <_dtoa_r+0x86c>
    ad80:	9b04      	ldr	r3, [sp, #16]
    ad82:	4418      	add	r0, r3
    ad84:	f010 001f 	ands.w	r0, r0, #31
    ad88:	f000 819a 	beq.w	b0c0 <_dtoa_r+0x9f8>
    ad8c:	f1c0 0320 	rsb	r3, r0, #32
    ad90:	2b04      	cmp	r3, #4
    ad92:	f300 80b2 	bgt.w	aefa <_dtoa_r+0x832>
    ad96:	f040 822d 	bne.w	b1f4 <_dtoa_r+0xb2c>
    ad9a:	9b08      	ldr	r3, [sp, #32]
    ad9c:	2b00      	cmp	r3, #0
    ad9e:	dd05      	ble.n	adac <_dtoa_r+0x6e4>
    ada0:	4629      	mov	r1, r5
    ada2:	461a      	mov	r2, r3
    ada4:	4620      	mov	r0, r4
    ada6:	f7fd f9e3 	bl	8170 <__lshift>
    adaa:	4605      	mov	r5, r0
    adac:	9b04      	ldr	r3, [sp, #16]
    adae:	2b00      	cmp	r3, #0
    adb0:	dd05      	ble.n	adbe <_dtoa_r+0x6f6>
    adb2:	4651      	mov	r1, sl
    adb4:	461a      	mov	r2, r3
    adb6:	4620      	mov	r0, r4
    adb8:	f7fd f9da 	bl	8170 <__lshift>
    adbc:	4682      	mov	sl, r0
    adbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    adc0:	2b00      	cmp	r3, #0
    adc2:	f040 815d 	bne.w	b080 <_dtoa_r+0x9b8>
    adc6:	9b07      	ldr	r3, [sp, #28]
    adc8:	2b00      	cmp	r3, #0
    adca:	f340 8144 	ble.w	b056 <_dtoa_r+0x98e>
    adce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    add0:	2b00      	cmp	r3, #0
    add2:	f040 80c7 	bne.w	af64 <_dtoa_r+0x89c>
    add6:	9b05      	ldr	r3, [sp, #20]
    add8:	3301      	adds	r3, #1
    adda:	9305      	str	r3, [sp, #20]
    addc:	f8dd 8000 	ldr.w	r8, [sp]
    ade0:	f8dd 901c 	ldr.w	r9, [sp, #28]
    ade4:	2701      	movs	r7, #1
    ade6:	e007      	b.n	adf8 <_dtoa_r+0x730>
    ade8:	4629      	mov	r1, r5
    adea:	2300      	movs	r3, #0
    adec:	220a      	movs	r2, #10
    adee:	4620      	mov	r0, r4
    adf0:	f7fc ffe0 	bl	7db4 <__multadd>
    adf4:	3701      	adds	r7, #1
    adf6:	4605      	mov	r5, r0
    adf8:	4651      	mov	r1, sl
    adfa:	4628      	mov	r0, r5
    adfc:	f7ff fbce 	bl	a59c <quorem>
    ae00:	45b9      	cmp	r9, r7
    ae02:	f100 0030 	add.w	r0, r0, #48	; 0x30
    ae06:	f808 0b01 	strb.w	r0, [r8], #1
    ae0a:	dced      	bgt.n	ade8 <_dtoa_r+0x720>
    ae0c:	9a07      	ldr	r2, [sp, #28]
    ae0e:	2a00      	cmp	r2, #0
    ae10:	bfc8      	it	gt
    ae12:	4693      	movgt	fp, r2
    ae14:	9a00      	ldr	r2, [sp, #0]
    ae16:	bfd8      	it	le
    ae18:	f04f 0b01 	movle.w	fp, #1
    ae1c:	4603      	mov	r3, r0
    ae1e:	4493      	add	fp, r2
    ae20:	2700      	movs	r7, #0
    ae22:	4629      	mov	r1, r5
    ae24:	2201      	movs	r2, #1
    ae26:	4620      	mov	r0, r4
    ae28:	9301      	str	r3, [sp, #4]
    ae2a:	f7fd f9a1 	bl	8170 <__lshift>
    ae2e:	4651      	mov	r1, sl
    ae30:	4605      	mov	r5, r0
    ae32:	f7fd fa15 	bl	8260 <__mcmp>
    ae36:	2800      	cmp	r0, #0
    ae38:	f340 81e4 	ble.w	b204 <_dtoa_r+0xb3c>
    ae3c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    ae40:	9a00      	ldr	r2, [sp, #0]
    ae42:	f10b 3bff 	add.w	fp, fp, #4294967295
    ae46:	e004      	b.n	ae52 <_dtoa_r+0x78a>
    ae48:	455a      	cmp	r2, fp
    ae4a:	f000 81f6 	beq.w	b23a <_dtoa_r+0xb72>
    ae4e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    ae52:	2b39      	cmp	r3, #57	; 0x39
    ae54:	f10b 0901 	add.w	r9, fp, #1
    ae58:	d0f6      	beq.n	ae48 <_dtoa_r+0x780>
    ae5a:	3301      	adds	r3, #1
    ae5c:	f88b 3000 	strb.w	r3, [fp]
    ae60:	4651      	mov	r1, sl
    ae62:	4620      	mov	r0, r4
    ae64:	f7fc ff9c 	bl	7da0 <_Bfree>
    ae68:	b156      	cbz	r6, ae80 <_dtoa_r+0x7b8>
    ae6a:	b12f      	cbz	r7, ae78 <_dtoa_r+0x7b0>
    ae6c:	42b7      	cmp	r7, r6
    ae6e:	d003      	beq.n	ae78 <_dtoa_r+0x7b0>
    ae70:	4639      	mov	r1, r7
    ae72:	4620      	mov	r0, r4
    ae74:	f7fc ff94 	bl	7da0 <_Bfree>
    ae78:	4631      	mov	r1, r6
    ae7a:	4620      	mov	r0, r4
    ae7c:	f7fc ff90 	bl	7da0 <_Bfree>
    ae80:	4629      	mov	r1, r5
    ae82:	4620      	mov	r0, r4
    ae84:	f7fc ff8c 	bl	7da0 <_Bfree>
    ae88:	2300      	movs	r3, #0
    ae8a:	f889 3000 	strb.w	r3, [r9]
    ae8e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    ae92:	601a      	str	r2, [r3, #0]
    ae94:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ae96:	2b00      	cmp	r3, #0
    ae98:	f43f ac59 	beq.w	a74e <_dtoa_r+0x86>
    ae9c:	9800      	ldr	r0, [sp, #0]
    ae9e:	f8c3 9000 	str.w	r9, [r3]
    aea2:	b015      	add	sp, #84	; 0x54
    aea4:	ecbd 8b06 	vpop	{d8-d10}
    aea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aeac:	2301      	movs	r3, #1
    aeae:	1bbf      	subs	r7, r7, r6
    aeb0:	930c      	str	r3, [sp, #48]	; 0x30
    aeb2:	1e7b      	subs	r3, r7, #1
    aeb4:	9304      	str	r3, [sp, #16]
    aeb6:	f57f acbf 	bpl.w	a838 <_dtoa_r+0x170>
    aeba:	f1c7 0301 	rsb	r3, r7, #1
    aebe:	9308      	str	r3, [sp, #32]
    aec0:	2300      	movs	r3, #0
    aec2:	9304      	str	r3, [sp, #16]
    aec4:	e4ba      	b.n	a83c <_dtoa_r+0x174>
    aec6:	4658      	mov	r0, fp
    aec8:	f7fb fa6a 	bl	63a0 <__aeabi_i2d>
    aecc:	4642      	mov	r2, r8
    aece:	464b      	mov	r3, r9
    aed0:	f7fb fd38 	bl	6944 <__aeabi_dcmpeq>
    aed4:	2800      	cmp	r0, #0
    aed6:	f47f ac97 	bne.w	a808 <_dtoa_r+0x140>
    aeda:	f10b 3bff 	add.w	fp, fp, #4294967295
    aede:	e493      	b.n	a808 <_dtoa_r+0x140>
    aee0:	4bbd      	ldr	r3, [pc, #756]	; (b1d8 <_dtoa_r+0xb10>)
    aee2:	9300      	str	r3, [sp, #0]
    aee4:	9800      	ldr	r0, [sp, #0]
    aee6:	b015      	add	sp, #84	; 0x54
    aee8:	ecbd 8b06 	vpop	{d8-d10}
    aeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aef0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    aef4:	9f08      	ldr	r7, [sp, #32]
    aef6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    aef8:	e711      	b.n	ad1e <_dtoa_r+0x656>
    aefa:	f1c0 001c 	rsb	r0, r0, #28
    aefe:	9b08      	ldr	r3, [sp, #32]
    af00:	4403      	add	r3, r0
    af02:	9308      	str	r3, [sp, #32]
    af04:	9b04      	ldr	r3, [sp, #16]
    af06:	4403      	add	r3, r0
    af08:	4407      	add	r7, r0
    af0a:	9304      	str	r3, [sp, #16]
    af0c:	e745      	b.n	ad9a <_dtoa_r+0x6d2>
    af0e:	2601      	movs	r6, #1
    af10:	e4ab      	b.n	a86a <_dtoa_r+0x1a2>
    af12:	f1c3 0320 	rsb	r3, r3, #32
    af16:	fa08 f003 	lsl.w	r0, r8, r3
    af1a:	e442      	b.n	a7a2 <_dtoa_r+0xda>
    af1c:	4601      	mov	r1, r0
    af1e:	465a      	mov	r2, fp
    af20:	4620      	mov	r0, r4
    af22:	f7fd f8c5 	bl	80b0 <__pow5mult>
    af26:	9b01      	ldr	r3, [sp, #4]
    af28:	2b01      	cmp	r3, #1
    af2a:	4682      	mov	sl, r0
    af2c:	f340 81be 	ble.w	b2ac <_dtoa_r+0xbe4>
    af30:	f04f 0800 	mov.w	r8, #0
    af34:	f8da 3010 	ldr.w	r3, [sl, #16]
    af38:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    af3c:	6918      	ldr	r0, [r3, #16]
    af3e:	f7fc ff8b 	bl	7e58 <__hi0bits>
    af42:	f1c0 0020 	rsb	r0, r0, #32
    af46:	e71b      	b.n	ad80 <_dtoa_r+0x6b8>
    af48:	4631      	mov	r1, r6
    af4a:	2300      	movs	r3, #0
    af4c:	220a      	movs	r2, #10
    af4e:	4620      	mov	r0, r4
    af50:	f7fc ff30 	bl	7db4 <__multadd>
    af54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af56:	2b00      	cmp	r3, #0
    af58:	4606      	mov	r6, r0
    af5a:	f340 8319 	ble.w	b590 <_dtoa_r+0xec8>
    af5e:	f8cd 9014 	str.w	r9, [sp, #20]
    af62:	9307      	str	r3, [sp, #28]
    af64:	2f00      	cmp	r7, #0
    af66:	f300 811b 	bgt.w	b1a0 <_dtoa_r+0xad8>
    af6a:	f1b8 0f00 	cmp.w	r8, #0
    af6e:	f040 81ee 	bne.w	b34e <_dtoa_r+0xc86>
    af72:	46b0      	mov	r8, r6
    af74:	9b02      	ldr	r3, [sp, #8]
    af76:	9f00      	ldr	r7, [sp, #0]
    af78:	9907      	ldr	r1, [sp, #28]
    af7a:	f003 0201 	and.w	r2, r3, #1
    af7e:	1e7b      	subs	r3, r7, #1
    af80:	4419      	add	r1, r3
    af82:	9b01      	ldr	r3, [sp, #4]
    af84:	920a      	str	r2, [sp, #40]	; 0x28
    af86:	4313      	orrs	r3, r2
    af88:	9108      	str	r1, [sp, #32]
    af8a:	9309      	str	r3, [sp, #36]	; 0x24
    af8c:	4651      	mov	r1, sl
    af8e:	4628      	mov	r0, r5
    af90:	f7ff fb04 	bl	a59c <quorem>
    af94:	4631      	mov	r1, r6
    af96:	4683      	mov	fp, r0
    af98:	4628      	mov	r0, r5
    af9a:	f7fd f961 	bl	8260 <__mcmp>
    af9e:	4642      	mov	r2, r8
    afa0:	4651      	mov	r1, sl
    afa2:	4681      	mov	r9, r0
    afa4:	4620      	mov	r0, r4
    afa6:	f7fd f97d 	bl	82a4 <__mdiff>
    afaa:	68c2      	ldr	r2, [r0, #12]
    afac:	4601      	mov	r1, r0
    afae:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    afb2:	2a00      	cmp	r2, #0
    afb4:	d142      	bne.n	b03c <_dtoa_r+0x974>
    afb6:	9004      	str	r0, [sp, #16]
    afb8:	4628      	mov	r0, r5
    afba:	9307      	str	r3, [sp, #28]
    afbc:	f7fd f950 	bl	8260 <__mcmp>
    afc0:	9904      	ldr	r1, [sp, #16]
    afc2:	9002      	str	r0, [sp, #8]
    afc4:	4620      	mov	r0, r4
    afc6:	f7fc feeb 	bl	7da0 <_Bfree>
    afca:	9a02      	ldr	r2, [sp, #8]
    afcc:	9b07      	ldr	r3, [sp, #28]
    afce:	b91a      	cbnz	r2, afd8 <_dtoa_r+0x910>
    afd0:	9909      	ldr	r1, [sp, #36]	; 0x24
    afd2:	2900      	cmp	r1, #0
    afd4:	f000 82c4 	beq.w	b560 <_dtoa_r+0xe98>
    afd8:	f1b9 0f00 	cmp.w	r9, #0
    afdc:	f2c0 8179 	blt.w	b2d2 <_dtoa_r+0xc0a>
    afe0:	9901      	ldr	r1, [sp, #4]
    afe2:	ea49 0901 	orr.w	r9, r9, r1
    afe6:	990a      	ldr	r1, [sp, #40]	; 0x28
    afe8:	ea51 0909 	orrs.w	r9, r1, r9
    afec:	f000 8171 	beq.w	b2d2 <_dtoa_r+0xc0a>
    aff0:	2a00      	cmp	r2, #0
    aff2:	f300 81c7 	bgt.w	b384 <_dtoa_r+0xcbc>
    aff6:	9a08      	ldr	r2, [sp, #32]
    aff8:	703b      	strb	r3, [r7, #0]
    affa:	f107 0901 	add.w	r9, r7, #1
    affe:	4297      	cmp	r7, r2
    b000:	46cb      	mov	fp, r9
    b002:	f000 81c5 	beq.w	b390 <_dtoa_r+0xcc8>
    b006:	4629      	mov	r1, r5
    b008:	2300      	movs	r3, #0
    b00a:	220a      	movs	r2, #10
    b00c:	4620      	mov	r0, r4
    b00e:	f7fc fed1 	bl	7db4 <__multadd>
    b012:	4546      	cmp	r6, r8
    b014:	4605      	mov	r5, r0
    b016:	4631      	mov	r1, r6
    b018:	f04f 0300 	mov.w	r3, #0
    b01c:	f04f 020a 	mov.w	r2, #10
    b020:	4620      	mov	r0, r4
    b022:	d012      	beq.n	b04a <_dtoa_r+0x982>
    b024:	f7fc fec6 	bl	7db4 <__multadd>
    b028:	4641      	mov	r1, r8
    b02a:	4606      	mov	r6, r0
    b02c:	2300      	movs	r3, #0
    b02e:	220a      	movs	r2, #10
    b030:	4620      	mov	r0, r4
    b032:	f7fc febf 	bl	7db4 <__multadd>
    b036:	464f      	mov	r7, r9
    b038:	4680      	mov	r8, r0
    b03a:	e7a7      	b.n	af8c <_dtoa_r+0x8c4>
    b03c:	4620      	mov	r0, r4
    b03e:	9302      	str	r3, [sp, #8]
    b040:	f7fc feae 	bl	7da0 <_Bfree>
    b044:	9b02      	ldr	r3, [sp, #8]
    b046:	2201      	movs	r2, #1
    b048:	e7c6      	b.n	afd8 <_dtoa_r+0x910>
    b04a:	f7fc feb3 	bl	7db4 <__multadd>
    b04e:	464f      	mov	r7, r9
    b050:	4606      	mov	r6, r0
    b052:	4680      	mov	r8, r0
    b054:	e79a      	b.n	af8c <_dtoa_r+0x8c4>
    b056:	9b01      	ldr	r3, [sp, #4]
    b058:	2b02      	cmp	r3, #2
    b05a:	dc7a      	bgt.n	b152 <_dtoa_r+0xa8a>
    b05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b05e:	2b00      	cmp	r3, #0
    b060:	d180      	bne.n	af64 <_dtoa_r+0x89c>
    b062:	9b05      	ldr	r3, [sp, #20]
    b064:	4651      	mov	r1, sl
    b066:	3301      	adds	r3, #1
    b068:	4628      	mov	r0, r5
    b06a:	9305      	str	r3, [sp, #20]
    b06c:	f7ff fa96 	bl	a59c <quorem>
    b070:	f8dd b000 	ldr.w	fp, [sp]
    b074:	f100 0330 	add.w	r3, r0, #48	; 0x30
    b078:	f80b 3b01 	strb.w	r3, [fp], #1
    b07c:	2700      	movs	r7, #0
    b07e:	e6d0      	b.n	ae22 <_dtoa_r+0x75a>
    b080:	4651      	mov	r1, sl
    b082:	4628      	mov	r0, r5
    b084:	f7fd f8ec 	bl	8260 <__mcmp>
    b088:	2800      	cmp	r0, #0
    b08a:	f6bf ae9c 	bge.w	adc6 <_dtoa_r+0x6fe>
    b08e:	4629      	mov	r1, r5
    b090:	2300      	movs	r3, #0
    b092:	220a      	movs	r2, #10
    b094:	4620      	mov	r0, r4
    b096:	f7fc fe8d 	bl	7db4 <__multadd>
    b09a:	9b05      	ldr	r3, [sp, #20]
    b09c:	f103 39ff 	add.w	r9, r3, #4294967295
    b0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b0a2:	4605      	mov	r5, r0
    b0a4:	2b00      	cmp	r3, #0
    b0a6:	f47f af4f 	bne.w	af48 <_dtoa_r+0x880>
    b0aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b0ac:	2b00      	cmp	r3, #0
    b0ae:	f340 825e 	ble.w	b56e <_dtoa_r+0xea6>
    b0b2:	9307      	str	r3, [sp, #28]
    b0b4:	e692      	b.n	addc <_dtoa_r+0x714>
    b0b6:	4b49      	ldr	r3, [pc, #292]	; (b1dc <_dtoa_r+0xb14>)
    b0b8:	9300      	str	r3, [sp, #0]
    b0ba:	3303      	adds	r3, #3
    b0bc:	f7ff bbf0 	b.w	a8a0 <_dtoa_r+0x1d8>
    b0c0:	201c      	movs	r0, #28
    b0c2:	e71c      	b.n	aefe <_dtoa_r+0x836>
    b0c4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    b0c8:	2900      	cmp	r1, #0
    b0ca:	f47f ae52 	bne.w	ad72 <_dtoa_r+0x6aa>
    b0ce:	f3c2 0313 	ubfx	r3, r2, #0, #20
    b0d2:	2b00      	cmp	r3, #0
    b0d4:	f47f ae4d 	bne.w	ad72 <_dtoa_r+0x6aa>
    b0d8:	4b41      	ldr	r3, [pc, #260]	; (b1e0 <_dtoa_r+0xb18>)
    b0da:	4013      	ands	r3, r2
    b0dc:	2b00      	cmp	r3, #0
    b0de:	f000 8220 	beq.w	b522 <_dtoa_r+0xe5a>
    b0e2:	9b08      	ldr	r3, [sp, #32]
    b0e4:	3301      	adds	r3, #1
    b0e6:	9308      	str	r3, [sp, #32]
    b0e8:	9b04      	ldr	r3, [sp, #16]
    b0ea:	3301      	adds	r3, #1
    b0ec:	9304      	str	r3, [sp, #16]
    b0ee:	f04f 0801 	mov.w	r8, #1
    b0f2:	e640      	b.n	ad76 <_dtoa_r+0x6ae>
    b0f4:	2301      	movs	r3, #1
    b0f6:	930a      	str	r3, [sp, #40]	; 0x28
    b0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0fa:	9a05      	ldr	r2, [sp, #20]
    b0fc:	4413      	add	r3, r2
    b0fe:	930f      	str	r3, [sp, #60]	; 0x3c
    b100:	3301      	adds	r3, #1
    b102:	2b01      	cmp	r3, #1
    b104:	461f      	mov	r7, r3
    b106:	9307      	str	r3, [sp, #28]
    b108:	bfb8      	it	lt
    b10a:	2701      	movlt	r7, #1
    b10c:	2100      	movs	r1, #0
    b10e:	2f17      	cmp	r7, #23
    b110:	63e1      	str	r1, [r4, #60]	; 0x3c
    b112:	f77f ac19 	ble.w	a948 <_dtoa_r+0x280>
    b116:	2201      	movs	r2, #1
    b118:	2304      	movs	r3, #4
    b11a:	005b      	lsls	r3, r3, #1
    b11c:	f103 0014 	add.w	r0, r3, #20
    b120:	42b8      	cmp	r0, r7
    b122:	4611      	mov	r1, r2
    b124:	f102 0201 	add.w	r2, r2, #1
    b128:	d9f7      	bls.n	b11a <_dtoa_r+0xa52>
    b12a:	63e1      	str	r1, [r4, #60]	; 0x3c
    b12c:	e40c      	b.n	a948 <_dtoa_r+0x280>
    b12e:	2301      	movs	r3, #1
    b130:	930a      	str	r3, [sp, #40]	; 0x28
    b132:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b134:	2f00      	cmp	r7, #0
    b136:	dd60      	ble.n	b1fa <_dtoa_r+0xb32>
    b138:	970f      	str	r7, [sp, #60]	; 0x3c
    b13a:	9707      	str	r7, [sp, #28]
    b13c:	e7e6      	b.n	b10c <_dtoa_r+0xa44>
    b13e:	2300      	movs	r3, #0
    b140:	930a      	str	r3, [sp, #40]	; 0x28
    b142:	e7d9      	b.n	b0f8 <_dtoa_r+0xa30>
    b144:	2300      	movs	r3, #0
    b146:	930a      	str	r3, [sp, #40]	; 0x28
    b148:	e7f3      	b.n	b132 <_dtoa_r+0xa6a>
    b14a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b14c:	9307      	str	r3, [sp, #28]
    b14e:	f8cd 9014 	str.w	r9, [sp, #20]
    b152:	9b07      	ldr	r3, [sp, #28]
    b154:	2b00      	cmp	r3, #0
    b156:	f47f ad49 	bne.w	abec <_dtoa_r+0x524>
    b15a:	4651      	mov	r1, sl
    b15c:	2205      	movs	r2, #5
    b15e:	4620      	mov	r0, r4
    b160:	f7fc fe28 	bl	7db4 <__multadd>
    b164:	4601      	mov	r1, r0
    b166:	4682      	mov	sl, r0
    b168:	4628      	mov	r0, r5
    b16a:	f7fd f879 	bl	8260 <__mcmp>
    b16e:	2800      	cmp	r0, #0
    b170:	f77f ad3c 	ble.w	abec <_dtoa_r+0x524>
    b174:	9b00      	ldr	r3, [sp, #0]
    b176:	9f05      	ldr	r7, [sp, #20]
    b178:	2231      	movs	r2, #49	; 0x31
    b17a:	4698      	mov	r8, r3
    b17c:	f803 2b01 	strb.w	r2, [r3], #1
    b180:	3701      	adds	r7, #1
    b182:	9300      	str	r3, [sp, #0]
    b184:	4651      	mov	r1, sl
    b186:	4620      	mov	r0, r4
    b188:	f7fc fe0a 	bl	7da0 <_Bfree>
    b18c:	1c7b      	adds	r3, r7, #1
    b18e:	f8dd 9000 	ldr.w	r9, [sp]
    b192:	9305      	str	r3, [sp, #20]
    b194:	f8cd 8000 	str.w	r8, [sp]
    b198:	2e00      	cmp	r6, #0
    b19a:	f47f ae6d 	bne.w	ae78 <_dtoa_r+0x7b0>
    b19e:	e66f      	b.n	ae80 <_dtoa_r+0x7b8>
    b1a0:	4631      	mov	r1, r6
    b1a2:	463a      	mov	r2, r7
    b1a4:	4620      	mov	r0, r4
    b1a6:	f7fc ffe3 	bl	8170 <__lshift>
    b1aa:	4606      	mov	r6, r0
    b1ac:	e6dd      	b.n	af6a <_dtoa_r+0x8a2>
    b1ae:	eba3 0808 	sub.w	r8, r3, r8
    b1b2:	e5a4      	b.n	acfe <_dtoa_r+0x636>
    b1b4:	4631      	mov	r1, r6
    b1b6:	4642      	mov	r2, r8
    b1b8:	4620      	mov	r0, r4
    b1ba:	f7fc ff79 	bl	80b0 <__pow5mult>
    b1be:	462a      	mov	r2, r5
    b1c0:	4601      	mov	r1, r0
    b1c2:	4606      	mov	r6, r0
    b1c4:	4620      	mov	r0, r4
    b1c6:	f7fc fec5 	bl	7f54 <__multiply>
    b1ca:	4629      	mov	r1, r5
    b1cc:	4605      	mov	r5, r0
    b1ce:	4620      	mov	r0, r4
    b1d0:	f7fc fde6 	bl	7da0 <_Bfree>
    b1d4:	e5bb      	b.n	ad4e <_dtoa_r+0x686>
    b1d6:	bf00      	nop
    b1d8:	0000da3c 	.word	0x0000da3c
    b1dc:	0000daac 	.word	0x0000daac
    b1e0:	7ff00000 	.word	0x7ff00000
    b1e4:	f04f 0a02 	mov.w	sl, #2
    b1e8:	eeb0 8a49 	vmov.f32	s16, s18
    b1ec:	eef0 8a69 	vmov.f32	s17, s19
    b1f0:	f7ff bbd7 	b.w	a9a2 <_dtoa_r+0x2da>
    b1f4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    b1f8:	e681      	b.n	aefe <_dtoa_r+0x836>
    b1fa:	2301      	movs	r3, #1
    b1fc:	9309      	str	r3, [sp, #36]	; 0x24
    b1fe:	9307      	str	r3, [sp, #28]
    b200:	f7ff bb9e 	b.w	a940 <_dtoa_r+0x278>
    b204:	d103      	bne.n	b20e <_dtoa_r+0xb46>
    b206:	9b01      	ldr	r3, [sp, #4]
    b208:	07db      	lsls	r3, r3, #31
    b20a:	f53f ae17 	bmi.w	ae3c <_dtoa_r+0x774>
    b20e:	46d9      	mov	r9, fp
    b210:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    b214:	2b30      	cmp	r3, #48	; 0x30
    b216:	d0fa      	beq.n	b20e <_dtoa_r+0xb46>
    b218:	e622      	b.n	ae60 <_dtoa_r+0x798>
    b21a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b21c:	2a00      	cmp	r2, #0
    b21e:	f000 8137 	beq.w	b490 <_dtoa_r+0xdc8>
    b222:	f203 4333 	addw	r3, r3, #1075	; 0x433
    b226:	9a04      	ldr	r2, [sp, #16]
    b228:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    b22c:	441a      	add	r2, r3
    b22e:	9204      	str	r2, [sp, #16]
    b230:	9a08      	ldr	r2, [sp, #32]
    b232:	4617      	mov	r7, r2
    b234:	441a      	add	r2, r3
    b236:	9208      	str	r2, [sp, #32]
    b238:	e56c      	b.n	ad14 <_dtoa_r+0x64c>
    b23a:	9b05      	ldr	r3, [sp, #20]
    b23c:	9a00      	ldr	r2, [sp, #0]
    b23e:	3301      	adds	r3, #1
    b240:	9305      	str	r3, [sp, #20]
    b242:	2331      	movs	r3, #49	; 0x31
    b244:	7013      	strb	r3, [r2, #0]
    b246:	e60b      	b.n	ae60 <_dtoa_r+0x798>
    b248:	f04f 0a00 	mov.w	sl, #0
    b24c:	4656      	mov	r6, sl
    b24e:	e4cd      	b.n	abec <_dtoa_r+0x524>
    b250:	900c      	str	r0, [sp, #48]	; 0x30
    b252:	e632      	b.n	aeba <_dtoa_r+0x7f2>
    b254:	f000 8149 	beq.w	b4ea <_dtoa_r+0xe22>
    b258:	9a05      	ldr	r2, [sp, #20]
    b25a:	4bc8      	ldr	r3, [pc, #800]	; (b57c <_dtoa_r+0xeb4>)
    b25c:	4256      	negs	r6, r2
    b25e:	f006 020f 	and.w	r2, r6, #15
    b262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b266:	e9d3 2300 	ldrd	r2, r3, [r3]
    b26a:	ec51 0b19 	vmov	r0, r1, d9
    b26e:	f7fb f901 	bl	6474 <__aeabi_dmul>
    b272:	1136      	asrs	r6, r6, #4
    b274:	ec41 0b1a 	vmov	d10, r0, r1
    b278:	f000 8195 	beq.w	b5a6 <_dtoa_r+0xede>
    b27c:	4fc0      	ldr	r7, [pc, #768]	; (b580 <_dtoa_r+0xeb8>)
    b27e:	2300      	movs	r3, #0
    b280:	f04f 0a02 	mov.w	sl, #2
    b284:	07f2      	lsls	r2, r6, #31
    b286:	d506      	bpl.n	b296 <_dtoa_r+0xbce>
    b288:	e9d7 2300 	ldrd	r2, r3, [r7]
    b28c:	f7fb f8f2 	bl	6474 <__aeabi_dmul>
    b290:	f10a 0a01 	add.w	sl, sl, #1
    b294:	2301      	movs	r3, #1
    b296:	1076      	asrs	r6, r6, #1
    b298:	f107 0708 	add.w	r7, r7, #8
    b29c:	d1f2      	bne.n	b284 <_dtoa_r+0xbbc>
    b29e:	2b00      	cmp	r3, #0
    b2a0:	f43f ab9e 	beq.w	a9e0 <_dtoa_r+0x318>
    b2a4:	ec41 0b1a 	vmov	d10, r0, r1
    b2a8:	f7ff bb9a 	b.w	a9e0 <_dtoa_r+0x318>
    b2ac:	9b02      	ldr	r3, [sp, #8]
    b2ae:	2b00      	cmp	r3, #0
    b2b0:	f47f ae3e 	bne.w	af30 <_dtoa_r+0x868>
    b2b4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    b2b8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    b2bc:	2b00      	cmp	r3, #0
    b2be:	f43f af0b 	beq.w	b0d8 <_dtoa_r+0xa10>
    b2c2:	e635      	b.n	af30 <_dtoa_r+0x868>
    b2c4:	4629      	mov	r1, r5
    b2c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b2c8:	4620      	mov	r0, r4
    b2ca:	f7fc fef1 	bl	80b0 <__pow5mult>
    b2ce:	4605      	mov	r5, r0
    b2d0:	e542      	b.n	ad58 <_dtoa_r+0x690>
    b2d2:	2a00      	cmp	r2, #0
    b2d4:	dd12      	ble.n	b2fc <_dtoa_r+0xc34>
    b2d6:	4629      	mov	r1, r5
    b2d8:	2201      	movs	r2, #1
    b2da:	4620      	mov	r0, r4
    b2dc:	9301      	str	r3, [sp, #4]
    b2de:	f7fc ff47 	bl	8170 <__lshift>
    b2e2:	4651      	mov	r1, sl
    b2e4:	4605      	mov	r5, r0
    b2e6:	f7fc ffbb 	bl	8260 <__mcmp>
    b2ea:	2800      	cmp	r0, #0
    b2ec:	9b01      	ldr	r3, [sp, #4]
    b2ee:	f340 8129 	ble.w	b544 <_dtoa_r+0xe7c>
    b2f2:	2b39      	cmp	r3, #57	; 0x39
    b2f4:	f000 8107 	beq.w	b506 <_dtoa_r+0xe3e>
    b2f8:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    b2fc:	46b9      	mov	r9, r7
    b2fe:	f809 3b01 	strb.w	r3, [r9], #1
    b302:	9b05      	ldr	r3, [sp, #20]
    b304:	3301      	adds	r3, #1
    b306:	4637      	mov	r7, r6
    b308:	9305      	str	r3, [sp, #20]
    b30a:	4646      	mov	r6, r8
    b30c:	e5a8      	b.n	ae60 <_dtoa_r+0x798>
    b30e:	46a2      	mov	sl, r4
    b310:	ee18 5a10 	vmov	r5, s16
    b314:	ee18 4a90 	vmov	r4, s17
    b318:	4602      	mov	r2, r0
    b31a:	460b      	mov	r3, r1
    b31c:	f7fa fef4 	bl	6108 <__adddf3>
    b320:	4642      	mov	r2, r8
    b322:	464b      	mov	r3, r9
    b324:	4606      	mov	r6, r0
    b326:	460f      	mov	r7, r1
    b328:	f7fb fb34 	bl	6994 <__aeabi_dcmpgt>
    b32c:	b960      	cbnz	r0, b348 <_dtoa_r+0xc80>
    b32e:	4642      	mov	r2, r8
    b330:	464b      	mov	r3, r9
    b332:	4630      	mov	r0, r6
    b334:	4639      	mov	r1, r7
    b336:	f7fb fb05 	bl	6944 <__aeabi_dcmpeq>
    b33a:	2800      	cmp	r0, #0
    b33c:	f43f acb4 	beq.w	aca8 <_dtoa_r+0x5e0>
    b340:	ea5f 71cb 	movs.w	r1, fp, lsl #31
    b344:	f57f acb0 	bpl.w	aca8 <_dtoa_r+0x5e0>
    b348:	9a00      	ldr	r2, [sp, #0]
    b34a:	f7ff bbf3 	b.w	ab34 <_dtoa_r+0x46c>
    b34e:	6871      	ldr	r1, [r6, #4]
    b350:	4620      	mov	r0, r4
    b352:	f7fc fcff 	bl	7d54 <_Balloc>
    b356:	4607      	mov	r7, r0
    b358:	2800      	cmp	r0, #0
    b35a:	f000 8128 	beq.w	b5ae <_dtoa_r+0xee6>
    b35e:	6933      	ldr	r3, [r6, #16]
    b360:	3302      	adds	r3, #2
    b362:	009a      	lsls	r2, r3, #2
    b364:	f106 010c 	add.w	r1, r6, #12
    b368:	300c      	adds	r0, #12
    b36a:	f7f9 fc3b 	bl	4be4 <memcpy>
    b36e:	4639      	mov	r1, r7
    b370:	2201      	movs	r2, #1
    b372:	4620      	mov	r0, r4
    b374:	f7fc fefc 	bl	8170 <__lshift>
    b378:	4680      	mov	r8, r0
    b37a:	e5fb      	b.n	af74 <_dtoa_r+0x8ac>
    b37c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
    b380:	1a9f      	subs	r7, r3, r2
    b382:	e4c7      	b.n	ad14 <_dtoa_r+0x64c>
    b384:	2b39      	cmp	r3, #57	; 0x39
    b386:	f000 80be 	beq.w	b506 <_dtoa_r+0xe3e>
    b38a:	46b9      	mov	r9, r7
    b38c:	3301      	adds	r3, #1
    b38e:	e7b6      	b.n	b2fe <_dtoa_r+0xc36>
    b390:	9a05      	ldr	r2, [sp, #20]
    b392:	3201      	adds	r2, #1
    b394:	4637      	mov	r7, r6
    b396:	9205      	str	r2, [sp, #20]
    b398:	4646      	mov	r6, r8
    b39a:	e542      	b.n	ae22 <_dtoa_r+0x75a>
    b39c:	4629      	mov	r1, r5
    b39e:	4620      	mov	r0, r4
    b3a0:	f7fc fe86 	bl	80b0 <__pow5mult>
    b3a4:	4605      	mov	r5, r0
    b3a6:	e4d7      	b.n	ad58 <_dtoa_r+0x690>
    b3a8:	980e      	ldr	r0, [sp, #56]	; 0x38
    b3aa:	4974      	ldr	r1, [pc, #464]	; (b57c <_dtoa_r+0xeb4>)
    b3ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    b3b0:	4642      	mov	r2, r8
    b3b2:	464b      	mov	r3, r9
    b3b4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
    b3b8:	f7fb f85c 	bl	6474 <__aeabi_dmul>
    b3bc:	ec5a 9b1a 	vmov	r9, sl, d10
    b3c0:	ec41 0b18 	vmov	d8, r0, r1
    b3c4:	4651      	mov	r1, sl
    b3c6:	ee1a 0a10 	vmov	r0, s20
    b3ca:	f001 fe0f 	bl	cfec <__aeabi_d2iz>
    b3ce:	4607      	mov	r7, r0
    b3d0:	f7fa ffe6 	bl	63a0 <__aeabi_i2d>
    b3d4:	4602      	mov	r2, r0
    b3d6:	460b      	mov	r3, r1
    b3d8:	ee1a 0a10 	vmov	r0, s20
    b3dc:	4651      	mov	r1, sl
    b3de:	f7fa fe91 	bl	6104 <__aeabi_dsub>
    b3e2:	4606      	mov	r6, r0
    b3e4:	980e      	ldr	r0, [sp, #56]	; 0x38
    b3e6:	f8dd 8000 	ldr.w	r8, [sp]
    b3ea:	3730      	adds	r7, #48	; 0x30
    b3ec:	2801      	cmp	r0, #1
    b3ee:	f808 7b01 	strb.w	r7, [r8], #1
    b3f2:	460f      	mov	r7, r1
    b3f4:	f000 80d5 	beq.w	b5a2 <_dtoa_r+0xeda>
    b3f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b3fa:	9a00      	ldr	r2, [sp, #0]
    b3fc:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    b400:	4413      	add	r3, r2
    b402:	469b      	mov	fp, r3
    b404:	46c2      	mov	sl, r8
    b406:	4b5f      	ldr	r3, [pc, #380]	; (b584 <_dtoa_r+0xebc>)
    b408:	2200      	movs	r2, #0
    b40a:	4630      	mov	r0, r6
    b40c:	4639      	mov	r1, r7
    b40e:	f7fb f831 	bl	6474 <__aeabi_dmul>
    b412:	4689      	mov	r9, r1
    b414:	4680      	mov	r8, r0
    b416:	f001 fde9 	bl	cfec <__aeabi_d2iz>
    b41a:	4607      	mov	r7, r0
    b41c:	f7fa ffc0 	bl	63a0 <__aeabi_i2d>
    b420:	3730      	adds	r7, #48	; 0x30
    b422:	4602      	mov	r2, r0
    b424:	460b      	mov	r3, r1
    b426:	4640      	mov	r0, r8
    b428:	4649      	mov	r1, r9
    b42a:	f7fa fe6b 	bl	6104 <__aeabi_dsub>
    b42e:	f80a 7b01 	strb.w	r7, [sl], #1
    b432:	45d3      	cmp	fp, sl
    b434:	4606      	mov	r6, r0
    b436:	460f      	mov	r7, r1
    b438:	d1e5      	bne.n	b406 <_dtoa_r+0xd3e>
    b43a:	46da      	mov	sl, fp
    b43c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    b440:	4b51      	ldr	r3, [pc, #324]	; (b588 <_dtoa_r+0xec0>)
    b442:	ec59 8b18 	vmov	r8, r9, d8
    b446:	2200      	movs	r2, #0
    b448:	ee18 0a10 	vmov	r0, s16
    b44c:	4649      	mov	r1, r9
    b44e:	f7fa fe5b 	bl	6108 <__adddf3>
    b452:	4632      	mov	r2, r6
    b454:	463b      	mov	r3, r7
    b456:	f7fb fa7f 	bl	6958 <__aeabi_dcmplt>
    b45a:	2800      	cmp	r0, #0
    b45c:	d16d      	bne.n	b53a <_dtoa_r+0xe72>
    b45e:	ee18 2a10 	vmov	r2, s16
    b462:	464b      	mov	r3, r9
    b464:	4948      	ldr	r1, [pc, #288]	; (b588 <_dtoa_r+0xec0>)
    b466:	2000      	movs	r0, #0
    b468:	f7fa fe4c 	bl	6104 <__aeabi_dsub>
    b46c:	4632      	mov	r2, r6
    b46e:	463b      	mov	r3, r7
    b470:	f7fb fa90 	bl	6994 <__aeabi_dcmpgt>
    b474:	2800      	cmp	r0, #0
    b476:	f43f ab92 	beq.w	ab9e <_dtoa_r+0x4d6>
    b47a:	46d1      	mov	r9, sl
    b47c:	f10a 3aff 	add.w	sl, sl, #4294967295
    b480:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    b484:	2b30      	cmp	r3, #48	; 0x30
    b486:	d0f8      	beq.n	b47a <_dtoa_r+0xdb2>
    b488:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b48a:	3301      	adds	r3, #1
    b48c:	9305      	str	r3, [sp, #20]
    b48e:	e4f7      	b.n	ae80 <_dtoa_r+0x7b8>
    b490:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b492:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    b496:	e6c6      	b.n	b226 <_dtoa_r+0xb5e>
    b498:	9b07      	ldr	r3, [sp, #28]
    b49a:	2b00      	cmp	r3, #0
    b49c:	f43f ab57 	beq.w	ab4e <_dtoa_r+0x486>
    b4a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b4a2:	2b00      	cmp	r3, #0
    b4a4:	f77f ab7b 	ble.w	ab9e <_dtoa_r+0x4d6>
    b4a8:	9a05      	ldr	r2, [sp, #20]
    b4aa:	930e      	str	r3, [sp, #56]	; 0x38
    b4ac:	3a01      	subs	r2, #1
    b4ae:	4b35      	ldr	r3, [pc, #212]	; (b584 <_dtoa_r+0xebc>)
    b4b0:	9210      	str	r2, [sp, #64]	; 0x40
    b4b2:	ee1a 0a10 	vmov	r0, s20
    b4b6:	4639      	mov	r1, r7
    b4b8:	2200      	movs	r2, #0
    b4ba:	f7fa ffdb 	bl	6474 <__aeabi_dmul>
    b4be:	4602      	mov	r2, r0
    b4c0:	4616      	mov	r6, r2
    b4c2:	460f      	mov	r7, r1
    b4c4:	f10a 0001 	add.w	r0, sl, #1
    b4c8:	f7fa ff6a 	bl	63a0 <__aeabi_i2d>
    b4cc:	4632      	mov	r2, r6
    b4ce:	463b      	mov	r3, r7
    b4d0:	f7fa ffd0 	bl	6474 <__aeabi_dmul>
    b4d4:	4b2d      	ldr	r3, [pc, #180]	; (b58c <_dtoa_r+0xec4>)
    b4d6:	2200      	movs	r2, #0
    b4d8:	f7fa fe16 	bl	6108 <__adddf3>
    b4dc:	ec47 6b1a 	vmov	d10, r6, r7
    b4e0:	4680      	mov	r8, r0
    b4e2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
    b4e6:	f7ff ba9f 	b.w	aa28 <_dtoa_r+0x360>
    b4ea:	f04f 0a02 	mov.w	sl, #2
    b4ee:	eeb0 aa49 	vmov.f32	s20, s18
    b4f2:	eef0 aa69 	vmov.f32	s21, s19
    b4f6:	f7ff ba73 	b.w	a9e0 <_dtoa_r+0x318>
    b4fa:	9b05      	ldr	r3, [sp, #20]
    b4fc:	3301      	adds	r3, #1
    b4fe:	9305      	str	r3, [sp, #20]
    b500:	2331      	movs	r3, #49	; 0x31
    b502:	f7ff bb1e 	b.w	ab42 <_dtoa_r+0x47a>
    b506:	9b05      	ldr	r3, [sp, #20]
    b508:	46bb      	mov	fp, r7
    b50a:	3301      	adds	r3, #1
    b50c:	9305      	str	r3, [sp, #20]
    b50e:	2339      	movs	r3, #57	; 0x39
    b510:	4637      	mov	r7, r6
    b512:	f80b 3b01 	strb.w	r3, [fp], #1
    b516:	4646      	mov	r6, r8
    b518:	e492      	b.n	ae40 <_dtoa_r+0x778>
    b51a:	f04f 0a00 	mov.w	sl, #0
    b51e:	4656      	mov	r6, sl
    b520:	e628      	b.n	b174 <_dtoa_r+0xaac>
    b522:	4698      	mov	r8, r3
    b524:	e427      	b.n	ad76 <_dtoa_r+0x6ae>
    b526:	46aa      	mov	sl, r5
    b528:	ee18 4a10 	vmov	r4, s16
    b52c:	ee1a 5a10 	vmov	r5, s20
    b530:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b532:	3301      	adds	r3, #1
    b534:	9305      	str	r3, [sp, #20]
    b536:	46d1      	mov	r9, sl
    b538:	e4a2      	b.n	ae80 <_dtoa_r+0x7b8>
    b53a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b53c:	9a00      	ldr	r2, [sp, #0]
    b53e:	9305      	str	r3, [sp, #20]
    b540:	f7ff baf8 	b.w	ab34 <_dtoa_r+0x46c>
    b544:	f47f aeda 	bne.w	b2fc <_dtoa_r+0xc34>
    b548:	07da      	lsls	r2, r3, #31
    b54a:	f57f aed7 	bpl.w	b2fc <_dtoa_r+0xc34>
    b54e:	e6d0      	b.n	b2f2 <_dtoa_r+0xc2a>
    b550:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    b554:	ee1a 5a10 	vmov	r5, s20
    b558:	ee18 4a10 	vmov	r4, s16
    b55c:	f7ff bb1f 	b.w	ab9e <_dtoa_r+0x4d6>
    b560:	2b39      	cmp	r3, #57	; 0x39
    b562:	d0d0      	beq.n	b506 <_dtoa_r+0xe3e>
    b564:	f1b9 0f00 	cmp.w	r9, #0
    b568:	f73f aec6 	bgt.w	b2f8 <_dtoa_r+0xc30>
    b56c:	e6c6      	b.n	b2fc <_dtoa_r+0xc34>
    b56e:	9b01      	ldr	r3, [sp, #4]
    b570:	2b02      	cmp	r3, #2
    b572:	f73f adea 	bgt.w	b14a <_dtoa_r+0xa82>
    b576:	f8cd 9014 	str.w	r9, [sp, #20]
    b57a:	e572      	b.n	b062 <_dtoa_r+0x99a>
    b57c:	0000d928 	.word	0x0000d928
    b580:	0000d900 	.word	0x0000d900
    b584:	40240000 	.word	0x40240000
    b588:	3fe00000 	.word	0x3fe00000
    b58c:	401c0000 	.word	0x401c0000
    b590:	9b01      	ldr	r3, [sp, #4]
    b592:	2b02      	cmp	r3, #2
    b594:	f73f add9 	bgt.w	b14a <_dtoa_r+0xa82>
    b598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b59a:	f8cd 9014 	str.w	r9, [sp, #20]
    b59e:	9307      	str	r3, [sp, #28]
    b5a0:	e4e0      	b.n	af64 <_dtoa_r+0x89c>
    b5a2:	46c2      	mov	sl, r8
    b5a4:	e74c      	b.n	b440 <_dtoa_r+0xd78>
    b5a6:	f04f 0a02 	mov.w	sl, #2
    b5aa:	f7ff ba19 	b.w	a9e0 <_dtoa_r+0x318>
    b5ae:	4b12      	ldr	r3, [pc, #72]	; (b5f8 <_dtoa_r+0xf30>)
    b5b0:	4812      	ldr	r0, [pc, #72]	; (b5fc <_dtoa_r+0xf34>)
    b5b2:	463a      	mov	r2, r7
    b5b4:	f240 21ef 	movw	r1, #751	; 0x2ef
    b5b8:	f7fe ff94 	bl	a4e4 <__assert_func>
    b5bc:	2600      	movs	r6, #0
    b5be:	63e6      	str	r6, [r4, #60]	; 0x3c
    b5c0:	4631      	mov	r1, r6
    b5c2:	4620      	mov	r0, r4
    b5c4:	f7fc fbc6 	bl	7d54 <_Balloc>
    b5c8:	9000      	str	r0, [sp, #0]
    b5ca:	b950      	cbnz	r0, b5e2 <_dtoa_r+0xf1a>
    b5cc:	4b0a      	ldr	r3, [pc, #40]	; (b5f8 <_dtoa_r+0xf30>)
    b5ce:	480b      	ldr	r0, [pc, #44]	; (b5fc <_dtoa_r+0xf34>)
    b5d0:	2200      	movs	r2, #0
    b5d2:	f240 11af 	movw	r1, #431	; 0x1af
    b5d6:	f7fe ff85 	bl	a4e4 <__assert_func>
    b5da:	4b09      	ldr	r3, [pc, #36]	; (b600 <_dtoa_r+0xf38>)
    b5dc:	9300      	str	r3, [sp, #0]
    b5de:	f7ff b8b6 	b.w	a74e <_dtoa_r+0x86>
    b5e2:	9b00      	ldr	r3, [sp, #0]
    b5e4:	63a3      	str	r3, [r4, #56]	; 0x38
    b5e6:	f04f 33ff 	mov.w	r3, #4294967295
    b5ea:	930f      	str	r3, [sp, #60]	; 0x3c
    b5ec:	9307      	str	r3, [sp, #28]
    b5ee:	2301      	movs	r3, #1
    b5f0:	9609      	str	r6, [sp, #36]	; 0x24
    b5f2:	930a      	str	r3, [sp, #40]	; 0x28
    b5f4:	f7ff bad3 	b.w	ab9e <_dtoa_r+0x4d6>
    b5f8:	0000d890 	.word	0x0000d890
    b5fc:	0000dab0 	.word	0x0000dab0
    b600:	0000daa0 	.word	0x0000daa0

0000b604 <_wcrtomb_r>:
    b604:	b570      	push	{r4, r5, r6, lr}
    b606:	4605      	mov	r5, r0
    b608:	b084      	sub	sp, #16
    b60a:	b15b      	cbz	r3, b624 <_wcrtomb_r+0x20>
    b60c:	461c      	mov	r4, r3
    b60e:	b169      	cbz	r1, b62c <_wcrtomb_r+0x28>
    b610:	4b0e      	ldr	r3, [pc, #56]	; (b64c <_wcrtomb_r+0x48>)
    b612:	4628      	mov	r0, r5
    b614:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    b618:	4623      	mov	r3, r4
    b61a:	47b0      	blx	r6
    b61c:	1c43      	adds	r3, r0, #1
    b61e:	d00f      	beq.n	b640 <_wcrtomb_r+0x3c>
    b620:	b004      	add	sp, #16
    b622:	bd70      	pop	{r4, r5, r6, pc}
    b624:	f500 7482 	add.w	r4, r0, #260	; 0x104
    b628:	2900      	cmp	r1, #0
    b62a:	d1f1      	bne.n	b610 <_wcrtomb_r+0xc>
    b62c:	4a07      	ldr	r2, [pc, #28]	; (b64c <_wcrtomb_r+0x48>)
    b62e:	4623      	mov	r3, r4
    b630:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    b634:	4628      	mov	r0, r5
    b636:	460a      	mov	r2, r1
    b638:	a901      	add	r1, sp, #4
    b63a:	47b0      	blx	r6
    b63c:	1c43      	adds	r3, r0, #1
    b63e:	d1ef      	bne.n	b620 <_wcrtomb_r+0x1c>
    b640:	2200      	movs	r2, #0
    b642:	238a      	movs	r3, #138	; 0x8a
    b644:	6022      	str	r2, [r4, #0]
    b646:	602b      	str	r3, [r5, #0]
    b648:	b004      	add	sp, #16
    b64a:	bd70      	pop	{r4, r5, r6, pc}
    b64c:	1fff0c48 	.word	0x1fff0c48

0000b650 <_wcsrtombs_r>:
    b650:	b510      	push	{r4, lr}
    b652:	b082      	sub	sp, #8
    b654:	9c04      	ldr	r4, [sp, #16]
    b656:	e9cd 3400 	strd	r3, r4, [sp]
    b65a:	f04f 33ff 	mov.w	r3, #4294967295
    b65e:	f001 fbc7 	bl	cdf0 <_wcsnrtombs_r>
    b662:	b002      	add	sp, #8
    b664:	bd10      	pop	{r4, pc}
    b666:	bf00      	nop

0000b668 <fiprintf>:
    b668:	b40e      	push	{r1, r2, r3}
    b66a:	b510      	push	{r4, lr}
    b66c:	b083      	sub	sp, #12
    b66e:	ab05      	add	r3, sp, #20
    b670:	4c06      	ldr	r4, [pc, #24]	; (b68c <fiprintf+0x24>)
    b672:	f853 2b04 	ldr.w	r2, [r3], #4
    b676:	9301      	str	r3, [sp, #4]
    b678:	4601      	mov	r1, r0
    b67a:	6820      	ldr	r0, [r4, #0]
    b67c:	f000 f8c4 	bl	b808 <_vfiprintf_r>
    b680:	b003      	add	sp, #12
    b682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b686:	b003      	add	sp, #12
    b688:	4770      	bx	lr
    b68a:	bf00      	nop
    b68c:	1fff0ed8 	.word	0x1fff0ed8

0000b690 <__ssprint_r>:
    b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b694:	6893      	ldr	r3, [r2, #8]
    b696:	6817      	ldr	r7, [r2, #0]
    b698:	b083      	sub	sp, #12
    b69a:	4692      	mov	sl, r2
    b69c:	2b00      	cmp	r3, #0
    b69e:	d070      	beq.n	b782 <__ssprint_r+0xf2>
    b6a0:	4681      	mov	r9, r0
    b6a2:	688a      	ldr	r2, [r1, #8]
    b6a4:	6808      	ldr	r0, [r1, #0]
    b6a6:	460c      	mov	r4, r1
    b6a8:	3708      	adds	r7, #8
    b6aa:	e043      	b.n	b734 <__ssprint_r+0xa4>
    b6ac:	89a3      	ldrh	r3, [r4, #12]
    b6ae:	f413 6f90 	tst.w	r3, #1152	; 0x480
    b6b2:	d02e      	beq.n	b712 <__ssprint_r+0x82>
    b6b4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    b6b8:	eba0 0801 	sub.w	r8, r0, r1
    b6bc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    b6c0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    b6c4:	f108 0001 	add.w	r0, r8, #1
    b6c8:	1076      	asrs	r6, r6, #1
    b6ca:	4428      	add	r0, r5
    b6cc:	42b0      	cmp	r0, r6
    b6ce:	4632      	mov	r2, r6
    b6d0:	bf84      	itt	hi
    b6d2:	4606      	movhi	r6, r0
    b6d4:	4632      	movhi	r2, r6
    b6d6:	055b      	lsls	r3, r3, #21
    b6d8:	d537      	bpl.n	b74a <__ssprint_r+0xba>
    b6da:	4611      	mov	r1, r2
    b6dc:	4648      	mov	r0, r9
    b6de:	f7fb f979 	bl	69d4 <_malloc_r>
    b6e2:	9001      	str	r0, [sp, #4]
    b6e4:	2800      	cmp	r0, #0
    b6e6:	d03a      	beq.n	b75e <__ssprint_r+0xce>
    b6e8:	4642      	mov	r2, r8
    b6ea:	6921      	ldr	r1, [r4, #16]
    b6ec:	f7f9 fa7a 	bl	4be4 <memcpy>
    b6f0:	89a2      	ldrh	r2, [r4, #12]
    b6f2:	9b01      	ldr	r3, [sp, #4]
    b6f4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    b6f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b6fc:	81a2      	strh	r2, [r4, #12]
    b6fe:	eba6 0208 	sub.w	r2, r6, r8
    b702:	eb03 0008 	add.w	r0, r3, r8
    b706:	6166      	str	r6, [r4, #20]
    b708:	60a2      	str	r2, [r4, #8]
    b70a:	6123      	str	r3, [r4, #16]
    b70c:	6020      	str	r0, [r4, #0]
    b70e:	462e      	mov	r6, r5
    b710:	46a8      	mov	r8, r5
    b712:	4642      	mov	r2, r8
    b714:	4659      	mov	r1, fp
    b716:	f7fb ff95 	bl	7644 <memmove>
    b71a:	f8da 3008 	ldr.w	r3, [sl, #8]
    b71e:	68a2      	ldr	r2, [r4, #8]
    b720:	6820      	ldr	r0, [r4, #0]
    b722:	1b92      	subs	r2, r2, r6
    b724:	4440      	add	r0, r8
    b726:	1b5b      	subs	r3, r3, r5
    b728:	60a2      	str	r2, [r4, #8]
    b72a:	6020      	str	r0, [r4, #0]
    b72c:	f8ca 3008 	str.w	r3, [sl, #8]
    b730:	b33b      	cbz	r3, b782 <__ssprint_r+0xf2>
    b732:	3708      	adds	r7, #8
    b734:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    b738:	2d00      	cmp	r5, #0
    b73a:	d0fa      	beq.n	b732 <__ssprint_r+0xa2>
    b73c:	42aa      	cmp	r2, r5
    b73e:	4616      	mov	r6, r2
    b740:	4690      	mov	r8, r2
    b742:	d9b3      	bls.n	b6ac <__ssprint_r+0x1c>
    b744:	462e      	mov	r6, r5
    b746:	46a8      	mov	r8, r5
    b748:	e7e3      	b.n	b712 <__ssprint_r+0x82>
    b74a:	4648      	mov	r0, r9
    b74c:	f7fb fbfe 	bl	6f4c <_realloc_r>
    b750:	4603      	mov	r3, r0
    b752:	2800      	cmp	r0, #0
    b754:	d1d3      	bne.n	b6fe <__ssprint_r+0x6e>
    b756:	6921      	ldr	r1, [r4, #16]
    b758:	4648      	mov	r0, r9
    b75a:	f7fc f9df 	bl	7b1c <_free_r>
    b75e:	89a3      	ldrh	r3, [r4, #12]
    b760:	220c      	movs	r2, #12
    b762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b766:	f8c9 2000 	str.w	r2, [r9]
    b76a:	f04f 30ff 	mov.w	r0, #4294967295
    b76e:	81a3      	strh	r3, [r4, #12]
    b770:	2200      	movs	r2, #0
    b772:	2300      	movs	r3, #0
    b774:	f8ca 2008 	str.w	r2, [sl, #8]
    b778:	f8ca 3004 	str.w	r3, [sl, #4]
    b77c:	b003      	add	sp, #12
    b77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b782:	2000      	movs	r0, #0
    b784:	2300      	movs	r3, #0
    b786:	f8ca 3004 	str.w	r3, [sl, #4]
    b78a:	b003      	add	sp, #12
    b78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b790 <__sprint_r.part.0>:
    b790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b794:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    b796:	049c      	lsls	r4, r3, #18
    b798:	4690      	mov	r8, r2
    b79a:	d52d      	bpl.n	b7f8 <__sprint_r.part.0+0x68>
    b79c:	6893      	ldr	r3, [r2, #8]
    b79e:	6812      	ldr	r2, [r2, #0]
    b7a0:	b343      	cbz	r3, b7f4 <__sprint_r.part.0+0x64>
    b7a2:	468b      	mov	fp, r1
    b7a4:	4606      	mov	r6, r0
    b7a6:	f102 0908 	add.w	r9, r2, #8
    b7aa:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    b7ae:	ea5f 079a 	movs.w	r7, sl, lsr #2
    b7b2:	d015      	beq.n	b7e0 <__sprint_r.part.0+0x50>
    b7b4:	3d04      	subs	r5, #4
    b7b6:	2400      	movs	r4, #0
    b7b8:	e001      	b.n	b7be <__sprint_r.part.0+0x2e>
    b7ba:	42a7      	cmp	r7, r4
    b7bc:	d00e      	beq.n	b7dc <__sprint_r.part.0+0x4c>
    b7be:	f855 1f04 	ldr.w	r1, [r5, #4]!
    b7c2:	465a      	mov	r2, fp
    b7c4:	4630      	mov	r0, r6
    b7c6:	f001 fa5b 	bl	cc80 <_fputwc_r>
    b7ca:	1c43      	adds	r3, r0, #1
    b7cc:	f104 0401 	add.w	r4, r4, #1
    b7d0:	d1f3      	bne.n	b7ba <__sprint_r.part.0+0x2a>
    b7d2:	2300      	movs	r3, #0
    b7d4:	e9c8 3301 	strd	r3, r3, [r8, #4]
    b7d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    b7e0:	f02a 0a03 	bic.w	sl, sl, #3
    b7e4:	eba3 030a 	sub.w	r3, r3, sl
    b7e8:	f8c8 3008 	str.w	r3, [r8, #8]
    b7ec:	f109 0908 	add.w	r9, r9, #8
    b7f0:	2b00      	cmp	r3, #0
    b7f2:	d1da      	bne.n	b7aa <__sprint_r.part.0+0x1a>
    b7f4:	2000      	movs	r0, #0
    b7f6:	e7ec      	b.n	b7d2 <__sprint_r.part.0+0x42>
    b7f8:	f001 f80c 	bl	c814 <__sfvwrite_r>
    b7fc:	2300      	movs	r3, #0
    b7fe:	e9c8 3301 	strd	r3, r3, [r8, #4]
    b802:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b806:	bf00      	nop

0000b808 <_vfiprintf_r>:
    b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b80c:	ed2d 8b02 	vpush	{d8}
    b810:	b0c5      	sub	sp, #276	; 0x114
    b812:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    b816:	4683      	mov	fp, r0
    b818:	ee08 1a10 	vmov	s16, r1
    b81c:	4616      	mov	r6, r2
    b81e:	2100      	movs	r1, #0
    b820:	2208      	movs	r2, #8
    b822:	4650      	mov	r0, sl
    b824:	461c      	mov	r4, r3
    b826:	9307      	str	r3, [sp, #28]
    b828:	f7fb ff88 	bl	773c <memset>
    b82c:	f1bb 0f00 	cmp.w	fp, #0
    b830:	d004      	beq.n	b83c <_vfiprintf_r+0x34>
    b832:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    b836:	2b00      	cmp	r3, #0
    b838:	f000 86a0 	beq.w	c57c <_vfiprintf_r+0xd74>
    b83c:	ee18 2a10 	vmov	r2, s16
    b840:	6e53      	ldr	r3, [r2, #100]	; 0x64
    b842:	07db      	lsls	r3, r3, #31
    b844:	f140 8513 	bpl.w	c26e <_vfiprintf_r+0xa66>
    b848:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    b84c:	b28a      	uxth	r2, r1
    b84e:	0495      	lsls	r5, r2, #18
    b850:	d40b      	bmi.n	b86a <_vfiprintf_r+0x62>
    b852:	ee18 3a10 	vmov	r3, s16
    b856:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    b85a:	8199      	strh	r1, [r3, #12]
    b85c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b85e:	b28a      	uxth	r2, r1
    b860:	ee18 1a10 	vmov	r1, s16
    b864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    b868:	664b      	str	r3, [r1, #100]	; 0x64
    b86a:	0710      	lsls	r0, r2, #28
    b86c:	f140 8105 	bpl.w	ba7a <_vfiprintf_r+0x272>
    b870:	ee18 3a10 	vmov	r3, s16
    b874:	691b      	ldr	r3, [r3, #16]
    b876:	2b00      	cmp	r3, #0
    b878:	f000 80ff 	beq.w	ba7a <_vfiprintf_r+0x272>
    b87c:	f002 031a 	and.w	r3, r2, #26
    b880:	2b0a      	cmp	r3, #10
    b882:	f000 810a 	beq.w	ba9a <_vfiprintf_r+0x292>
    b886:	2300      	movs	r3, #0
    b888:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    b88c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    b890:	aa1b      	add	r2, sp, #108	; 0x6c
    b892:	930c      	str	r3, [sp, #48]	; 0x30
    b894:	9218      	str	r2, [sp, #96]	; 0x60
    b896:	4691      	mov	r9, r2
    b898:	930b      	str	r3, [sp, #44]	; 0x2c
    b89a:	9305      	str	r3, [sp, #20]
    b89c:	46b0      	mov	r8, r6
    b89e:	4644      	mov	r4, r8
    b8a0:	4ba8      	ldr	r3, [pc, #672]	; (bb44 <_vfiprintf_r+0x33c>)
    b8a2:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    b8a6:	f7fb ffcd 	bl	7844 <__locale_mb_cur_max>
    b8aa:	4622      	mov	r2, r4
    b8ac:	4603      	mov	r3, r0
    b8ae:	a912      	add	r1, sp, #72	; 0x48
    b8b0:	f8cd a000 	str.w	sl, [sp]
    b8b4:	4658      	mov	r0, fp
    b8b6:	47a8      	blx	r5
    b8b8:	2800      	cmp	r0, #0
    b8ba:	f000 8145 	beq.w	bb48 <_vfiprintf_r+0x340>
    b8be:	f2c0 8139 	blt.w	bb34 <_vfiprintf_r+0x32c>
    b8c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b8c4:	2a25      	cmp	r2, #37	; 0x25
    b8c6:	4603      	mov	r3, r0
    b8c8:	d001      	beq.n	b8ce <_vfiprintf_r+0xc6>
    b8ca:	441c      	add	r4, r3
    b8cc:	e7e8      	b.n	b8a0 <_vfiprintf_r+0x98>
    b8ce:	ebb4 0608 	subs.w	r6, r4, r8
    b8d2:	4605      	mov	r5, r0
    b8d4:	f040 813c 	bne.w	bb50 <_vfiprintf_r+0x348>
    b8d8:	2300      	movs	r3, #0
    b8da:	7861      	ldrb	r1, [r4, #1]
    b8dc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b8e0:	f104 0801 	add.w	r8, r4, #1
    b8e4:	9306      	str	r3, [sp, #24]
    b8e6:	f04f 37ff 	mov.w	r7, #4294967295
    b8ea:	461e      	mov	r6, r3
    b8ec:	242b      	movs	r4, #43	; 0x2b
    b8ee:	f108 0801 	add.w	r8, r8, #1
    b8f2:	f1a1 0320 	sub.w	r3, r1, #32
    b8f6:	2b5a      	cmp	r3, #90	; 0x5a
    b8f8:	f200 8178 	bhi.w	bbec <_vfiprintf_r+0x3e4>
    b8fc:	e8df f013 	tbh	[pc, r3, lsl #1]
    b900:	017602b5 	.word	0x017602b5
    b904:	02b00176 	.word	0x02b00176
    b908:	01760176 	.word	0x01760176
    b90c:	006a0176 	.word	0x006a0176
    b910:	01760176 	.word	0x01760176
    b914:	028d027d 	.word	0x028d027d
    b918:	02880176 	.word	0x02880176
    b91c:	01760297 	.word	0x01760297
    b920:	005b0292 	.word	0x005b0292
    b924:	005b005b 	.word	0x005b005b
    b928:	005b005b 	.word	0x005b005b
    b92c:	005b005b 	.word	0x005b005b
    b930:	005b005b 	.word	0x005b005b
    b934:	01760176 	.word	0x01760176
    b938:	01760176 	.word	0x01760176
    b93c:	01760176 	.word	0x01760176
    b940:	01760176 	.word	0x01760176
    b944:	025c0176 	.word	0x025c0176
    b948:	01760084 	.word	0x01760084
    b94c:	01760176 	.word	0x01760176
    b950:	01760176 	.word	0x01760176
    b954:	01760176 	.word	0x01760176
    b958:	01760176 	.word	0x01760176
    b95c:	00e80176 	.word	0x00e80176
    b960:	01760176 	.word	0x01760176
    b964:	02330176 	.word	0x02330176
    b968:	02da0176 	.word	0x02da0176
    b96c:	01760176 	.word	0x01760176
    b970:	0176058b 	.word	0x0176058b
    b974:	01760176 	.word	0x01760176
    b978:	01760176 	.word	0x01760176
    b97c:	01760176 	.word	0x01760176
    b980:	01760176 	.word	0x01760176
    b984:	025c0176 	.word	0x025c0176
    b988:	01760086 	.word	0x01760086
    b98c:	01760176 	.word	0x01760176
    b990:	008602cd 	.word	0x008602cd
    b994:	0176007f 	.word	0x0176007f
    b998:	017602c0 	.word	0x017602c0
    b99c:	00ea02fd 	.word	0x00ea02fd
    b9a0:	007f02ed 	.word	0x007f02ed
    b9a4:	02330176 	.word	0x02330176
    b9a8:	0569007c 	.word	0x0569007c
    b9ac:	01760176 	.word	0x01760176
    b9b0:	0176056b 	.word	0x0176056b
    b9b4:	007c      	.short	0x007c
    b9b6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b9ba:	2200      	movs	r2, #0
    b9bc:	f818 1b01 	ldrb.w	r1, [r8], #1
    b9c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    b9c4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    b9c8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b9cc:	2b09      	cmp	r3, #9
    b9ce:	d9f5      	bls.n	b9bc <_vfiprintf_r+0x1b4>
    b9d0:	9206      	str	r2, [sp, #24]
    b9d2:	e78e      	b.n	b8f2 <_vfiprintf_r+0xea>
    b9d4:	4658      	mov	r0, fp
    b9d6:	f7fe fc9d 	bl	a314 <_localeconv_r>
    b9da:	6843      	ldr	r3, [r0, #4]
    b9dc:	930d      	str	r3, [sp, #52]	; 0x34
    b9de:	4618      	mov	r0, r3
    b9e0:	f7fb ffce 	bl	7980 <strlen>
    b9e4:	900e      	str	r0, [sp, #56]	; 0x38
    b9e6:	4605      	mov	r5, r0
    b9e8:	4658      	mov	r0, fp
    b9ea:	f7fe fc93 	bl	a314 <_localeconv_r>
    b9ee:	6883      	ldr	r3, [r0, #8]
    b9f0:	930b      	str	r3, [sp, #44]	; 0x2c
    b9f2:	2d00      	cmp	r5, #0
    b9f4:	f040 84d6 	bne.w	c3a4 <_vfiprintf_r+0xb9c>
    b9f8:	f898 1000 	ldrb.w	r1, [r8]
    b9fc:	e777      	b.n	b8ee <_vfiprintf_r+0xe6>
    b9fe:	f898 1000 	ldrb.w	r1, [r8]
    ba02:	f046 0620 	orr.w	r6, r6, #32
    ba06:	e772      	b.n	b8ee <_vfiprintf_r+0xe6>
    ba08:	f046 0610 	orr.w	r6, r6, #16
    ba0c:	06b4      	lsls	r4, r6, #26
    ba0e:	f140 818e 	bpl.w	bd2e <_vfiprintf_r+0x526>
    ba12:	9b07      	ldr	r3, [sp, #28]
    ba14:	3307      	adds	r3, #7
    ba16:	f023 0307 	bic.w	r3, r3, #7
    ba1a:	461a      	mov	r2, r3
    ba1c:	6859      	ldr	r1, [r3, #4]
    ba1e:	f852 3b08 	ldr.w	r3, [r2], #8
    ba22:	9207      	str	r2, [sp, #28]
    ba24:	460a      	mov	r2, r1
    ba26:	2900      	cmp	r1, #0
    ba28:	f2c0 8470 	blt.w	c30c <_vfiprintf_r+0xb04>
    ba2c:	1c79      	adds	r1, r7, #1
    ba2e:	f000 85a2 	beq.w	c576 <_vfiprintf_r+0xd6e>
    ba32:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    ba36:	9103      	str	r1, [sp, #12]
    ba38:	ea53 0102 	orrs.w	r1, r3, r2
    ba3c:	f000 843f 	beq.w	c2be <_vfiprintf_r+0xab6>
    ba40:	2b0a      	cmp	r3, #10
    ba42:	f172 0100 	sbcs.w	r1, r2, #0
    ba46:	f080 8541 	bcs.w	c4cc <_vfiprintf_r+0xcc4>
    ba4a:	3330      	adds	r3, #48	; 0x30
    ba4c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    ba50:	9e03      	ldr	r6, [sp, #12]
    ba52:	2301      	movs	r3, #1
    ba54:	9304      	str	r3, [sp, #16]
    ba56:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    ba5a:	9b04      	ldr	r3, [sp, #16]
    ba5c:	42bb      	cmp	r3, r7
    ba5e:	bfb8      	it	lt
    ba60:	463b      	movlt	r3, r7
    ba62:	9303      	str	r3, [sp, #12]
    ba64:	2300      	movs	r3, #0
    ba66:	9308      	str	r3, [sp, #32]
    ba68:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    ba6c:	2b00      	cmp	r3, #0
    ba6e:	f000 80cb 	beq.w	bc08 <_vfiprintf_r+0x400>
    ba72:	9b03      	ldr	r3, [sp, #12]
    ba74:	3301      	adds	r3, #1
    ba76:	9303      	str	r3, [sp, #12]
    ba78:	e0c6      	b.n	bc08 <_vfiprintf_r+0x400>
    ba7a:	ee18 1a10 	vmov	r1, s16
    ba7e:	4658      	mov	r0, fp
    ba80:	ee18 5a10 	vmov	r5, s16
    ba84:	f001 f840 	bl	cb08 <__swsetup_r>
    ba88:	2800      	cmp	r0, #0
    ba8a:	f040 8652 	bne.w	c732 <_vfiprintf_r+0xf2a>
    ba8e:	89aa      	ldrh	r2, [r5, #12]
    ba90:	f002 031a 	and.w	r3, r2, #26
    ba94:	2b0a      	cmp	r3, #10
    ba96:	f47f aef6 	bne.w	b886 <_vfiprintf_r+0x7e>
    ba9a:	ee18 1a10 	vmov	r1, s16
    ba9e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    baa2:	2b00      	cmp	r3, #0
    baa4:	f6ff aeef 	blt.w	b886 <_vfiprintf_r+0x7e>
    baa8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    baaa:	07db      	lsls	r3, r3, #31
    baac:	d402      	bmi.n	bab4 <_vfiprintf_r+0x2ac>
    baae:	0597      	lsls	r7, r2, #22
    bab0:	f140 8612 	bpl.w	c6d8 <_vfiprintf_r+0xed0>
    bab4:	ee18 1a10 	vmov	r1, s16
    bab8:	4623      	mov	r3, r4
    baba:	4632      	mov	r2, r6
    babc:	4658      	mov	r0, fp
    babe:	f000 fe69 	bl	c794 <__sbprintf>
    bac2:	9005      	str	r0, [sp, #20]
    bac4:	9805      	ldr	r0, [sp, #20]
    bac6:	b045      	add	sp, #276	; 0x114
    bac8:	ecbd 8b02 	vpop	{d8}
    bacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bad0:	f046 0610 	orr.w	r6, r6, #16
    bad4:	f016 0220 	ands.w	r2, r6, #32
    bad8:	f000 8136 	beq.w	bd48 <_vfiprintf_r+0x540>
    badc:	9b07      	ldr	r3, [sp, #28]
    bade:	3307      	adds	r3, #7
    bae0:	f023 0307 	bic.w	r3, r3, #7
    bae4:	4619      	mov	r1, r3
    bae6:	685a      	ldr	r2, [r3, #4]
    bae8:	f851 3b08 	ldr.w	r3, [r1], #8
    baec:	9107      	str	r1, [sp, #28]
    baee:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    baf2:	9103      	str	r1, [sp, #12]
    baf4:	2100      	movs	r1, #0
    baf6:	2000      	movs	r0, #0
    baf8:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    bafc:	1c78      	adds	r0, r7, #1
    bafe:	f000 8210 	beq.w	bf22 <_vfiprintf_r+0x71a>
    bb02:	9803      	ldr	r0, [sp, #12]
    bb04:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    bb08:	ea53 0002 	orrs.w	r0, r3, r2
    bb0c:	f040 8208 	bne.w	bf20 <_vfiprintf_r+0x718>
    bb10:	2f00      	cmp	r7, #0
    bb12:	f040 8538 	bne.w	c586 <_vfiprintf_r+0xd7e>
    bb16:	2900      	cmp	r1, #0
    bb18:	f040 83d5 	bne.w	c2c6 <_vfiprintf_r+0xabe>
    bb1c:	9b03      	ldr	r3, [sp, #12]
    bb1e:	f013 0301 	ands.w	r3, r3, #1
    bb22:	9304      	str	r3, [sp, #16]
    bb24:	f000 8411 	beq.w	c34a <_vfiprintf_r+0xb42>
    bb28:	2330      	movs	r3, #48	; 0x30
    bb2a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    bb2e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    bb32:	e792      	b.n	ba5a <_vfiprintf_r+0x252>
    bb34:	2208      	movs	r2, #8
    bb36:	2100      	movs	r1, #0
    bb38:	4650      	mov	r0, sl
    bb3a:	f7fb fdff 	bl	773c <memset>
    bb3e:	2301      	movs	r3, #1
    bb40:	441c      	add	r4, r3
    bb42:	e6ad      	b.n	b8a0 <_vfiprintf_r+0x98>
    bb44:	1fff0c48 	.word	0x1fff0c48
    bb48:	ebb4 0608 	subs.w	r6, r4, r8
    bb4c:	4605      	mov	r5, r0
    bb4e:	d01b      	beq.n	bb88 <_vfiprintf_r+0x380>
    bb50:	9b19      	ldr	r3, [sp, #100]	; 0x64
    bb52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    bb54:	3301      	adds	r3, #1
    bb56:	4432      	add	r2, r6
    bb58:	2b07      	cmp	r3, #7
    bb5a:	e9c9 8600 	strd	r8, r6, [r9]
    bb5e:	921a      	str	r2, [sp, #104]	; 0x68
    bb60:	9319      	str	r3, [sp, #100]	; 0x64
    bb62:	dd1c      	ble.n	bb9e <_vfiprintf_r+0x396>
    bb64:	2a00      	cmp	r2, #0
    bb66:	f000 83a6 	beq.w	c2b6 <_vfiprintf_r+0xaae>
    bb6a:	ee18 1a10 	vmov	r1, s16
    bb6e:	aa18      	add	r2, sp, #96	; 0x60
    bb70:	4658      	mov	r0, fp
    bb72:	f7ff fe0d 	bl	b790 <__sprint_r.part.0>
    bb76:	bb20      	cbnz	r0, bbc2 <_vfiprintf_r+0x3ba>
    bb78:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bb7c:	9b05      	ldr	r3, [sp, #20]
    bb7e:	4433      	add	r3, r6
    bb80:	9305      	str	r3, [sp, #20]
    bb82:	2d00      	cmp	r5, #0
    bb84:	f47f aea8 	bne.w	b8d8 <_vfiprintf_r+0xd0>
    bb88:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	f040 85c1 	bne.w	c712 <_vfiprintf_r+0xf0a>
    bb90:	ee18 3a10 	vmov	r3, s16
    bb94:	2200      	movs	r2, #0
    bb96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    bb9a:	9219      	str	r2, [sp, #100]	; 0x64
    bb9c:	e015      	b.n	bbca <_vfiprintf_r+0x3c2>
    bb9e:	f109 0908 	add.w	r9, r9, #8
    bba2:	e7eb      	b.n	bb7c <_vfiprintf_r+0x374>
    bba4:	ee18 1a10 	vmov	r1, s16
    bba8:	aa18      	add	r2, sp, #96	; 0x60
    bbaa:	4658      	mov	r0, fp
    bbac:	f7ff fdf0 	bl	b790 <__sprint_r.part.0>
    bbb0:	2800      	cmp	r0, #0
    bbb2:	f000 80a6 	beq.w	bd02 <_vfiprintf_r+0x4fa>
    bbb6:	9b08      	ldr	r3, [sp, #32]
    bbb8:	b11b      	cbz	r3, bbc2 <_vfiprintf_r+0x3ba>
    bbba:	9908      	ldr	r1, [sp, #32]
    bbbc:	4658      	mov	r0, fp
    bbbe:	f7fb ffad 	bl	7b1c <_free_r>
    bbc2:	ee18 3a10 	vmov	r3, s16
    bbc6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    bbca:	ee18 2a10 	vmov	r2, s16
    bbce:	6e52      	ldr	r2, [r2, #100]	; 0x64
    bbd0:	f012 0f01 	tst.w	r2, #1
    bbd4:	b29a      	uxth	r2, r3
    bbd6:	f000 80a0 	beq.w	bd1a <_vfiprintf_r+0x512>
    bbda:	0650      	lsls	r0, r2, #25
    bbdc:	f100 85b2 	bmi.w	c744 <_vfiprintf_r+0xf3c>
    bbe0:	9805      	ldr	r0, [sp, #20]
    bbe2:	b045      	add	sp, #276	; 0x114
    bbe4:	ecbd 8b02 	vpop	{d8}
    bbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbec:	2900      	cmp	r1, #0
    bbee:	d0cb      	beq.n	bb88 <_vfiprintf_r+0x380>
    bbf0:	2300      	movs	r3, #0
    bbf2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    bbf6:	2301      	movs	r3, #1
    bbf8:	e9cd 3303 	strd	r3, r3, [sp, #12]
    bbfc:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    bc00:	ac2b      	add	r4, sp, #172	; 0xac
    bc02:	2300      	movs	r3, #0
    bc04:	9308      	str	r3, [sp, #32]
    bc06:	461f      	mov	r7, r3
    bc08:	f016 0302 	ands.w	r3, r6, #2
    bc0c:	9309      	str	r3, [sp, #36]	; 0x24
    bc0e:	d002      	beq.n	bc16 <_vfiprintf_r+0x40e>
    bc10:	9b03      	ldr	r3, [sp, #12]
    bc12:	3302      	adds	r3, #2
    bc14:	9303      	str	r3, [sp, #12]
    bc16:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    bc1a:	930a      	str	r3, [sp, #40]	; 0x28
    bc1c:	d105      	bne.n	bc2a <_vfiprintf_r+0x422>
    bc1e:	9b06      	ldr	r3, [sp, #24]
    bc20:	9a03      	ldr	r2, [sp, #12]
    bc22:	1a9d      	subs	r5, r3, r2
    bc24:	2d00      	cmp	r5, #0
    bc26:	f300 827b 	bgt.w	c120 <_vfiprintf_r+0x918>
    bc2a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    bc2e:	1c41      	adds	r1, r0, #1
    bc30:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    bc34:	b182      	cbz	r2, bc58 <_vfiprintf_r+0x450>
    bc36:	2201      	movs	r2, #1
    bc38:	3301      	adds	r3, #1
    bc3a:	f8c9 2004 	str.w	r2, [r9, #4]
    bc3e:	2907      	cmp	r1, #7
    bc40:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    bc44:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    bc48:	f8c9 2000 	str.w	r2, [r9]
    bc4c:	f300 824a 	bgt.w	c0e4 <_vfiprintf_r+0x8dc>
    bc50:	4608      	mov	r0, r1
    bc52:	f109 0908 	add.w	r9, r9, #8
    bc56:	3101      	adds	r1, #1
    bc58:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bc5a:	b1e2      	cbz	r2, bc96 <_vfiprintf_r+0x48e>
    bc5c:	aa11      	add	r2, sp, #68	; 0x44
    bc5e:	3302      	adds	r3, #2
    bc60:	f8c9 2000 	str.w	r2, [r9]
    bc64:	2907      	cmp	r1, #7
    bc66:	f04f 0202 	mov.w	r2, #2
    bc6a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    bc6e:	f8c9 2004 	str.w	r2, [r9, #4]
    bc72:	f340 8250 	ble.w	c116 <_vfiprintf_r+0x90e>
    bc76:	2b00      	cmp	r3, #0
    bc78:	f000 8343 	beq.w	c302 <_vfiprintf_r+0xafa>
    bc7c:	ee18 1a10 	vmov	r1, s16
    bc80:	aa18      	add	r2, sp, #96	; 0x60
    bc82:	4658      	mov	r0, fp
    bc84:	f7ff fd84 	bl	b790 <__sprint_r.part.0>
    bc88:	2800      	cmp	r0, #0
    bc8a:	d194      	bne.n	bbb6 <_vfiprintf_r+0x3ae>
    bc8c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    bc90:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bc94:	1c41      	adds	r1, r0, #1
    bc96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bc98:	2a80      	cmp	r2, #128	; 0x80
    bc9a:	f000 8184 	beq.w	bfa6 <_vfiprintf_r+0x79e>
    bc9e:	9a04      	ldr	r2, [sp, #16]
    bca0:	1abd      	subs	r5, r7, r2
    bca2:	2d00      	cmp	r5, #0
    bca4:	f300 81d7 	bgt.w	c056 <_vfiprintf_r+0x84e>
    bca8:	9a04      	ldr	r2, [sp, #16]
    bcaa:	f8c9 4000 	str.w	r4, [r9]
    bcae:	4413      	add	r3, r2
    bcb0:	2907      	cmp	r1, #7
    bcb2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    bcb6:	f8c9 2004 	str.w	r2, [r9, #4]
    bcba:	f340 816e 	ble.w	bf9a <_vfiprintf_r+0x792>
    bcbe:	2b00      	cmp	r3, #0
    bcc0:	f000 8275 	beq.w	c1ae <_vfiprintf_r+0x9a6>
    bcc4:	ee18 1a10 	vmov	r1, s16
    bcc8:	aa18      	add	r2, sp, #96	; 0x60
    bcca:	4658      	mov	r0, fp
    bccc:	f7ff fd60 	bl	b790 <__sprint_r.part.0>
    bcd0:	2800      	cmp	r0, #0
    bcd2:	f47f af70 	bne.w	bbb6 <_vfiprintf_r+0x3ae>
    bcd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bcd8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bcdc:	0775      	lsls	r5, r6, #29
    bcde:	d505      	bpl.n	bcec <_vfiprintf_r+0x4e4>
    bce0:	9a06      	ldr	r2, [sp, #24]
    bce2:	9903      	ldr	r1, [sp, #12]
    bce4:	1a54      	subs	r4, r2, r1
    bce6:	2c00      	cmp	r4, #0
    bce8:	f300 826b 	bgt.w	c1c2 <_vfiprintf_r+0x9ba>
    bcec:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    bcf0:	9803      	ldr	r0, [sp, #12]
    bcf2:	4281      	cmp	r1, r0
    bcf4:	bfac      	ite	ge
    bcf6:	1852      	addge	r2, r2, r1
    bcf8:	1812      	addlt	r2, r2, r0
    bcfa:	9205      	str	r2, [sp, #20]
    bcfc:	2b00      	cmp	r3, #0
    bcfe:	f47f af51 	bne.w	bba4 <_vfiprintf_r+0x39c>
    bd02:	9908      	ldr	r1, [sp, #32]
    bd04:	2300      	movs	r3, #0
    bd06:	9319      	str	r3, [sp, #100]	; 0x64
    bd08:	2900      	cmp	r1, #0
    bd0a:	f000 8149 	beq.w	bfa0 <_vfiprintf_r+0x798>
    bd0e:	4658      	mov	r0, fp
    bd10:	f7fb ff04 	bl	7b1c <_free_r>
    bd14:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bd18:	e5c1      	b.n	b89e <_vfiprintf_r+0x96>
    bd1a:	059c      	lsls	r4, r3, #22
    bd1c:	f53f af5d 	bmi.w	bbda <_vfiprintf_r+0x3d2>
    bd20:	ee18 4a10 	vmov	r4, s16
    bd24:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bd26:	f7fb fe29 	bl	797c <__retarget_lock_release_recursive>
    bd2a:	89a2      	ldrh	r2, [r4, #12]
    bd2c:	e755      	b.n	bbda <_vfiprintf_r+0x3d2>
    bd2e:	06f0      	lsls	r0, r6, #27
    bd30:	9a07      	ldr	r2, [sp, #28]
    bd32:	f100 831f 	bmi.w	c374 <_vfiprintf_r+0xb6c>
    bd36:	0671      	lsls	r1, r6, #25
    bd38:	f140 8319 	bpl.w	c36e <_vfiprintf_r+0xb66>
    bd3c:	f932 3b04 	ldrsh.w	r3, [r2], #4
    bd40:	9207      	str	r2, [sp, #28]
    bd42:	17da      	asrs	r2, r3, #31
    bd44:	4611      	mov	r1, r2
    bd46:	e66e      	b.n	ba26 <_vfiprintf_r+0x21e>
    bd48:	f016 0310 	ands.w	r3, r6, #16
    bd4c:	9907      	ldr	r1, [sp, #28]
    bd4e:	f040 8309 	bne.w	c364 <_vfiprintf_r+0xb5c>
    bd52:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    bd56:	f000 8301 	beq.w	c35c <_vfiprintf_r+0xb54>
    bd5a:	461a      	mov	r2, r3
    bd5c:	f851 3b04 	ldr.w	r3, [r1], #4
    bd60:	9107      	str	r1, [sp, #28]
    bd62:	b29b      	uxth	r3, r3
    bd64:	e6c3      	b.n	baee <_vfiprintf_r+0x2e6>
    bd66:	9b07      	ldr	r3, [sp, #28]
    bd68:	461a      	mov	r2, r3
    bd6a:	2300      	movs	r3, #0
    bd6c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    bd70:	4613      	mov	r3, r2
    bd72:	f853 4b04 	ldr.w	r4, [r3], #4
    bd76:	9303      	str	r3, [sp, #12]
    bd78:	2c00      	cmp	r4, #0
    bd7a:	f000 8412 	beq.w	c5a2 <_vfiprintf_r+0xd9a>
    bd7e:	2953      	cmp	r1, #83	; 0x53
    bd80:	f000 8365 	beq.w	c44e <_vfiprintf_r+0xc46>
    bd84:	f016 0510 	ands.w	r5, r6, #16
    bd88:	f040 8361 	bne.w	c44e <_vfiprintf_r+0xc46>
    bd8c:	1c7b      	adds	r3, r7, #1
    bd8e:	f000 84b3 	beq.w	c6f8 <_vfiprintf_r+0xef0>
    bd92:	463a      	mov	r2, r7
    bd94:	4629      	mov	r1, r5
    bd96:	4620      	mov	r0, r4
    bd98:	f7fe fada 	bl	a350 <memchr>
    bd9c:	9008      	str	r0, [sp, #32]
    bd9e:	2800      	cmp	r0, #0
    bda0:	f000 849f 	beq.w	c6e2 <_vfiprintf_r+0xeda>
    bda4:	1b03      	subs	r3, r0, r4
    bda6:	9a03      	ldr	r2, [sp, #12]
    bda8:	9304      	str	r3, [sp, #16]
    bdaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    bdae:	462f      	mov	r7, r5
    bdb0:	9207      	str	r2, [sp, #28]
    bdb2:	9303      	str	r3, [sp, #12]
    bdb4:	9508      	str	r5, [sp, #32]
    bdb6:	e657      	b.n	ba68 <_vfiprintf_r+0x260>
    bdb8:	2943      	cmp	r1, #67	; 0x43
    bdba:	d002      	beq.n	bdc2 <_vfiprintf_r+0x5ba>
    bdbc:	06f5      	lsls	r5, r6, #27
    bdbe:	f140 832d 	bpl.w	c41c <_vfiprintf_r+0xc14>
    bdc2:	9d07      	ldr	r5, [sp, #28]
    bdc4:	2208      	movs	r2, #8
    bdc6:	2100      	movs	r1, #0
    bdc8:	a816      	add	r0, sp, #88	; 0x58
    bdca:	ac2b      	add	r4, sp, #172	; 0xac
    bdcc:	f7fb fcb6 	bl	773c <memset>
    bdd0:	ab16      	add	r3, sp, #88	; 0x58
    bdd2:	f855 2b04 	ldr.w	r2, [r5], #4
    bdd6:	4621      	mov	r1, r4
    bdd8:	4658      	mov	r0, fp
    bdda:	f7ff fc13 	bl	b604 <_wcrtomb_r>
    bdde:	4603      	mov	r3, r0
    bde0:	3301      	adds	r3, #1
    bde2:	9004      	str	r0, [sp, #16]
    bde4:	f000 84b3 	beq.w	c74e <_vfiprintf_r+0xf46>
    bde8:	9b04      	ldr	r3, [sp, #16]
    bdea:	9507      	str	r5, [sp, #28]
    bdec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    bdf0:	9303      	str	r3, [sp, #12]
    bdf2:	2300      	movs	r3, #0
    bdf4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    bdf8:	e703      	b.n	bc02 <_vfiprintf_r+0x3fa>
    bdfa:	9b07      	ldr	r3, [sp, #28]
    bdfc:	f853 2b04 	ldr.w	r2, [r3], #4
    be00:	9206      	str	r2, [sp, #24]
    be02:	2a00      	cmp	r2, #0
    be04:	f280 829c 	bge.w	c340 <_vfiprintf_r+0xb38>
    be08:	9a06      	ldr	r2, [sp, #24]
    be0a:	4252      	negs	r2, r2
    be0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    be10:	f898 1000 	ldrb.w	r1, [r8]
    be14:	f046 0604 	orr.w	r6, r6, #4
    be18:	e569      	b.n	b8ee <_vfiprintf_r+0xe6>
    be1a:	f898 1000 	ldrb.w	r1, [r8]
    be1e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    be22:	e564      	b.n	b8ee <_vfiprintf_r+0xe6>
    be24:	f898 1000 	ldrb.w	r1, [r8]
    be28:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    be2c:	e55f      	b.n	b8ee <_vfiprintf_r+0xe6>
    be2e:	4642      	mov	r2, r8
    be30:	f812 1b01 	ldrb.w	r1, [r2], #1
    be34:	292a      	cmp	r1, #42	; 0x2a
    be36:	f000 8496 	beq.w	c766 <_vfiprintf_r+0xf5e>
    be3a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    be3e:	2b09      	cmp	r3, #9
    be40:	4690      	mov	r8, r2
    be42:	f04f 0700 	mov.w	r7, #0
    be46:	f63f ad54 	bhi.w	b8f2 <_vfiprintf_r+0xea>
    be4a:	f818 1b01 	ldrb.w	r1, [r8], #1
    be4e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    be52:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    be56:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    be5a:	2b09      	cmp	r3, #9
    be5c:	d9f5      	bls.n	be4a <_vfiprintf_r+0x642>
    be5e:	e548      	b.n	b8f2 <_vfiprintf_r+0xea>
    be60:	f898 1000 	ldrb.w	r1, [r8]
    be64:	f046 0601 	orr.w	r6, r6, #1
    be68:	e541      	b.n	b8ee <_vfiprintf_r+0xe6>
    be6a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    be6e:	2b00      	cmp	r3, #0
    be70:	f47f adc2 	bne.w	b9f8 <_vfiprintf_r+0x1f0>
    be74:	2320      	movs	r3, #32
    be76:	f898 1000 	ldrb.w	r1, [r8]
    be7a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    be7e:	e536      	b.n	b8ee <_vfiprintf_r+0xe6>
    be80:	f898 1000 	ldrb.w	r1, [r8]
    be84:	296c      	cmp	r1, #108	; 0x6c
    be86:	bf03      	ittte	eq
    be88:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    be8c:	f046 0620 	orreq.w	r6, r6, #32
    be90:	f108 0801 	addeq.w	r8, r8, #1
    be94:	f046 0610 	orrne.w	r6, r6, #16
    be98:	e529      	b.n	b8ee <_vfiprintf_r+0xe6>
    be9a:	f898 1000 	ldrb.w	r1, [r8]
    be9e:	2968      	cmp	r1, #104	; 0x68
    bea0:	bf03      	ittte	eq
    bea2:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    bea6:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    beaa:	f108 0801 	addeq.w	r8, r8, #1
    beae:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    beb2:	e51c      	b.n	b8ee <_vfiprintf_r+0xe6>
    beb4:	f046 0310 	orr.w	r3, r6, #16
    beb8:	9303      	str	r3, [sp, #12]
    beba:	9b03      	ldr	r3, [sp, #12]
    bebc:	f013 0220 	ands.w	r2, r3, #32
    bec0:	f000 8206 	beq.w	c2d0 <_vfiprintf_r+0xac8>
    bec4:	9b07      	ldr	r3, [sp, #28]
    bec6:	3307      	adds	r3, #7
    bec8:	f023 0307 	bic.w	r3, r3, #7
    becc:	4619      	mov	r1, r3
    bece:	685a      	ldr	r2, [r3, #4]
    bed0:	f851 3b08 	ldr.w	r3, [r1], #8
    bed4:	9107      	str	r1, [sp, #28]
    bed6:	2101      	movs	r1, #1
    bed8:	e60d      	b.n	baf6 <_vfiprintf_r+0x2ee>
    beda:	9a07      	ldr	r2, [sp, #28]
    bedc:	f046 0302 	orr.w	r3, r6, #2
    bee0:	9303      	str	r3, [sp, #12]
    bee2:	f852 3b04 	ldr.w	r3, [r2], #4
    bee6:	9207      	str	r2, [sp, #28]
    bee8:	f647 0230 	movw	r2, #30768	; 0x7830
    beec:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    bef0:	4ab8      	ldr	r2, [pc, #736]	; (c1d4 <_vfiprintf_r+0x9cc>)
    bef2:	920c      	str	r2, [sp, #48]	; 0x30
    bef4:	2102      	movs	r1, #2
    bef6:	2200      	movs	r2, #0
    bef8:	e5fd      	b.n	baf6 <_vfiprintf_r+0x2ee>
    befa:	06b7      	lsls	r7, r6, #26
    befc:	f100 8248 	bmi.w	c390 <_vfiprintf_r+0xb88>
    bf00:	06f5      	lsls	r5, r6, #27
    bf02:	f100 8346 	bmi.w	c592 <_vfiprintf_r+0xd8a>
    bf06:	0674      	lsls	r4, r6, #25
    bf08:	f100 83d5 	bmi.w	c6b6 <_vfiprintf_r+0xeae>
    bf0c:	05b0      	lsls	r0, r6, #22
    bf0e:	f140 8340 	bpl.w	c592 <_vfiprintf_r+0xd8a>
    bf12:	9b07      	ldr	r3, [sp, #28]
    bf14:	9905      	ldr	r1, [sp, #20]
    bf16:	f853 2b04 	ldr.w	r2, [r3], #4
    bf1a:	9307      	str	r3, [sp, #28]
    bf1c:	7011      	strb	r1, [r2, #0]
    bf1e:	e4be      	b.n	b89e <_vfiprintf_r+0x96>
    bf20:	9603      	str	r6, [sp, #12]
    bf22:	2901      	cmp	r1, #1
    bf24:	f43f ad8c 	beq.w	ba40 <_vfiprintf_r+0x238>
    bf28:	2902      	cmp	r1, #2
    bf2a:	ac44      	add	r4, sp, #272	; 0x110
    bf2c:	d111      	bne.n	bf52 <_vfiprintf_r+0x74a>
    bf2e:	980c      	ldr	r0, [sp, #48]	; 0x30
    bf30:	f003 010f 	and.w	r1, r3, #15
    bf34:	091b      	lsrs	r3, r3, #4
    bf36:	5c41      	ldrb	r1, [r0, r1]
    bf38:	f804 1d01 	strb.w	r1, [r4, #-1]!
    bf3c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    bf40:	0912      	lsrs	r2, r2, #4
    bf42:	ea53 0102 	orrs.w	r1, r3, r2
    bf46:	d1f3      	bne.n	bf30 <_vfiprintf_r+0x728>
    bf48:	9e03      	ldr	r6, [sp, #12]
    bf4a:	ab44      	add	r3, sp, #272	; 0x110
    bf4c:	1b1b      	subs	r3, r3, r4
    bf4e:	9304      	str	r3, [sp, #16]
    bf50:	e583      	b.n	ba5a <_vfiprintf_r+0x252>
    bf52:	f003 0107 	and.w	r1, r3, #7
    bf56:	08db      	lsrs	r3, r3, #3
    bf58:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    bf5c:	08d2      	lsrs	r2, r2, #3
    bf5e:	3130      	adds	r1, #48	; 0x30
    bf60:	ea53 0502 	orrs.w	r5, r3, r2
    bf64:	4620      	mov	r0, r4
    bf66:	f804 1d01 	strb.w	r1, [r4, #-1]!
    bf6a:	d1f2      	bne.n	bf52 <_vfiprintf_r+0x74a>
    bf6c:	9e03      	ldr	r6, [sp, #12]
    bf6e:	07f3      	lsls	r3, r6, #31
    bf70:	d5eb      	bpl.n	bf4a <_vfiprintf_r+0x742>
    bf72:	2930      	cmp	r1, #48	; 0x30
    bf74:	d0e8      	beq.n	bf48 <_vfiprintf_r+0x740>
    bf76:	2330      	movs	r3, #48	; 0x30
    bf78:	3802      	subs	r0, #2
    bf7a:	f804 3c01 	strb.w	r3, [r4, #-1]
    bf7e:	ab44      	add	r3, sp, #272	; 0x110
    bf80:	1a1b      	subs	r3, r3, r0
    bf82:	9e03      	ldr	r6, [sp, #12]
    bf84:	9304      	str	r3, [sp, #16]
    bf86:	4604      	mov	r4, r0
    bf88:	e567      	b.n	ba5a <_vfiprintf_r+0x252>
    bf8a:	9b04      	ldr	r3, [sp, #16]
    bf8c:	941b      	str	r4, [sp, #108]	; 0x6c
    bf8e:	2201      	movs	r2, #1
    bf90:	931c      	str	r3, [sp, #112]	; 0x70
    bf92:	931a      	str	r3, [sp, #104]	; 0x68
    bf94:	9219      	str	r2, [sp, #100]	; 0x64
    bf96:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bf9a:	f109 0908 	add.w	r9, r9, #8
    bf9e:	e69d      	b.n	bcdc <_vfiprintf_r+0x4d4>
    bfa0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bfa4:	e47b      	b.n	b89e <_vfiprintf_r+0x96>
    bfa6:	9a06      	ldr	r2, [sp, #24]
    bfa8:	9d03      	ldr	r5, [sp, #12]
    bfaa:	1b55      	subs	r5, r2, r5
    bfac:	2d00      	cmp	r5, #0
    bfae:	f77f ae76 	ble.w	bc9e <_vfiprintf_r+0x496>
    bfb2:	2d10      	cmp	r5, #16
    bfb4:	f340 83bb 	ble.w	c72e <_vfiprintf_r+0xf26>
    bfb8:	9409      	str	r4, [sp, #36]	; 0x24
    bfba:	ee18 4a10 	vmov	r4, s16
    bfbe:	e007      	b.n	bfd0 <_vfiprintf_r+0x7c8>
    bfc0:	f100 0c02 	add.w	ip, r0, #2
    bfc4:	f109 0908 	add.w	r9, r9, #8
    bfc8:	4610      	mov	r0, r2
    bfca:	3d10      	subs	r5, #16
    bfcc:	2d10      	cmp	r5, #16
    bfce:	dd1e      	ble.n	c00e <_vfiprintf_r+0x806>
    bfd0:	4981      	ldr	r1, [pc, #516]	; (c1d8 <_vfiprintf_r+0x9d0>)
    bfd2:	f8c9 1000 	str.w	r1, [r9]
    bfd6:	1c42      	adds	r2, r0, #1
    bfd8:	3310      	adds	r3, #16
    bfda:	2110      	movs	r1, #16
    bfdc:	2a07      	cmp	r2, #7
    bfde:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    bfe2:	f8c9 1004 	str.w	r1, [r9, #4]
    bfe6:	ddeb      	ble.n	bfc0 <_vfiprintf_r+0x7b8>
    bfe8:	aa18      	add	r2, sp, #96	; 0x60
    bfea:	2b00      	cmp	r3, #0
    bfec:	d074      	beq.n	c0d8 <_vfiprintf_r+0x8d0>
    bfee:	4621      	mov	r1, r4
    bff0:	4658      	mov	r0, fp
    bff2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bff6:	f7ff fbcb 	bl	b790 <__sprint_r.part.0>
    bffa:	2800      	cmp	r0, #0
    bffc:	f47f addb 	bne.w	bbb6 <_vfiprintf_r+0x3ae>
    c000:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c004:	3d10      	subs	r5, #16
    c006:	2d10      	cmp	r5, #16
    c008:	f100 0c01 	add.w	ip, r0, #1
    c00c:	dce0      	bgt.n	bfd0 <_vfiprintf_r+0x7c8>
    c00e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c010:	4a71      	ldr	r2, [pc, #452]	; (c1d8 <_vfiprintf_r+0x9d0>)
    c012:	f8c9 5004 	str.w	r5, [r9, #4]
    c016:	442b      	add	r3, r5
    c018:	f1bc 0f07 	cmp.w	ip, #7
    c01c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    c020:	f8c9 2000 	str.w	r2, [r9]
    c024:	f340 8194 	ble.w	c350 <_vfiprintf_r+0xb48>
    c028:	2b00      	cmp	r3, #0
    c02a:	f000 831f 	beq.w	c66c <_vfiprintf_r+0xe64>
    c02e:	ee18 1a10 	vmov	r1, s16
    c032:	aa18      	add	r2, sp, #96	; 0x60
    c034:	4658      	mov	r0, fp
    c036:	f7ff fbab 	bl	b790 <__sprint_r.part.0>
    c03a:	2800      	cmp	r0, #0
    c03c:	f47f adbb 	bne.w	bbb6 <_vfiprintf_r+0x3ae>
    c040:	9a04      	ldr	r2, [sp, #16]
    c042:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c046:	1abd      	subs	r5, r7, r2
    c048:	2d00      	cmp	r5, #0
    c04a:	f100 0101 	add.w	r1, r0, #1
    c04e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c052:	f77f ae29 	ble.w	bca8 <_vfiprintf_r+0x4a0>
    c056:	2d10      	cmp	r5, #16
    c058:	dd29      	ble.n	c0ae <_vfiprintf_r+0x8a6>
    c05a:	9409      	str	r4, [sp, #36]	; 0x24
    c05c:	2710      	movs	r7, #16
    c05e:	ee18 4a10 	vmov	r4, s16
    c062:	e007      	b.n	c074 <_vfiprintf_r+0x86c>
    c064:	f100 0c02 	add.w	ip, r0, #2
    c068:	f109 0908 	add.w	r9, r9, #8
    c06c:	4610      	mov	r0, r2
    c06e:	3d10      	subs	r5, #16
    c070:	2d10      	cmp	r5, #16
    c072:	dd1a      	ble.n	c0aa <_vfiprintf_r+0x8a2>
    c074:	1c42      	adds	r2, r0, #1
    c076:	4958      	ldr	r1, [pc, #352]	; (c1d8 <_vfiprintf_r+0x9d0>)
    c078:	3310      	adds	r3, #16
    c07a:	2a07      	cmp	r2, #7
    c07c:	e9c9 1700 	strd	r1, r7, [r9]
    c080:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    c084:	ddee      	ble.n	c064 <_vfiprintf_r+0x85c>
    c086:	aa18      	add	r2, sp, #96	; 0x60
    c088:	b303      	cbz	r3, c0cc <_vfiprintf_r+0x8c4>
    c08a:	4621      	mov	r1, r4
    c08c:	4658      	mov	r0, fp
    c08e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c092:	f7ff fb7d 	bl	b790 <__sprint_r.part.0>
    c096:	2800      	cmp	r0, #0
    c098:	f47f ad8d 	bne.w	bbb6 <_vfiprintf_r+0x3ae>
    c09c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c0a0:	3d10      	subs	r5, #16
    c0a2:	2d10      	cmp	r5, #16
    c0a4:	f100 0c01 	add.w	ip, r0, #1
    c0a8:	dce4      	bgt.n	c074 <_vfiprintf_r+0x86c>
    c0aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c0ac:	4661      	mov	r1, ip
    c0ae:	4a4a      	ldr	r2, [pc, #296]	; (c1d8 <_vfiprintf_r+0x9d0>)
    c0b0:	f8c9 5004 	str.w	r5, [r9, #4]
    c0b4:	442b      	add	r3, r5
    c0b6:	2907      	cmp	r1, #7
    c0b8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    c0bc:	f8c9 2000 	str.w	r2, [r9]
    c0c0:	f300 80e7 	bgt.w	c292 <_vfiprintf_r+0xa8a>
    c0c4:	f109 0908 	add.w	r9, r9, #8
    c0c8:	3101      	adds	r1, #1
    c0ca:	e5ed      	b.n	bca8 <_vfiprintf_r+0x4a0>
    c0cc:	f04f 0c01 	mov.w	ip, #1
    c0d0:	4618      	mov	r0, r3
    c0d2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c0d6:	e7ca      	b.n	c06e <_vfiprintf_r+0x866>
    c0d8:	f04f 0c01 	mov.w	ip, #1
    c0dc:	4618      	mov	r0, r3
    c0de:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c0e2:	e772      	b.n	bfca <_vfiprintf_r+0x7c2>
    c0e4:	2b00      	cmp	r3, #0
    c0e6:	f000 8104 	beq.w	c2f2 <_vfiprintf_r+0xaea>
    c0ea:	ee18 1a10 	vmov	r1, s16
    c0ee:	aa18      	add	r2, sp, #96	; 0x60
    c0f0:	4658      	mov	r0, fp
    c0f2:	f7ff fb4d 	bl	b790 <__sprint_r.part.0>
    c0f6:	2800      	cmp	r0, #0
    c0f8:	f47f ad5d 	bne.w	bbb6 <_vfiprintf_r+0x3ae>
    c0fc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c100:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c104:	1c41      	adds	r1, r0, #1
    c106:	e5a7      	b.n	bc58 <_vfiprintf_r+0x450>
    c108:	2302      	movs	r3, #2
    c10a:	aa11      	add	r2, sp, #68	; 0x44
    c10c:	931c      	str	r3, [sp, #112]	; 0x70
    c10e:	921b      	str	r2, [sp, #108]	; 0x6c
    c110:	2101      	movs	r1, #1
    c112:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c116:	4608      	mov	r0, r1
    c118:	f109 0908 	add.w	r9, r9, #8
    c11c:	1c41      	adds	r1, r0, #1
    c11e:	e5ba      	b.n	bc96 <_vfiprintf_r+0x48e>
    c120:	2d10      	cmp	r5, #16
    c122:	f340 82e5 	ble.w	c6f0 <_vfiprintf_r+0xee8>
    c126:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    c12a:	940f      	str	r4, [sp, #60]	; 0x3c
    c12c:	4608      	mov	r0, r1
    c12e:	ee18 4a10 	vmov	r4, s16
    c132:	e007      	b.n	c144 <_vfiprintf_r+0x93c>
    c134:	f100 0c02 	add.w	ip, r0, #2
    c138:	f109 0908 	add.w	r9, r9, #8
    c13c:	4610      	mov	r0, r2
    c13e:	3d10      	subs	r5, #16
    c140:	2d10      	cmp	r5, #16
    c142:	dd1d      	ble.n	c180 <_vfiprintf_r+0x978>
    c144:	4925      	ldr	r1, [pc, #148]	; (c1dc <_vfiprintf_r+0x9d4>)
    c146:	f8c9 1000 	str.w	r1, [r9]
    c14a:	1c42      	adds	r2, r0, #1
    c14c:	3310      	adds	r3, #16
    c14e:	2110      	movs	r1, #16
    c150:	2a07      	cmp	r2, #7
    c152:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    c156:	f8c9 1004 	str.w	r1, [r9, #4]
    c15a:	ddeb      	ble.n	c134 <_vfiprintf_r+0x92c>
    c15c:	aa18      	add	r2, sp, #96	; 0x60
    c15e:	b303      	cbz	r3, c1a2 <_vfiprintf_r+0x99a>
    c160:	4621      	mov	r1, r4
    c162:	4658      	mov	r0, fp
    c164:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c168:	f7ff fb12 	bl	b790 <__sprint_r.part.0>
    c16c:	2800      	cmp	r0, #0
    c16e:	f47f ad22 	bne.w	bbb6 <_vfiprintf_r+0x3ae>
    c172:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c176:	3d10      	subs	r5, #16
    c178:	2d10      	cmp	r5, #16
    c17a:	f100 0c01 	add.w	ip, r0, #1
    c17e:	dce1      	bgt.n	c144 <_vfiprintf_r+0x93c>
    c180:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    c182:	4660      	mov	r0, ip
    c184:	4a15      	ldr	r2, [pc, #84]	; (c1dc <_vfiprintf_r+0x9d4>)
    c186:	f8c9 5004 	str.w	r5, [r9, #4]
    c18a:	442b      	add	r3, r5
    c18c:	2807      	cmp	r0, #7
    c18e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    c192:	f8c9 2000 	str.w	r2, [r9]
    c196:	f300 80c1 	bgt.w	c31c <_vfiprintf_r+0xb14>
    c19a:	f109 0908 	add.w	r9, r9, #8
    c19e:	1c41      	adds	r1, r0, #1
    c1a0:	e546      	b.n	bc30 <_vfiprintf_r+0x428>
    c1a2:	4618      	mov	r0, r3
    c1a4:	f04f 0c01 	mov.w	ip, #1
    c1a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c1ac:	e7c7      	b.n	c13e <_vfiprintf_r+0x936>
    c1ae:	0776      	lsls	r6, r6, #29
    c1b0:	9319      	str	r3, [sp, #100]	; 0x64
    c1b2:	d553      	bpl.n	c25c <_vfiprintf_r+0xa54>
    c1b4:	9a06      	ldr	r2, [sp, #24]
    c1b6:	9903      	ldr	r1, [sp, #12]
    c1b8:	1a54      	subs	r4, r2, r1
    c1ba:	2c00      	cmp	r4, #0
    c1bc:	dd4e      	ble.n	c25c <_vfiprintf_r+0xa54>
    c1be:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c1c2:	2c10      	cmp	r4, #16
    c1c4:	f340 82b0 	ble.w	c728 <_vfiprintf_r+0xf20>
    c1c8:	9919      	ldr	r1, [sp, #100]	; 0x64
    c1ca:	ee18 6a10 	vmov	r6, s16
    c1ce:	2510      	movs	r5, #16
    c1d0:	e00d      	b.n	c1ee <_vfiprintf_r+0x9e6>
    c1d2:	bf00      	nop
    c1d4:	0000da0c 	.word	0x0000da0c
    c1d8:	0000db1c 	.word	0x0000db1c
    c1dc:	0000db0c 	.word	0x0000db0c
    c1e0:	1c88      	adds	r0, r1, #2
    c1e2:	f109 0908 	add.w	r9, r9, #8
    c1e6:	4611      	mov	r1, r2
    c1e8:	3c10      	subs	r4, #16
    c1ea:	2c10      	cmp	r4, #16
    c1ec:	dd1a      	ble.n	c224 <_vfiprintf_r+0xa1c>
    c1ee:	1c4a      	adds	r2, r1, #1
    c1f0:	48b3      	ldr	r0, [pc, #716]	; (c4c0 <_vfiprintf_r+0xcb8>)
    c1f2:	3310      	adds	r3, #16
    c1f4:	2a07      	cmp	r2, #7
    c1f6:	e9c9 0500 	strd	r0, r5, [r9]
    c1fa:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    c1fe:	ddef      	ble.n	c1e0 <_vfiprintf_r+0x9d8>
    c200:	aa18      	add	r2, sp, #96	; 0x60
    c202:	b333      	cbz	r3, c252 <_vfiprintf_r+0xa4a>
    c204:	4631      	mov	r1, r6
    c206:	4658      	mov	r0, fp
    c208:	f7ff fac2 	bl	b790 <__sprint_r.part.0>
    c20c:	2800      	cmp	r0, #0
    c20e:	f47f acd2 	bne.w	bbb6 <_vfiprintf_r+0x3ae>
    c212:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    c216:	3c10      	subs	r4, #16
    c218:	2c10      	cmp	r4, #16
    c21a:	f101 0001 	add.w	r0, r1, #1
    c21e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c222:	dce4      	bgt.n	c1ee <_vfiprintf_r+0x9e6>
    c224:	4aa6      	ldr	r2, [pc, #664]	; (c4c0 <_vfiprintf_r+0xcb8>)
    c226:	f8c9 4004 	str.w	r4, [r9, #4]
    c22a:	4423      	add	r3, r4
    c22c:	2807      	cmp	r0, #7
    c22e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    c232:	f8c9 2000 	str.w	r2, [r9]
    c236:	f77f ad59 	ble.w	bcec <_vfiprintf_r+0x4e4>
    c23a:	b17b      	cbz	r3, c25c <_vfiprintf_r+0xa54>
    c23c:	ee18 1a10 	vmov	r1, s16
    c240:	aa18      	add	r2, sp, #96	; 0x60
    c242:	4658      	mov	r0, fp
    c244:	f7ff faa4 	bl	b790 <__sprint_r.part.0>
    c248:	2800      	cmp	r0, #0
    c24a:	f47f acb4 	bne.w	bbb6 <_vfiprintf_r+0x3ae>
    c24e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c250:	e54c      	b.n	bcec <_vfiprintf_r+0x4e4>
    c252:	2001      	movs	r0, #1
    c254:	4619      	mov	r1, r3
    c256:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c25a:	e7c5      	b.n	c1e8 <_vfiprintf_r+0x9e0>
    c25c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    c260:	9903      	ldr	r1, [sp, #12]
    c262:	428a      	cmp	r2, r1
    c264:	bfac      	ite	ge
    c266:	189b      	addge	r3, r3, r2
    c268:	185b      	addlt	r3, r3, r1
    c26a:	9305      	str	r3, [sp, #20]
    c26c:	e549      	b.n	bd02 <_vfiprintf_r+0x4fa>
    c26e:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    c272:	058f      	lsls	r7, r1, #22
    c274:	ee18 3a10 	vmov	r3, s16
    c278:	b28a      	uxth	r2, r1
    c27a:	f53f aae8 	bmi.w	b84e <_vfiprintf_r+0x46>
    c27e:	ee18 5a10 	vmov	r5, s16
    c282:	6d98      	ldr	r0, [r3, #88]	; 0x58
    c284:	f7fb fb78 	bl	7978 <__retarget_lock_acquire_recursive>
    c288:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    c28c:	b28a      	uxth	r2, r1
    c28e:	f7ff bade 	b.w	b84e <_vfiprintf_r+0x46>
    c292:	2b00      	cmp	r3, #0
    c294:	f43f ae79 	beq.w	bf8a <_vfiprintf_r+0x782>
    c298:	ee18 1a10 	vmov	r1, s16
    c29c:	aa18      	add	r2, sp, #96	; 0x60
    c29e:	4658      	mov	r0, fp
    c2a0:	f7ff fa76 	bl	b790 <__sprint_r.part.0>
    c2a4:	2800      	cmp	r0, #0
    c2a6:	f47f ac86 	bne.w	bbb6 <_vfiprintf_r+0x3ae>
    c2aa:	9919      	ldr	r1, [sp, #100]	; 0x64
    c2ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c2ae:	3101      	adds	r1, #1
    c2b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c2b4:	e4f8      	b.n	bca8 <_vfiprintf_r+0x4a0>
    c2b6:	9219      	str	r2, [sp, #100]	; 0x64
    c2b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c2bc:	e45e      	b.n	bb7c <_vfiprintf_r+0x374>
    c2be:	2f00      	cmp	r7, #0
    c2c0:	f47f abc3 	bne.w	ba4a <_vfiprintf_r+0x242>
    c2c4:	9e03      	ldr	r6, [sp, #12]
    c2c6:	2700      	movs	r7, #0
    c2c8:	9704      	str	r7, [sp, #16]
    c2ca:	ac44      	add	r4, sp, #272	; 0x110
    c2cc:	f7ff bbc5 	b.w	ba5a <_vfiprintf_r+0x252>
    c2d0:	9b03      	ldr	r3, [sp, #12]
    c2d2:	f013 0310 	ands.w	r3, r3, #16
    c2d6:	d154      	bne.n	c382 <_vfiprintf_r+0xb7a>
    c2d8:	9a03      	ldr	r2, [sp, #12]
    c2da:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    c2de:	f000 816b 	beq.w	c5b8 <_vfiprintf_r+0xdb0>
    c2e2:	9907      	ldr	r1, [sp, #28]
    c2e4:	461a      	mov	r2, r3
    c2e6:	f851 3b04 	ldr.w	r3, [r1], #4
    c2ea:	9107      	str	r1, [sp, #28]
    c2ec:	b29b      	uxth	r3, r3
    c2ee:	2101      	movs	r1, #1
    c2f0:	e401      	b.n	baf6 <_vfiprintf_r+0x2ee>
    c2f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c2f4:	2a00      	cmp	r2, #0
    c2f6:	d164      	bne.n	c3c2 <_vfiprintf_r+0xbba>
    c2f8:	4618      	mov	r0, r3
    c2fa:	2101      	movs	r1, #1
    c2fc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c300:	e4c9      	b.n	bc96 <_vfiprintf_r+0x48e>
    c302:	2101      	movs	r1, #1
    c304:	4618      	mov	r0, r3
    c306:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c30a:	e4c4      	b.n	bc96 <_vfiprintf_r+0x48e>
    c30c:	425b      	negs	r3, r3
    c30e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    c312:	9603      	str	r6, [sp, #12]
    c314:	202d      	movs	r0, #45	; 0x2d
    c316:	2101      	movs	r1, #1
    c318:	f7ff bbee 	b.w	baf8 <_vfiprintf_r+0x2f0>
    c31c:	2b00      	cmp	r3, #0
    c31e:	f000 8088 	beq.w	c432 <_vfiprintf_r+0xc2a>
    c322:	ee18 1a10 	vmov	r1, s16
    c326:	aa18      	add	r2, sp, #96	; 0x60
    c328:	4658      	mov	r0, fp
    c32a:	f7ff fa31 	bl	b790 <__sprint_r.part.0>
    c32e:	2800      	cmp	r0, #0
    c330:	f47f ac41 	bne.w	bbb6 <_vfiprintf_r+0x3ae>
    c334:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c338:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c33c:	1c41      	adds	r1, r0, #1
    c33e:	e477      	b.n	bc30 <_vfiprintf_r+0x428>
    c340:	f898 1000 	ldrb.w	r1, [r8]
    c344:	9307      	str	r3, [sp, #28]
    c346:	f7ff bad2 	b.w	b8ee <_vfiprintf_r+0xe6>
    c34a:	ac44      	add	r4, sp, #272	; 0x110
    c34c:	f7ff bb85 	b.w	ba5a <_vfiprintf_r+0x252>
    c350:	f109 0908 	add.w	r9, r9, #8
    c354:	f10c 0101 	add.w	r1, ip, #1
    c358:	4660      	mov	r0, ip
    c35a:	e4a0      	b.n	bc9e <_vfiprintf_r+0x496>
    c35c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    c360:	f040 8197 	bne.w	c692 <_vfiprintf_r+0xe8a>
    c364:	f851 3b04 	ldr.w	r3, [r1], #4
    c368:	9107      	str	r1, [sp, #28]
    c36a:	f7ff bbc0 	b.w	baee <_vfiprintf_r+0x2e6>
    c36e:	05b3      	lsls	r3, r6, #22
    c370:	f100 8188 	bmi.w	c684 <_vfiprintf_r+0xe7c>
    c374:	f852 3b04 	ldr.w	r3, [r2], #4
    c378:	9207      	str	r2, [sp, #28]
    c37a:	17da      	asrs	r2, r3, #31
    c37c:	4611      	mov	r1, r2
    c37e:	f7ff bb52 	b.w	ba26 <_vfiprintf_r+0x21e>
    c382:	9907      	ldr	r1, [sp, #28]
    c384:	f851 3b04 	ldr.w	r3, [r1], #4
    c388:	9107      	str	r1, [sp, #28]
    c38a:	2101      	movs	r1, #1
    c38c:	f7ff bbb3 	b.w	baf6 <_vfiprintf_r+0x2ee>
    c390:	9b07      	ldr	r3, [sp, #28]
    c392:	9805      	ldr	r0, [sp, #20]
    c394:	f853 1b04 	ldr.w	r1, [r3], #4
    c398:	9307      	str	r3, [sp, #28]
    c39a:	17c2      	asrs	r2, r0, #31
    c39c:	e9c1 0200 	strd	r0, r2, [r1]
    c3a0:	f7ff ba7d 	b.w	b89e <_vfiprintf_r+0x96>
    c3a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c3a6:	2b00      	cmp	r3, #0
    c3a8:	f43f ab26 	beq.w	b9f8 <_vfiprintf_r+0x1f0>
    c3ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c3ae:	781b      	ldrb	r3, [r3, #0]
    c3b0:	2b00      	cmp	r3, #0
    c3b2:	f43f ab21 	beq.w	b9f8 <_vfiprintf_r+0x1f0>
    c3b6:	f898 1000 	ldrb.w	r1, [r8]
    c3ba:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    c3be:	f7ff ba96 	b.w	b8ee <_vfiprintf_r+0xe6>
    c3c2:	2302      	movs	r3, #2
    c3c4:	aa11      	add	r2, sp, #68	; 0x44
    c3c6:	931c      	str	r3, [sp, #112]	; 0x70
    c3c8:	921b      	str	r2, [sp, #108]	; 0x6c
    c3ca:	2001      	movs	r0, #1
    c3cc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c3d0:	e6a2      	b.n	c118 <_vfiprintf_r+0x910>
    c3d2:	9603      	str	r6, [sp, #12]
    c3d4:	e571      	b.n	beba <_vfiprintf_r+0x6b2>
    c3d6:	4b3b      	ldr	r3, [pc, #236]	; (c4c4 <_vfiprintf_r+0xcbc>)
    c3d8:	930c      	str	r3, [sp, #48]	; 0x30
    c3da:	f016 0220 	ands.w	r2, r6, #32
    c3de:	d059      	beq.n	c494 <_vfiprintf_r+0xc8c>
    c3e0:	9b07      	ldr	r3, [sp, #28]
    c3e2:	3307      	adds	r3, #7
    c3e4:	f023 0307 	bic.w	r3, r3, #7
    c3e8:	4618      	mov	r0, r3
    c3ea:	685a      	ldr	r2, [r3, #4]
    c3ec:	f850 3b08 	ldr.w	r3, [r0], #8
    c3f0:	9007      	str	r0, [sp, #28]
    c3f2:	07f4      	lsls	r4, r6, #31
    c3f4:	d509      	bpl.n	c40a <_vfiprintf_r+0xc02>
    c3f6:	ea53 0002 	orrs.w	r0, r3, r2
    c3fa:	d006      	beq.n	c40a <_vfiprintf_r+0xc02>
    c3fc:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    c400:	2130      	movs	r1, #48	; 0x30
    c402:	f046 0602 	orr.w	r6, r6, #2
    c406:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    c40a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    c40e:	9103      	str	r1, [sp, #12]
    c410:	2102      	movs	r1, #2
    c412:	f7ff bb70 	b.w	baf6 <_vfiprintf_r+0x2ee>
    c416:	4b2c      	ldr	r3, [pc, #176]	; (c4c8 <_vfiprintf_r+0xcc0>)
    c418:	930c      	str	r3, [sp, #48]	; 0x30
    c41a:	e7de      	b.n	c3da <_vfiprintf_r+0xbd2>
    c41c:	9b07      	ldr	r3, [sp, #28]
    c41e:	2101      	movs	r1, #1
    c420:	f853 2b04 	ldr.w	r2, [r3], #4
    c424:	9103      	str	r1, [sp, #12]
    c426:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    c42a:	9307      	str	r3, [sp, #28]
    c42c:	9104      	str	r1, [sp, #16]
    c42e:	ac2b      	add	r4, sp, #172	; 0xac
    c430:	e4df      	b.n	bdf2 <_vfiprintf_r+0x5ea>
    c432:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    c436:	2a00      	cmp	r2, #0
    c438:	f040 8132 	bne.w	c6a0 <_vfiprintf_r+0xe98>
    c43c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c43e:	2a00      	cmp	r2, #0
    c440:	f47f ae62 	bne.w	c108 <_vfiprintf_r+0x900>
    c444:	4618      	mov	r0, r3
    c446:	2101      	movs	r1, #1
    c448:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c44c:	e427      	b.n	bc9e <_vfiprintf_r+0x496>
    c44e:	2100      	movs	r1, #0
    c450:	2208      	movs	r2, #8
    c452:	a816      	add	r0, sp, #88	; 0x58
    c454:	9413      	str	r4, [sp, #76]	; 0x4c
    c456:	f7fb f971 	bl	773c <memset>
    c45a:	1c79      	adds	r1, r7, #1
    c45c:	f000 80bc 	beq.w	c5d8 <_vfiprintf_r+0xdd0>
    c460:	2500      	movs	r5, #0
    c462:	9407      	str	r4, [sp, #28]
    c464:	462c      	mov	r4, r5
    c466:	e00c      	b.n	c482 <_vfiprintf_r+0xc7a>
    c468:	a92b      	add	r1, sp, #172	; 0xac
    c46a:	4658      	mov	r0, fp
    c46c:	f7ff f8ca 	bl	b604 <_wcrtomb_r>
    c470:	1c42      	adds	r2, r0, #1
    c472:	4420      	add	r0, r4
    c474:	f000 816b 	beq.w	c74e <_vfiprintf_r+0xf46>
    c478:	42b8      	cmp	r0, r7
    c47a:	dc08      	bgt.n	c48e <_vfiprintf_r+0xc86>
    c47c:	f000 8170 	beq.w	c760 <_vfiprintf_r+0xf58>
    c480:	4604      	mov	r4, r0
    c482:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c484:	5952      	ldr	r2, [r2, r5]
    c486:	ab16      	add	r3, sp, #88	; 0x58
    c488:	3504      	adds	r5, #4
    c48a:	2a00      	cmp	r2, #0
    c48c:	d1ec      	bne.n	c468 <_vfiprintf_r+0xc60>
    c48e:	9404      	str	r4, [sp, #16]
    c490:	9c07      	ldr	r4, [sp, #28]
    c492:	e0af      	b.n	c5f4 <_vfiprintf_r+0xdec>
    c494:	f016 0310 	ands.w	r3, r6, #16
    c498:	9807      	ldr	r0, [sp, #28]
    c49a:	d10c      	bne.n	c4b6 <_vfiprintf_r+0xcae>
    c49c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    c4a0:	d005      	beq.n	c4ae <_vfiprintf_r+0xca6>
    c4a2:	461a      	mov	r2, r3
    c4a4:	f850 3b04 	ldr.w	r3, [r0], #4
    c4a8:	9007      	str	r0, [sp, #28]
    c4aa:	b29b      	uxth	r3, r3
    c4ac:	e7a1      	b.n	c3f2 <_vfiprintf_r+0xbea>
    c4ae:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    c4b2:	f040 80e1 	bne.w	c678 <_vfiprintf_r+0xe70>
    c4b6:	f850 3b04 	ldr.w	r3, [r0], #4
    c4ba:	9007      	str	r0, [sp, #28]
    c4bc:	e799      	b.n	c3f2 <_vfiprintf_r+0xbea>
    c4be:	bf00      	nop
    c4c0:	0000db0c 	.word	0x0000db0c
    c4c4:	0000da0c 	.word	0x0000da0c
    c4c8:	0000da20 	.word	0x0000da20
    c4cc:	9903      	ldr	r1, [sp, #12]
    c4ce:	9704      	str	r7, [sp, #16]
    c4d0:	ac44      	add	r4, sp, #272	; 0x110
    c4d2:	469e      	mov	lr, r3
    c4d4:	ee08 ba90 	vmov	s17, fp
    c4d8:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    c4dc:	f04f 0c00 	mov.w	ip, #0
    c4e0:	4623      	mov	r3, r4
    c4e2:	e006      	b.n	c4f2 <_vfiprintf_r+0xcea>
    c4e4:	f1be 0f0a 	cmp.w	lr, #10
    c4e8:	f172 0200 	sbcs.w	r2, r2, #0
    c4ec:	d339      	bcc.n	c562 <_vfiprintf_r+0xd5a>
    c4ee:	46a6      	mov	lr, r4
    c4f0:	462a      	mov	r2, r5
    c4f2:	49a6      	ldr	r1, [pc, #664]	; (c78c <_vfiprintf_r+0xf84>)
    c4f4:	eb1e 0002 	adds.w	r0, lr, r2
    c4f8:	f140 0000 	adc.w	r0, r0, #0
    c4fc:	460f      	mov	r7, r1
    c4fe:	fba1 1400 	umull	r1, r4, r1, r0
    c502:	f024 0103 	bic.w	r1, r4, #3
    c506:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    c50a:	1a40      	subs	r0, r0, r1
    c50c:	ebbe 0100 	subs.w	r1, lr, r0
    c510:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    c514:	f162 0400 	sbc.w	r4, r2, #0
    c518:	fb05 f501 	mul.w	r5, r5, r1
    c51c:	fb07 5504 	mla	r5, r7, r4, r5
    c520:	fba1 4107 	umull	r4, r1, r1, r7
    c524:	440d      	add	r5, r1
    c526:	2705      	movs	r7, #5
    c528:	f004 0101 	and.w	r1, r4, #1
    c52c:	fba1 1b07 	umull	r1, fp, r1, r7
    c530:	1809      	adds	r1, r1, r0
    c532:	0864      	lsrs	r4, r4, #1
    c534:	3130      	adds	r1, #48	; 0x30
    c536:	f803 1c01 	strb.w	r1, [r3, #-1]
    c53a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    c53e:	f10c 0c01 	add.w	ip, ip, #1
    c542:	3b01      	subs	r3, #1
    c544:	086d      	lsrs	r5, r5, #1
    c546:	2e00      	cmp	r6, #0
    c548:	d0cc      	beq.n	c4e4 <_vfiprintf_r+0xcdc>
    c54a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c54c:	7809      	ldrb	r1, [r1, #0]
    c54e:	4561      	cmp	r1, ip
    c550:	d1c8      	bne.n	c4e4 <_vfiprintf_r+0xcdc>
    c552:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    c556:	d0c5      	beq.n	c4e4 <_vfiprintf_r+0xcdc>
    c558:	f1be 0f0a 	cmp.w	lr, #10
    c55c:	f172 0200 	sbcs.w	r2, r2, #0
    c560:	d26c      	bcs.n	c63c <_vfiprintf_r+0xe34>
    c562:	461c      	mov	r4, r3
    c564:	ab44      	add	r3, sp, #272	; 0x110
    c566:	1b1b      	subs	r3, r3, r4
    c568:	9f04      	ldr	r7, [sp, #16]
    c56a:	9e03      	ldr	r6, [sp, #12]
    c56c:	9304      	str	r3, [sp, #16]
    c56e:	ee18 ba90 	vmov	fp, s17
    c572:	f7ff ba72 	b.w	ba5a <_vfiprintf_r+0x252>
    c576:	9603      	str	r6, [sp, #12]
    c578:	f7ff ba62 	b.w	ba40 <_vfiprintf_r+0x238>
    c57c:	4658      	mov	r0, fp
    c57e:	f7fa ff67 	bl	7450 <__sinit>
    c582:	f7ff b95b 	b.w	b83c <_vfiprintf_r+0x34>
    c586:	2901      	cmp	r1, #1
    c588:	9603      	str	r6, [sp, #12]
    c58a:	f47f accd 	bne.w	bf28 <_vfiprintf_r+0x720>
    c58e:	f7ff ba5c 	b.w	ba4a <_vfiprintf_r+0x242>
    c592:	9b07      	ldr	r3, [sp, #28]
    c594:	9905      	ldr	r1, [sp, #20]
    c596:	f853 2b04 	ldr.w	r2, [r3], #4
    c59a:	6011      	str	r1, [r2, #0]
    c59c:	9307      	str	r3, [sp, #28]
    c59e:	f7ff b97e 	b.w	b89e <_vfiprintf_r+0x96>
    c5a2:	2f06      	cmp	r7, #6
    c5a4:	463b      	mov	r3, r7
    c5a6:	9a03      	ldr	r2, [sp, #12]
    c5a8:	4c79      	ldr	r4, [pc, #484]	; (c790 <_vfiprintf_r+0xf88>)
    c5aa:	9207      	str	r2, [sp, #28]
    c5ac:	bf28      	it	cs
    c5ae:	2306      	movcs	r3, #6
    c5b0:	9304      	str	r3, [sp, #16]
    c5b2:	9303      	str	r3, [sp, #12]
    c5b4:	f7ff bb25 	b.w	bc02 <_vfiprintf_r+0x3fa>
    c5b8:	9b03      	ldr	r3, [sp, #12]
    c5ba:	9907      	ldr	r1, [sp, #28]
    c5bc:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    c5c0:	bf14      	ite	ne
    c5c2:	f851 3b04 	ldrne.w	r3, [r1], #4
    c5c6:	f851 3b04 	ldreq.w	r3, [r1], #4
    c5ca:	9107      	str	r1, [sp, #28]
    c5cc:	bf1c      	itt	ne
    c5ce:	4602      	movne	r2, r0
    c5d0:	b2db      	uxtbne	r3, r3
    c5d2:	2101      	movs	r1, #1
    c5d4:	f7ff ba8f 	b.w	baf6 <_vfiprintf_r+0x2ee>
    c5d8:	ab16      	add	r3, sp, #88	; 0x58
    c5da:	9300      	str	r3, [sp, #0]
    c5dc:	2300      	movs	r3, #0
    c5de:	4619      	mov	r1, r3
    c5e0:	aa13      	add	r2, sp, #76	; 0x4c
    c5e2:	4658      	mov	r0, fp
    c5e4:	f7ff f834 	bl	b650 <_wcsrtombs_r>
    c5e8:	4603      	mov	r3, r0
    c5ea:	3301      	adds	r3, #1
    c5ec:	9004      	str	r0, [sp, #16]
    c5ee:	f000 80ae 	beq.w	c74e <_vfiprintf_r+0xf46>
    c5f2:	9413      	str	r4, [sp, #76]	; 0x4c
    c5f4:	9b04      	ldr	r3, [sp, #16]
    c5f6:	2b00      	cmp	r3, #0
    c5f8:	d030      	beq.n	c65c <_vfiprintf_r+0xe54>
    c5fa:	2b63      	cmp	r3, #99	; 0x63
    c5fc:	dc63      	bgt.n	c6c6 <_vfiprintf_r+0xebe>
    c5fe:	2300      	movs	r3, #0
    c600:	9308      	str	r3, [sp, #32]
    c602:	ac2b      	add	r4, sp, #172	; 0xac
    c604:	2208      	movs	r2, #8
    c606:	2100      	movs	r1, #0
    c608:	a816      	add	r0, sp, #88	; 0x58
    c60a:	f7fb f897 	bl	773c <memset>
    c60e:	9d04      	ldr	r5, [sp, #16]
    c610:	ab16      	add	r3, sp, #88	; 0x58
    c612:	9300      	str	r3, [sp, #0]
    c614:	aa13      	add	r2, sp, #76	; 0x4c
    c616:	462b      	mov	r3, r5
    c618:	4621      	mov	r1, r4
    c61a:	4658      	mov	r0, fp
    c61c:	f7ff f818 	bl	b650 <_wcsrtombs_r>
    c620:	4285      	cmp	r5, r0
    c622:	f040 80ab 	bne.w	c77c <_vfiprintf_r+0xf74>
    c626:	9b03      	ldr	r3, [sp, #12]
    c628:	9a04      	ldr	r2, [sp, #16]
    c62a:	9307      	str	r3, [sp, #28]
    c62c:	2300      	movs	r3, #0
    c62e:	54a3      	strb	r3, [r4, r2]
    c630:	461f      	mov	r7, r3
    c632:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    c636:	9303      	str	r3, [sp, #12]
    c638:	f7ff ba16 	b.w	ba68 <_vfiprintf_r+0x260>
    c63c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c63e:	990d      	ldr	r1, [sp, #52]	; 0x34
    c640:	1a9b      	subs	r3, r3, r2
    c642:	4618      	mov	r0, r3
    c644:	9308      	str	r3, [sp, #32]
    c646:	f7fb f8cb 	bl	77e0 <strncpy>
    c64a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c64c:	9b08      	ldr	r3, [sp, #32]
    c64e:	784a      	ldrb	r2, [r1, #1]
    c650:	b10a      	cbz	r2, c656 <_vfiprintf_r+0xe4e>
    c652:	3101      	adds	r1, #1
    c654:	910b      	str	r1, [sp, #44]	; 0x2c
    c656:	f04f 0c00 	mov.w	ip, #0
    c65a:	e748      	b.n	c4ee <_vfiprintf_r+0xce6>
    c65c:	9b03      	ldr	r3, [sp, #12]
    c65e:	9307      	str	r3, [sp, #28]
    c660:	9b04      	ldr	r3, [sp, #16]
    c662:	9303      	str	r3, [sp, #12]
    c664:	461f      	mov	r7, r3
    c666:	9308      	str	r3, [sp, #32]
    c668:	f7ff b9fe 	b.w	ba68 <_vfiprintf_r+0x260>
    c66c:	2101      	movs	r1, #1
    c66e:	4618      	mov	r0, r3
    c670:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c674:	f7ff bb13 	b.w	bc9e <_vfiprintf_r+0x496>
    c678:	f850 3b04 	ldr.w	r3, [r0], #4
    c67c:	9007      	str	r0, [sp, #28]
    c67e:	4622      	mov	r2, r4
    c680:	b2db      	uxtb	r3, r3
    c682:	e6b6      	b.n	c3f2 <_vfiprintf_r+0xbea>
    c684:	f912 3b04 	ldrsb.w	r3, [r2], #4
    c688:	9207      	str	r2, [sp, #28]
    c68a:	17da      	asrs	r2, r3, #31
    c68c:	4611      	mov	r1, r2
    c68e:	f7ff b9ca 	b.w	ba26 <_vfiprintf_r+0x21e>
    c692:	f851 3b04 	ldr.w	r3, [r1], #4
    c696:	9107      	str	r1, [sp, #28]
    c698:	4602      	mov	r2, r0
    c69a:	b2db      	uxtb	r3, r3
    c69c:	f7ff ba27 	b.w	baee <_vfiprintf_r+0x2e6>
    c6a0:	2301      	movs	r3, #1
    c6a2:	931c      	str	r3, [sp, #112]	; 0x70
    c6a4:	2101      	movs	r1, #1
    c6a6:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    c6aa:	931b      	str	r3, [sp, #108]	; 0x6c
    c6ac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c6b0:	460b      	mov	r3, r1
    c6b2:	f7ff bacd 	b.w	bc50 <_vfiprintf_r+0x448>
    c6b6:	9b07      	ldr	r3, [sp, #28]
    c6b8:	9905      	ldr	r1, [sp, #20]
    c6ba:	f853 2b04 	ldr.w	r2, [r3], #4
    c6be:	9307      	str	r3, [sp, #28]
    c6c0:	8011      	strh	r1, [r2, #0]
    c6c2:	f7ff b8ec 	b.w	b89e <_vfiprintf_r+0x96>
    c6c6:	1c59      	adds	r1, r3, #1
    c6c8:	4658      	mov	r0, fp
    c6ca:	f7fa f983 	bl	69d4 <_malloc_r>
    c6ce:	4604      	mov	r4, r0
    c6d0:	2800      	cmp	r0, #0
    c6d2:	d03c      	beq.n	c74e <_vfiprintf_r+0xf46>
    c6d4:	9008      	str	r0, [sp, #32]
    c6d6:	e795      	b.n	c604 <_vfiprintf_r+0xdfc>
    c6d8:	6d88      	ldr	r0, [r1, #88]	; 0x58
    c6da:	f7fb f94f 	bl	797c <__retarget_lock_release_recursive>
    c6de:	f7ff b9e9 	b.w	bab4 <_vfiprintf_r+0x2ac>
    c6e2:	9b03      	ldr	r3, [sp, #12]
    c6e4:	9307      	str	r3, [sp, #28]
    c6e6:	e9cd 7703 	strd	r7, r7, [sp, #12]
    c6ea:	9f08      	ldr	r7, [sp, #32]
    c6ec:	f7ff b9bc 	b.w	ba68 <_vfiprintf_r+0x260>
    c6f0:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c6f4:	3001      	adds	r0, #1
    c6f6:	e545      	b.n	c184 <_vfiprintf_r+0x97c>
    c6f8:	9b03      	ldr	r3, [sp, #12]
    c6fa:	9307      	str	r3, [sp, #28]
    c6fc:	4620      	mov	r0, r4
    c6fe:	f7fb f93f 	bl	7980 <strlen>
    c702:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    c706:	462f      	mov	r7, r5
    c708:	9004      	str	r0, [sp, #16]
    c70a:	9303      	str	r3, [sp, #12]
    c70c:	9508      	str	r5, [sp, #32]
    c70e:	f7ff b9ab 	b.w	ba68 <_vfiprintf_r+0x260>
    c712:	ee18 1a10 	vmov	r1, s16
    c716:	aa18      	add	r2, sp, #96	; 0x60
    c718:	4658      	mov	r0, fp
    c71a:	f7ff f839 	bl	b790 <__sprint_r.part.0>
    c71e:	2800      	cmp	r0, #0
    c720:	f43f aa36 	beq.w	bb90 <_vfiprintf_r+0x388>
    c724:	f7ff ba4d 	b.w	bbc2 <_vfiprintf_r+0x3ba>
    c728:	9819      	ldr	r0, [sp, #100]	; 0x64
    c72a:	3001      	adds	r0, #1
    c72c:	e57a      	b.n	c224 <_vfiprintf_r+0xa1c>
    c72e:	468c      	mov	ip, r1
    c730:	e46e      	b.n	c010 <_vfiprintf_r+0x808>
    c732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    c734:	07d9      	lsls	r1, r3, #31
    c736:	d405      	bmi.n	c744 <_vfiprintf_r+0xf3c>
    c738:	89ab      	ldrh	r3, [r5, #12]
    c73a:	059a      	lsls	r2, r3, #22
    c73c:	d402      	bmi.n	c744 <_vfiprintf_r+0xf3c>
    c73e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    c740:	f7fb f91c 	bl	797c <__retarget_lock_release_recursive>
    c744:	f04f 33ff 	mov.w	r3, #4294967295
    c748:	9305      	str	r3, [sp, #20]
    c74a:	f7ff ba49 	b.w	bbe0 <_vfiprintf_r+0x3d8>
    c74e:	ee18 2a10 	vmov	r2, s16
    c752:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    c756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c75a:	8193      	strh	r3, [r2, #12]
    c75c:	f7ff ba35 	b.w	bbca <_vfiprintf_r+0x3c2>
    c760:	9c07      	ldr	r4, [sp, #28]
    c762:	9704      	str	r7, [sp, #16]
    c764:	e746      	b.n	c5f4 <_vfiprintf_r+0xdec>
    c766:	9b07      	ldr	r3, [sp, #28]
    c768:	f898 1001 	ldrb.w	r1, [r8, #1]
    c76c:	f853 7b04 	ldr.w	r7, [r3], #4
    c770:	9307      	str	r3, [sp, #28]
    c772:	4690      	mov	r8, r2
    c774:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    c778:	f7ff b8b9 	b.w	b8ee <_vfiprintf_r+0xe6>
    c77c:	ee18 2a10 	vmov	r2, s16
    c780:	8993      	ldrh	r3, [r2, #12]
    c782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c786:	8193      	strh	r3, [r2, #12]
    c788:	f7ff ba15 	b.w	bbb6 <_vfiprintf_r+0x3ae>
    c78c:	cccccccd 	.word	0xcccccccd
    c790:	0000da34 	.word	0x0000da34

0000c794 <__sbprintf>:
    c794:	b570      	push	{r4, r5, r6, lr}
    c796:	460c      	mov	r4, r1
    c798:	8989      	ldrh	r1, [r1, #12]
    c79a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    c79e:	f021 0102 	bic.w	r1, r1, #2
    c7a2:	f8ad 1014 	strh.w	r1, [sp, #20]
    c7a6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    c7a8:	911b      	str	r1, [sp, #108]	; 0x6c
    c7aa:	89e1      	ldrh	r1, [r4, #14]
    c7ac:	f8ad 1016 	strh.w	r1, [sp, #22]
    c7b0:	69e1      	ldr	r1, [r4, #28]
    c7b2:	9109      	str	r1, [sp, #36]	; 0x24
    c7b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c7b6:	910b      	str	r1, [sp, #44]	; 0x2c
    c7b8:	a91c      	add	r1, sp, #112	; 0x70
    c7ba:	9102      	str	r1, [sp, #8]
    c7bc:	9106      	str	r1, [sp, #24]
    c7be:	f44f 6180 	mov.w	r1, #1024	; 0x400
    c7c2:	4606      	mov	r6, r0
    c7c4:	9104      	str	r1, [sp, #16]
    c7c6:	9107      	str	r1, [sp, #28]
    c7c8:	a818      	add	r0, sp, #96	; 0x60
    c7ca:	2100      	movs	r1, #0
    c7cc:	e9cd 3200 	strd	r3, r2, [sp]
    c7d0:	9108      	str	r1, [sp, #32]
    c7d2:	f7fb f8cd 	bl	7970 <__retarget_lock_init_recursive>
    c7d6:	e9dd 3200 	ldrd	r3, r2, [sp]
    c7da:	a902      	add	r1, sp, #8
    c7dc:	4630      	mov	r0, r6
    c7de:	f7ff f813 	bl	b808 <_vfiprintf_r>
    c7e2:	1e05      	subs	r5, r0, #0
    c7e4:	db07      	blt.n	c7f6 <__sbprintf+0x62>
    c7e6:	a902      	add	r1, sp, #8
    c7e8:	4630      	mov	r0, r6
    c7ea:	f7fd fd69 	bl	a2c0 <_fflush_r>
    c7ee:	2800      	cmp	r0, #0
    c7f0:	bf18      	it	ne
    c7f2:	f04f 35ff 	movne.w	r5, #4294967295
    c7f6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    c7fa:	065b      	lsls	r3, r3, #25
    c7fc:	d503      	bpl.n	c806 <__sbprintf+0x72>
    c7fe:	89a3      	ldrh	r3, [r4, #12]
    c800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c804:	81a3      	strh	r3, [r4, #12]
    c806:	9818      	ldr	r0, [sp, #96]	; 0x60
    c808:	f7fb f8b4 	bl	7974 <__retarget_lock_close_recursive>
    c80c:	4628      	mov	r0, r5
    c80e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    c812:	bd70      	pop	{r4, r5, r6, pc}

0000c814 <__sfvwrite_r>:
    c814:	6893      	ldr	r3, [r2, #8]
    c816:	2b00      	cmp	r3, #0
    c818:	f000 8085 	beq.w	c926 <__sfvwrite_r+0x112>
    c81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c820:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    c824:	460c      	mov	r4, r1
    c826:	0719      	lsls	r1, r3, #28
    c828:	4680      	mov	r8, r0
    c82a:	b083      	sub	sp, #12
    c82c:	4617      	mov	r7, r2
    c82e:	b298      	uxth	r0, r3
    c830:	d525      	bpl.n	c87e <__sfvwrite_r+0x6a>
    c832:	6923      	ldr	r3, [r4, #16]
    c834:	b31b      	cbz	r3, c87e <__sfvwrite_r+0x6a>
    c836:	f010 0302 	ands.w	r3, r0, #2
    c83a:	683d      	ldr	r5, [r7, #0]
    c83c:	d02d      	beq.n	c89a <__sfvwrite_r+0x86>
    c83e:	f04f 0a00 	mov.w	sl, #0
    c842:	f8df b2c0 	ldr.w	fp, [pc, #704]	; cb04 <__sfvwrite_r+0x2f0>
    c846:	4656      	mov	r6, sl
    c848:	46b9      	mov	r9, r7
    c84a:	455e      	cmp	r6, fp
    c84c:	4633      	mov	r3, r6
    c84e:	4652      	mov	r2, sl
    c850:	bf28      	it	cs
    c852:	465b      	movcs	r3, fp
    c854:	4640      	mov	r0, r8
    c856:	2e00      	cmp	r6, #0
    c858:	d052      	beq.n	c900 <__sfvwrite_r+0xec>
    c85a:	69e1      	ldr	r1, [r4, #28]
    c85c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    c85e:	47b8      	blx	r7
    c860:	2800      	cmp	r0, #0
    c862:	dd56      	ble.n	c912 <__sfvwrite_r+0xfe>
    c864:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c868:	1a1b      	subs	r3, r3, r0
    c86a:	4482      	add	sl, r0
    c86c:	1a36      	subs	r6, r6, r0
    c86e:	f8c9 3008 	str.w	r3, [r9, #8]
    c872:	2b00      	cmp	r3, #0
    c874:	d1e9      	bne.n	c84a <__sfvwrite_r+0x36>
    c876:	2000      	movs	r0, #0
    c878:	b003      	add	sp, #12
    c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c87e:	4621      	mov	r1, r4
    c880:	4640      	mov	r0, r8
    c882:	f000 f941 	bl	cb08 <__swsetup_r>
    c886:	2800      	cmp	r0, #0
    c888:	f040 8138 	bne.w	cafc <__sfvwrite_r+0x2e8>
    c88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c890:	683d      	ldr	r5, [r7, #0]
    c892:	b298      	uxth	r0, r3
    c894:	f010 0302 	ands.w	r3, r0, #2
    c898:	d1d1      	bne.n	c83e <__sfvwrite_r+0x2a>
    c89a:	f010 0901 	ands.w	r9, r0, #1
    c89e:	d144      	bne.n	c92a <__sfvwrite_r+0x116>
    c8a0:	464e      	mov	r6, r9
    c8a2:	9700      	str	r7, [sp, #0]
    c8a4:	b346      	cbz	r6, c8f8 <__sfvwrite_r+0xe4>
    c8a6:	0582      	lsls	r2, r0, #22
    c8a8:	f8d4 b008 	ldr.w	fp, [r4, #8]
    c8ac:	f140 8085 	bpl.w	c9ba <__sfvwrite_r+0x1a6>
    c8b0:	45b3      	cmp	fp, r6
    c8b2:	465a      	mov	r2, fp
    c8b4:	f200 80b4 	bhi.w	ca20 <__sfvwrite_r+0x20c>
    c8b8:	f410 6f90 	tst.w	r0, #1152	; 0x480
    c8bc:	f040 80c1 	bne.w	ca42 <__sfvwrite_r+0x22e>
    c8c0:	6820      	ldr	r0, [r4, #0]
    c8c2:	9201      	str	r2, [sp, #4]
    c8c4:	4649      	mov	r1, r9
    c8c6:	f7fa febd 	bl	7644 <memmove>
    c8ca:	68a3      	ldr	r3, [r4, #8]
    c8cc:	9a01      	ldr	r2, [sp, #4]
    c8ce:	eba3 010b 	sub.w	r1, r3, fp
    c8d2:	6823      	ldr	r3, [r4, #0]
    c8d4:	60a1      	str	r1, [r4, #8]
    c8d6:	4413      	add	r3, r2
    c8d8:	46b2      	mov	sl, r6
    c8da:	6023      	str	r3, [r4, #0]
    c8dc:	2600      	movs	r6, #0
    c8de:	9a00      	ldr	r2, [sp, #0]
    c8e0:	6893      	ldr	r3, [r2, #8]
    c8e2:	eba3 030a 	sub.w	r3, r3, sl
    c8e6:	44d1      	add	r9, sl
    c8e8:	6093      	str	r3, [r2, #8]
    c8ea:	2b00      	cmp	r3, #0
    c8ec:	d0c3      	beq.n	c876 <__sfvwrite_r+0x62>
    c8ee:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    c8f2:	b280      	uxth	r0, r0
    c8f4:	2e00      	cmp	r6, #0
    c8f6:	d1d6      	bne.n	c8a6 <__sfvwrite_r+0x92>
    c8f8:	e9d5 9600 	ldrd	r9, r6, [r5]
    c8fc:	3508      	adds	r5, #8
    c8fe:	e7d1      	b.n	c8a4 <__sfvwrite_r+0x90>
    c900:	e9d5 a600 	ldrd	sl, r6, [r5]
    c904:	3508      	adds	r5, #8
    c906:	e7a0      	b.n	c84a <__sfvwrite_r+0x36>
    c908:	4621      	mov	r1, r4
    c90a:	4640      	mov	r0, r8
    c90c:	f7fd fcd8 	bl	a2c0 <_fflush_r>
    c910:	b388      	cbz	r0, c976 <__sfvwrite_r+0x162>
    c912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c91a:	f04f 30ff 	mov.w	r0, #4294967295
    c91e:	81a3      	strh	r3, [r4, #12]
    c920:	b003      	add	sp, #12
    c922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c926:	2000      	movs	r0, #0
    c928:	4770      	bx	lr
    c92a:	461e      	mov	r6, r3
    c92c:	46ba      	mov	sl, r7
    c92e:	4699      	mov	r9, r3
    c930:	4618      	mov	r0, r3
    c932:	9500      	str	r5, [sp, #0]
    c934:	461f      	mov	r7, r3
    c936:	b366      	cbz	r6, c992 <__sfvwrite_r+0x17e>
    c938:	2800      	cmp	r0, #0
    c93a:	d032      	beq.n	c9a2 <__sfvwrite_r+0x18e>
    c93c:	464a      	mov	r2, r9
    c93e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    c942:	6820      	ldr	r0, [r4, #0]
    c944:	68a5      	ldr	r5, [r4, #8]
    c946:	42b2      	cmp	r2, r6
    c948:	bf28      	it	cs
    c94a:	4632      	movcs	r2, r6
    c94c:	4288      	cmp	r0, r1
    c94e:	d904      	bls.n	c95a <__sfvwrite_r+0x146>
    c950:	eb05 0b03 	add.w	fp, r5, r3
    c954:	455a      	cmp	r2, fp
    c956:	f300 80a7 	bgt.w	caa8 <__sfvwrite_r+0x294>
    c95a:	4293      	cmp	r3, r2
    c95c:	dc64      	bgt.n	ca28 <__sfvwrite_r+0x214>
    c95e:	69e1      	ldr	r1, [r4, #28]
    c960:	6a65      	ldr	r5, [r4, #36]	; 0x24
    c962:	463a      	mov	r2, r7
    c964:	4640      	mov	r0, r8
    c966:	47a8      	blx	r5
    c968:	f1b0 0b00 	subs.w	fp, r0, #0
    c96c:	ddd1      	ble.n	c912 <__sfvwrite_r+0xfe>
    c96e:	ebb9 090b 	subs.w	r9, r9, fp
    c972:	d0c9      	beq.n	c908 <__sfvwrite_r+0xf4>
    c974:	2001      	movs	r0, #1
    c976:	f8da 3008 	ldr.w	r3, [sl, #8]
    c97a:	eba3 030b 	sub.w	r3, r3, fp
    c97e:	445f      	add	r7, fp
    c980:	eba6 060b 	sub.w	r6, r6, fp
    c984:	f8ca 3008 	str.w	r3, [sl, #8]
    c988:	2b00      	cmp	r3, #0
    c98a:	f43f af74 	beq.w	c876 <__sfvwrite_r+0x62>
    c98e:	2e00      	cmp	r6, #0
    c990:	d1d2      	bne.n	c938 <__sfvwrite_r+0x124>
    c992:	9a00      	ldr	r2, [sp, #0]
    c994:	6856      	ldr	r6, [r2, #4]
    c996:	4613      	mov	r3, r2
    c998:	3208      	adds	r2, #8
    c99a:	9200      	str	r2, [sp, #0]
    c99c:	2e00      	cmp	r6, #0
    c99e:	d0f8      	beq.n	c992 <__sfvwrite_r+0x17e>
    c9a0:	681f      	ldr	r7, [r3, #0]
    c9a2:	4632      	mov	r2, r6
    c9a4:	210a      	movs	r1, #10
    c9a6:	4638      	mov	r0, r7
    c9a8:	f7fd fcd2 	bl	a350 <memchr>
    c9ac:	2800      	cmp	r0, #0
    c9ae:	f000 809c 	beq.w	caea <__sfvwrite_r+0x2d6>
    c9b2:	3001      	adds	r0, #1
    c9b4:	eba0 0907 	sub.w	r9, r0, r7
    c9b8:	e7c0      	b.n	c93c <__sfvwrite_r+0x128>
    c9ba:	6820      	ldr	r0, [r4, #0]
    c9bc:	6923      	ldr	r3, [r4, #16]
    c9be:	4298      	cmp	r0, r3
    c9c0:	d816      	bhi.n	c9f0 <__sfvwrite_r+0x1dc>
    c9c2:	6962      	ldr	r2, [r4, #20]
    c9c4:	42b2      	cmp	r2, r6
    c9c6:	d813      	bhi.n	c9f0 <__sfvwrite_r+0x1dc>
    c9c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    c9cc:	42b3      	cmp	r3, r6
    c9ce:	bf28      	it	cs
    c9d0:	4633      	movcs	r3, r6
    c9d2:	69e1      	ldr	r1, [r4, #28]
    c9d4:	fb93 f3f2 	sdiv	r3, r3, r2
    c9d8:	6a67      	ldr	r7, [r4, #36]	; 0x24
    c9da:	fb02 f303 	mul.w	r3, r2, r3
    c9de:	4640      	mov	r0, r8
    c9e0:	464a      	mov	r2, r9
    c9e2:	47b8      	blx	r7
    c9e4:	f1b0 0a00 	subs.w	sl, r0, #0
    c9e8:	dd93      	ble.n	c912 <__sfvwrite_r+0xfe>
    c9ea:	eba6 060a 	sub.w	r6, r6, sl
    c9ee:	e776      	b.n	c8de <__sfvwrite_r+0xca>
    c9f0:	45b3      	cmp	fp, r6
    c9f2:	46da      	mov	sl, fp
    c9f4:	bf28      	it	cs
    c9f6:	46b2      	movcs	sl, r6
    c9f8:	4652      	mov	r2, sl
    c9fa:	4649      	mov	r1, r9
    c9fc:	f7fa fe22 	bl	7644 <memmove>
    ca00:	68a3      	ldr	r3, [r4, #8]
    ca02:	6822      	ldr	r2, [r4, #0]
    ca04:	eba3 030a 	sub.w	r3, r3, sl
    ca08:	4452      	add	r2, sl
    ca0a:	60a3      	str	r3, [r4, #8]
    ca0c:	6022      	str	r2, [r4, #0]
    ca0e:	2b00      	cmp	r3, #0
    ca10:	d1eb      	bne.n	c9ea <__sfvwrite_r+0x1d6>
    ca12:	4621      	mov	r1, r4
    ca14:	4640      	mov	r0, r8
    ca16:	f7fd fc53 	bl	a2c0 <_fflush_r>
    ca1a:	2800      	cmp	r0, #0
    ca1c:	d0e5      	beq.n	c9ea <__sfvwrite_r+0x1d6>
    ca1e:	e778      	b.n	c912 <__sfvwrite_r+0xfe>
    ca20:	6820      	ldr	r0, [r4, #0]
    ca22:	46b3      	mov	fp, r6
    ca24:	4632      	mov	r2, r6
    ca26:	e74c      	b.n	c8c2 <__sfvwrite_r+0xae>
    ca28:	4639      	mov	r1, r7
    ca2a:	9201      	str	r2, [sp, #4]
    ca2c:	f7fa fe0a 	bl	7644 <memmove>
    ca30:	9a01      	ldr	r2, [sp, #4]
    ca32:	68a3      	ldr	r3, [r4, #8]
    ca34:	1a9b      	subs	r3, r3, r2
    ca36:	60a3      	str	r3, [r4, #8]
    ca38:	6823      	ldr	r3, [r4, #0]
    ca3a:	4413      	add	r3, r2
    ca3c:	6023      	str	r3, [r4, #0]
    ca3e:	4693      	mov	fp, r2
    ca40:	e795      	b.n	c96e <__sfvwrite_r+0x15a>
    ca42:	6823      	ldr	r3, [r4, #0]
    ca44:	6921      	ldr	r1, [r4, #16]
    ca46:	eba3 0b01 	sub.w	fp, r3, r1
    ca4a:	6963      	ldr	r3, [r4, #20]
    ca4c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    ca50:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    ca54:	f10b 0301 	add.w	r3, fp, #1
    ca58:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    ca5c:	4433      	add	r3, r6
    ca5e:	4553      	cmp	r3, sl
    ca60:	4652      	mov	r2, sl
    ca62:	bf84      	itt	hi
    ca64:	469a      	movhi	sl, r3
    ca66:	4652      	movhi	r2, sl
    ca68:	0543      	lsls	r3, r0, #21
    ca6a:	d52c      	bpl.n	cac6 <__sfvwrite_r+0x2b2>
    ca6c:	4611      	mov	r1, r2
    ca6e:	4640      	mov	r0, r8
    ca70:	f7f9 ffb0 	bl	69d4 <_malloc_r>
    ca74:	2800      	cmp	r0, #0
    ca76:	d03b      	beq.n	caf0 <__sfvwrite_r+0x2dc>
    ca78:	465a      	mov	r2, fp
    ca7a:	6921      	ldr	r1, [r4, #16]
    ca7c:	9001      	str	r0, [sp, #4]
    ca7e:	f7f8 f8b1 	bl	4be4 <memcpy>
    ca82:	89a2      	ldrh	r2, [r4, #12]
    ca84:	9b01      	ldr	r3, [sp, #4]
    ca86:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    ca8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ca8e:	81a2      	strh	r2, [r4, #12]
    ca90:	eb03 000b 	add.w	r0, r3, fp
    ca94:	6123      	str	r3, [r4, #16]
    ca96:	ebaa 030b 	sub.w	r3, sl, fp
    ca9a:	f8c4 a014 	str.w	sl, [r4, #20]
    ca9e:	60a3      	str	r3, [r4, #8]
    caa0:	6020      	str	r0, [r4, #0]
    caa2:	46b3      	mov	fp, r6
    caa4:	4632      	mov	r2, r6
    caa6:	e70c      	b.n	c8c2 <__sfvwrite_r+0xae>
    caa8:	4639      	mov	r1, r7
    caaa:	465a      	mov	r2, fp
    caac:	f7fa fdca 	bl	7644 <memmove>
    cab0:	6823      	ldr	r3, [r4, #0]
    cab2:	445b      	add	r3, fp
    cab4:	6023      	str	r3, [r4, #0]
    cab6:	4621      	mov	r1, r4
    cab8:	4640      	mov	r0, r8
    caba:	f7fd fc01 	bl	a2c0 <_fflush_r>
    cabe:	2800      	cmp	r0, #0
    cac0:	f43f af55 	beq.w	c96e <__sfvwrite_r+0x15a>
    cac4:	e725      	b.n	c912 <__sfvwrite_r+0xfe>
    cac6:	4640      	mov	r0, r8
    cac8:	f7fa fa40 	bl	6f4c <_realloc_r>
    cacc:	4603      	mov	r3, r0
    cace:	2800      	cmp	r0, #0
    cad0:	d1de      	bne.n	ca90 <__sfvwrite_r+0x27c>
    cad2:	6921      	ldr	r1, [r4, #16]
    cad4:	4640      	mov	r0, r8
    cad6:	f7fb f821 	bl	7b1c <_free_r>
    cada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cade:	220c      	movs	r2, #12
    cae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    cae4:	f8c8 2000 	str.w	r2, [r8]
    cae8:	e715      	b.n	c916 <__sfvwrite_r+0x102>
    caea:	1c72      	adds	r2, r6, #1
    caec:	4691      	mov	r9, r2
    caee:	e726      	b.n	c93e <__sfvwrite_r+0x12a>
    caf0:	220c      	movs	r2, #12
    caf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    caf6:	f8c8 2000 	str.w	r2, [r8]
    cafa:	e70c      	b.n	c916 <__sfvwrite_r+0x102>
    cafc:	f04f 30ff 	mov.w	r0, #4294967295
    cb00:	e6ba      	b.n	c878 <__sfvwrite_r+0x64>
    cb02:	bf00      	nop
    cb04:	7ffffc00 	.word	0x7ffffc00

0000cb08 <__swsetup_r>:
    cb08:	b538      	push	{r3, r4, r5, lr}
    cb0a:	4b31      	ldr	r3, [pc, #196]	; (cbd0 <__swsetup_r+0xc8>)
    cb0c:	681b      	ldr	r3, [r3, #0]
    cb0e:	4605      	mov	r5, r0
    cb10:	460c      	mov	r4, r1
    cb12:	b113      	cbz	r3, cb1a <__swsetup_r+0x12>
    cb14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    cb16:	2a00      	cmp	r2, #0
    cb18:	d04e      	beq.n	cbb8 <__swsetup_r+0xb0>
    cb1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cb1e:	0718      	lsls	r0, r3, #28
    cb20:	b29a      	uxth	r2, r3
    cb22:	d51c      	bpl.n	cb5e <__swsetup_r+0x56>
    cb24:	6921      	ldr	r1, [r4, #16]
    cb26:	b329      	cbz	r1, cb74 <__swsetup_r+0x6c>
    cb28:	f012 0001 	ands.w	r0, r2, #1
    cb2c:	d007      	beq.n	cb3e <__swsetup_r+0x36>
    cb2e:	2000      	movs	r0, #0
    cb30:	60a0      	str	r0, [r4, #8]
    cb32:	6960      	ldr	r0, [r4, #20]
    cb34:	4240      	negs	r0, r0
    cb36:	61a0      	str	r0, [r4, #24]
    cb38:	b139      	cbz	r1, cb4a <__swsetup_r+0x42>
    cb3a:	2000      	movs	r0, #0
    cb3c:	bd38      	pop	{r3, r4, r5, pc}
    cb3e:	0795      	lsls	r5, r2, #30
    cb40:	bf58      	it	pl
    cb42:	6960      	ldrpl	r0, [r4, #20]
    cb44:	60a0      	str	r0, [r4, #8]
    cb46:	2900      	cmp	r1, #0
    cb48:	d1f7      	bne.n	cb3a <__swsetup_r+0x32>
    cb4a:	0612      	lsls	r2, r2, #24
    cb4c:	bf58      	it	pl
    cb4e:	4608      	movpl	r0, r1
    cb50:	d5f4      	bpl.n	cb3c <__swsetup_r+0x34>
    cb52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cb56:	81a3      	strh	r3, [r4, #12]
    cb58:	f04f 30ff 	mov.w	r0, #4294967295
    cb5c:	bd38      	pop	{r3, r4, r5, pc}
    cb5e:	06d1      	lsls	r1, r2, #27
    cb60:	d52e      	bpl.n	cbc0 <__swsetup_r+0xb8>
    cb62:	0752      	lsls	r2, r2, #29
    cb64:	d414      	bmi.n	cb90 <__swsetup_r+0x88>
    cb66:	6921      	ldr	r1, [r4, #16]
    cb68:	f043 0308 	orr.w	r3, r3, #8
    cb6c:	81a3      	strh	r3, [r4, #12]
    cb6e:	b29a      	uxth	r2, r3
    cb70:	2900      	cmp	r1, #0
    cb72:	d1d9      	bne.n	cb28 <__swsetup_r+0x20>
    cb74:	f402 7020 	and.w	r0, r2, #640	; 0x280
    cb78:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    cb7c:	d0d4      	beq.n	cb28 <__swsetup_r+0x20>
    cb7e:	4621      	mov	r1, r4
    cb80:	4628      	mov	r0, r5
    cb82:	f000 f947 	bl	ce14 <__smakebuf_r>
    cb86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cb8a:	6921      	ldr	r1, [r4, #16]
    cb8c:	b29a      	uxth	r2, r3
    cb8e:	e7cb      	b.n	cb28 <__swsetup_r+0x20>
    cb90:	6b21      	ldr	r1, [r4, #48]	; 0x30
    cb92:	b151      	cbz	r1, cbaa <__swsetup_r+0xa2>
    cb94:	f104 0240 	add.w	r2, r4, #64	; 0x40
    cb98:	4291      	cmp	r1, r2
    cb9a:	d004      	beq.n	cba6 <__swsetup_r+0x9e>
    cb9c:	4628      	mov	r0, r5
    cb9e:	f7fa ffbd 	bl	7b1c <_free_r>
    cba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cba6:	2200      	movs	r2, #0
    cba8:	6322      	str	r2, [r4, #48]	; 0x30
    cbaa:	6921      	ldr	r1, [r4, #16]
    cbac:	2200      	movs	r2, #0
    cbae:	e9c4 1200 	strd	r1, r2, [r4]
    cbb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    cbb6:	e7d7      	b.n	cb68 <__swsetup_r+0x60>
    cbb8:	4618      	mov	r0, r3
    cbba:	f7fa fc49 	bl	7450 <__sinit>
    cbbe:	e7ac      	b.n	cb1a <__swsetup_r+0x12>
    cbc0:	2209      	movs	r2, #9
    cbc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cbc6:	602a      	str	r2, [r5, #0]
    cbc8:	f04f 30ff 	mov.w	r0, #4294967295
    cbcc:	81a3      	strh	r3, [r4, #12]
    cbce:	bd38      	pop	{r3, r4, r5, pc}
    cbd0:	1fff0ed8 	.word	0x1fff0ed8

0000cbd4 <__fputwc>:
    cbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cbd8:	b082      	sub	sp, #8
    cbda:	4682      	mov	sl, r0
    cbdc:	4688      	mov	r8, r1
    cbde:	4614      	mov	r4, r2
    cbe0:	f7fa fe30 	bl	7844 <__locale_mb_cur_max>
    cbe4:	2801      	cmp	r0, #1
    cbe6:	d103      	bne.n	cbf0 <__fputwc+0x1c>
    cbe8:	f108 33ff 	add.w	r3, r8, #4294967295
    cbec:	2bfe      	cmp	r3, #254	; 0xfe
    cbee:	d936      	bls.n	cc5e <__fputwc+0x8a>
    cbf0:	f10d 0904 	add.w	r9, sp, #4
    cbf4:	4642      	mov	r2, r8
    cbf6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    cbfa:	4649      	mov	r1, r9
    cbfc:	4650      	mov	r0, sl
    cbfe:	f7fe fd01 	bl	b604 <_wcrtomb_r>
    cc02:	1c42      	adds	r2, r0, #1
    cc04:	4606      	mov	r6, r0
    cc06:	d032      	beq.n	cc6e <__fputwc+0x9a>
    cc08:	b320      	cbz	r0, cc54 <__fputwc+0x80>
    cc0a:	f89d c004 	ldrb.w	ip, [sp, #4]
    cc0e:	2500      	movs	r5, #0
    cc10:	e009      	b.n	cc26 <__fputwc+0x52>
    cc12:	6823      	ldr	r3, [r4, #0]
    cc14:	1c5a      	adds	r2, r3, #1
    cc16:	6022      	str	r2, [r4, #0]
    cc18:	f883 c000 	strb.w	ip, [r3]
    cc1c:	3501      	adds	r5, #1
    cc1e:	42b5      	cmp	r5, r6
    cc20:	d218      	bcs.n	cc54 <__fputwc+0x80>
    cc22:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    cc26:	68a3      	ldr	r3, [r4, #8]
    cc28:	3b01      	subs	r3, #1
    cc2a:	2b00      	cmp	r3, #0
    cc2c:	60a3      	str	r3, [r4, #8]
    cc2e:	daf0      	bge.n	cc12 <__fputwc+0x3e>
    cc30:	69a7      	ldr	r7, [r4, #24]
    cc32:	42bb      	cmp	r3, r7
    cc34:	4661      	mov	r1, ip
    cc36:	4622      	mov	r2, r4
    cc38:	4650      	mov	r0, sl
    cc3a:	db02      	blt.n	cc42 <__fputwc+0x6e>
    cc3c:	f1bc 0f0a 	cmp.w	ip, #10
    cc40:	d1e7      	bne.n	cc12 <__fputwc+0x3e>
    cc42:	f000 f953 	bl	ceec <__swbuf_r>
    cc46:	1c43      	adds	r3, r0, #1
    cc48:	d1e8      	bne.n	cc1c <__fputwc+0x48>
    cc4a:	4606      	mov	r6, r0
    cc4c:	4630      	mov	r0, r6
    cc4e:	b002      	add	sp, #8
    cc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc54:	4646      	mov	r6, r8
    cc56:	4630      	mov	r0, r6
    cc58:	b002      	add	sp, #8
    cc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc5e:	fa5f fc88 	uxtb.w	ip, r8
    cc62:	f88d c004 	strb.w	ip, [sp, #4]
    cc66:	4606      	mov	r6, r0
    cc68:	f10d 0904 	add.w	r9, sp, #4
    cc6c:	e7cf      	b.n	cc0e <__fputwc+0x3a>
    cc6e:	89a3      	ldrh	r3, [r4, #12]
    cc70:	4630      	mov	r0, r6
    cc72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cc76:	81a3      	strh	r3, [r4, #12]
    cc78:	b002      	add	sp, #8
    cc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc7e:	bf00      	nop

0000cc80 <_fputwc_r>:
    cc80:	b530      	push	{r4, r5, lr}
    cc82:	6e53      	ldr	r3, [r2, #100]	; 0x64
    cc84:	f013 0f01 	tst.w	r3, #1
    cc88:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    cc8c:	4614      	mov	r4, r2
    cc8e:	b083      	sub	sp, #12
    cc90:	4605      	mov	r5, r0
    cc92:	b29a      	uxth	r2, r3
    cc94:	d101      	bne.n	cc9a <_fputwc_r+0x1a>
    cc96:	0598      	lsls	r0, r3, #22
    cc98:	d51c      	bpl.n	ccd4 <_fputwc_r+0x54>
    cc9a:	0490      	lsls	r0, r2, #18
    cc9c:	d406      	bmi.n	ccac <_fputwc_r+0x2c>
    cc9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    cca0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    cca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    cca8:	81a3      	strh	r3, [r4, #12]
    ccaa:	6662      	str	r2, [r4, #100]	; 0x64
    ccac:	4622      	mov	r2, r4
    ccae:	4628      	mov	r0, r5
    ccb0:	f7ff ff90 	bl	cbd4 <__fputwc>
    ccb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ccb6:	07da      	lsls	r2, r3, #31
    ccb8:	4605      	mov	r5, r0
    ccba:	d402      	bmi.n	ccc2 <_fputwc_r+0x42>
    ccbc:	89a3      	ldrh	r3, [r4, #12]
    ccbe:	059b      	lsls	r3, r3, #22
    ccc0:	d502      	bpl.n	ccc8 <_fputwc_r+0x48>
    ccc2:	4628      	mov	r0, r5
    ccc4:	b003      	add	sp, #12
    ccc6:	bd30      	pop	{r4, r5, pc}
    ccc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ccca:	f7fa fe57 	bl	797c <__retarget_lock_release_recursive>
    ccce:	4628      	mov	r0, r5
    ccd0:	b003      	add	sp, #12
    ccd2:	bd30      	pop	{r4, r5, pc}
    ccd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ccd6:	9101      	str	r1, [sp, #4]
    ccd8:	f7fa fe4e 	bl	7978 <__retarget_lock_acquire_recursive>
    ccdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cce0:	9901      	ldr	r1, [sp, #4]
    cce2:	b29a      	uxth	r2, r3
    cce4:	e7d9      	b.n	cc9a <_fputwc_r+0x1a>
    cce6:	bf00      	nop

0000cce8 <_wcsnrtombs_l>:
    cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccec:	b08b      	sub	sp, #44	; 0x2c
    ccee:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    ccf2:	9f14      	ldr	r7, [sp, #80]	; 0x50
    ccf4:	9103      	str	r1, [sp, #12]
    ccf6:	4681      	mov	r9, r0
    ccf8:	9205      	str	r2, [sp, #20]
    ccfa:	461e      	mov	r6, r3
    ccfc:	f1b8 0f00 	cmp.w	r8, #0
    cd00:	d05c      	beq.n	cdbc <_wcsnrtombs_l+0xd4>
    cd02:	9b03      	ldr	r3, [sp, #12]
    cd04:	2b00      	cmp	r3, #0
    cd06:	d05e      	beq.n	cdc6 <_wcsnrtombs_l+0xde>
    cd08:	9b05      	ldr	r3, [sp, #20]
    cd0a:	681d      	ldr	r5, [r3, #0]
    cd0c:	2f00      	cmp	r7, #0
    cd0e:	d06a      	beq.n	cde6 <_wcsnrtombs_l+0xfe>
    cd10:	1e74      	subs	r4, r6, #1
    cd12:	b34e      	cbz	r6, cd68 <_wcsnrtombs_l+0x80>
    cd14:	9b03      	ldr	r3, [sp, #12]
    cd16:	9304      	str	r3, [sp, #16]
    cd18:	3d04      	subs	r5, #4
    cd1a:	2600      	movs	r6, #0
    cd1c:	9501      	str	r5, [sp, #4]
    cd1e:	e00b      	b.n	cd38 <_wcsnrtombs_l+0x50>
    cd20:	9b03      	ldr	r3, [sp, #12]
    cd22:	bb2b      	cbnz	r3, cd70 <_wcsnrtombs_l+0x88>
    cd24:	9b01      	ldr	r3, [sp, #4]
    cd26:	681a      	ldr	r2, [r3, #0]
    cd28:	2a00      	cmp	r2, #0
    cd2a:	d03a      	beq.n	cda2 <_wcsnrtombs_l+0xba>
    cd2c:	45bc      	cmp	ip, r7
    cd2e:	d25c      	bcs.n	cdea <_wcsnrtombs_l+0x102>
    cd30:	3c01      	subs	r4, #1
    cd32:	1c63      	adds	r3, r4, #1
    cd34:	4666      	mov	r6, ip
    cd36:	d017      	beq.n	cd68 <_wcsnrtombs_l+0x80>
    cd38:	f8d8 3000 	ldr.w	r3, [r8]
    cd3c:	9302      	str	r3, [sp, #8]
    cd3e:	9b01      	ldr	r3, [sp, #4]
    cd40:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    cd44:	f853 2f04 	ldr.w	r2, [r3, #4]!
    cd48:	9301      	str	r3, [sp, #4]
    cd4a:	a907      	add	r1, sp, #28
    cd4c:	4643      	mov	r3, r8
    cd4e:	4648      	mov	r0, r9
    cd50:	f8d8 b004 	ldr.w	fp, [r8, #4]
    cd54:	47a8      	blx	r5
    cd56:	1c42      	adds	r2, r0, #1
    cd58:	d03a      	beq.n	cdd0 <_wcsnrtombs_l+0xe8>
    cd5a:	eb00 0c06 	add.w	ip, r0, r6
    cd5e:	45bc      	cmp	ip, r7
    cd60:	d9de      	bls.n	cd20 <_wcsnrtombs_l+0x38>
    cd62:	9b02      	ldr	r3, [sp, #8]
    cd64:	e9c8 3b00 	strd	r3, fp, [r8]
    cd68:	4630      	mov	r0, r6
    cd6a:	b00b      	add	sp, #44	; 0x2c
    cd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd70:	2800      	cmp	r0, #0
    cd72:	dd0e      	ble.n	cd92 <_wcsnrtombs_l+0xaa>
    cd74:	9b04      	ldr	r3, [sp, #16]
    cd76:	9d01      	ldr	r5, [sp, #4]
    cd78:	4418      	add	r0, r3
    cd7a:	1e5a      	subs	r2, r3, #1
    cd7c:	a907      	add	r1, sp, #28
    cd7e:	f100 3eff 	add.w	lr, r0, #4294967295
    cd82:	f811 3b01 	ldrb.w	r3, [r1], #1
    cd86:	f802 3f01 	strb.w	r3, [r2, #1]!
    cd8a:	4572      	cmp	r2, lr
    cd8c:	d1f9      	bne.n	cd82 <_wcsnrtombs_l+0x9a>
    cd8e:	9501      	str	r5, [sp, #4]
    cd90:	9004      	str	r0, [sp, #16]
    cd92:	9b05      	ldr	r3, [sp, #20]
    cd94:	681a      	ldr	r2, [r3, #0]
    cd96:	3204      	adds	r2, #4
    cd98:	601a      	str	r2, [r3, #0]
    cd9a:	9b01      	ldr	r3, [sp, #4]
    cd9c:	681a      	ldr	r2, [r3, #0]
    cd9e:	2a00      	cmp	r2, #0
    cda0:	d1c4      	bne.n	cd2c <_wcsnrtombs_l+0x44>
    cda2:	9b03      	ldr	r3, [sp, #12]
    cda4:	b10b      	cbz	r3, cdaa <_wcsnrtombs_l+0xc2>
    cda6:	9b05      	ldr	r3, [sp, #20]
    cda8:	601a      	str	r2, [r3, #0]
    cdaa:	f10c 36ff 	add.w	r6, ip, #4294967295
    cdae:	2200      	movs	r2, #0
    cdb0:	4630      	mov	r0, r6
    cdb2:	f8c8 2000 	str.w	r2, [r8]
    cdb6:	b00b      	add	sp, #44	; 0x2c
    cdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cdbc:	9b03      	ldr	r3, [sp, #12]
    cdbe:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    cdc2:	2b00      	cmp	r3, #0
    cdc4:	d1a0      	bne.n	cd08 <_wcsnrtombs_l+0x20>
    cdc6:	9b05      	ldr	r3, [sp, #20]
    cdc8:	f04f 37ff 	mov.w	r7, #4294967295
    cdcc:	681d      	ldr	r5, [r3, #0]
    cdce:	e79f      	b.n	cd10 <_wcsnrtombs_l+0x28>
    cdd0:	4606      	mov	r6, r0
    cdd2:	218a      	movs	r1, #138	; 0x8a
    cdd4:	2200      	movs	r2, #0
    cdd6:	4630      	mov	r0, r6
    cdd8:	f8c9 1000 	str.w	r1, [r9]
    cddc:	f8c8 2000 	str.w	r2, [r8]
    cde0:	b00b      	add	sp, #44	; 0x2c
    cde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cde6:	463e      	mov	r6, r7
    cde8:	e7be      	b.n	cd68 <_wcsnrtombs_l+0x80>
    cdea:	4666      	mov	r6, ip
    cdec:	e7bc      	b.n	cd68 <_wcsnrtombs_l+0x80>
    cdee:	bf00      	nop

0000cdf0 <_wcsnrtombs_r>:
    cdf0:	b510      	push	{r4, lr}
    cdf2:	b084      	sub	sp, #16
    cdf4:	4c05      	ldr	r4, [pc, #20]	; (ce0c <_wcsnrtombs_r+0x1c>)
    cdf6:	9806      	ldr	r0, [sp, #24]
    cdf8:	9000      	str	r0, [sp, #0]
    cdfa:	9807      	ldr	r0, [sp, #28]
    cdfc:	9001      	str	r0, [sp, #4]
    cdfe:	4804      	ldr	r0, [pc, #16]	; (ce10 <_wcsnrtombs_r+0x20>)
    ce00:	6800      	ldr	r0, [r0, #0]
    ce02:	9402      	str	r4, [sp, #8]
    ce04:	f7ff ff70 	bl	cce8 <_wcsnrtombs_l>
    ce08:	b004      	add	sp, #16
    ce0a:	bd10      	pop	{r4, pc}
    ce0c:	1fff0c48 	.word	0x1fff0c48
    ce10:	1fff0ed8 	.word	0x1fff0ed8

0000ce14 <__smakebuf_r>:
    ce14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce18:	898b      	ldrh	r3, [r1, #12]
    ce1a:	460c      	mov	r4, r1
    ce1c:	0799      	lsls	r1, r3, #30
    ce1e:	b096      	sub	sp, #88	; 0x58
    ce20:	d508      	bpl.n	ce34 <__smakebuf_r+0x20>
    ce22:	f104 0343 	add.w	r3, r4, #67	; 0x43
    ce26:	2201      	movs	r2, #1
    ce28:	e9c4 3204 	strd	r3, r2, [r4, #16]
    ce2c:	6023      	str	r3, [r4, #0]
    ce2e:	b016      	add	sp, #88	; 0x58
    ce30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ce38:	2900      	cmp	r1, #0
    ce3a:	4606      	mov	r6, r0
    ce3c:	db25      	blt.n	ce8a <__smakebuf_r+0x76>
    ce3e:	466a      	mov	r2, sp
    ce40:	f000 f8ac 	bl	cf9c <_fstat_r>
    ce44:	2800      	cmp	r0, #0
    ce46:	db1f      	blt.n	ce88 <__smakebuf_r+0x74>
    ce48:	9d01      	ldr	r5, [sp, #4]
    ce4a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    ce4e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    ce52:	fab5 f585 	clz	r5, r5
    ce56:	f44f 6880 	mov.w	r8, #1024	; 0x400
    ce5a:	096d      	lsrs	r5, r5, #5
    ce5c:	f44f 6700 	mov.w	r7, #2048	; 0x800
    ce60:	4641      	mov	r1, r8
    ce62:	4630      	mov	r0, r6
    ce64:	f7f9 fdb6 	bl	69d4 <_malloc_r>
    ce68:	b1e0      	cbz	r0, cea4 <__smakebuf_r+0x90>
    ce6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ce6e:	f8c4 8014 	str.w	r8, [r4, #20]
    ce72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ce76:	6020      	str	r0, [r4, #0]
    ce78:	6120      	str	r0, [r4, #16]
    ce7a:	81a3      	strh	r3, [r4, #12]
    ce7c:	bb35      	cbnz	r5, cecc <__smakebuf_r+0xb8>
    ce7e:	433b      	orrs	r3, r7
    ce80:	81a3      	strh	r3, [r4, #12]
    ce82:	b016      	add	sp, #88	; 0x58
    ce84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce88:	89a3      	ldrh	r3, [r4, #12]
    ce8a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    ce8e:	d019      	beq.n	cec4 <__smakebuf_r+0xb0>
    ce90:	f04f 0840 	mov.w	r8, #64	; 0x40
    ce94:	2500      	movs	r5, #0
    ce96:	4641      	mov	r1, r8
    ce98:	4630      	mov	r0, r6
    ce9a:	462f      	mov	r7, r5
    ce9c:	f7f9 fd9a 	bl	69d4 <_malloc_r>
    cea0:	2800      	cmp	r0, #0
    cea2:	d1e2      	bne.n	ce6a <__smakebuf_r+0x56>
    cea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cea8:	059a      	lsls	r2, r3, #22
    ceaa:	d4c0      	bmi.n	ce2e <__smakebuf_r+0x1a>
    ceac:	f023 0303 	bic.w	r3, r3, #3
    ceb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
    ceb4:	f043 0302 	orr.w	r3, r3, #2
    ceb8:	2101      	movs	r1, #1
    ceba:	e9c4 2104 	strd	r2, r1, [r4, #16]
    cebe:	81a3      	strh	r3, [r4, #12]
    cec0:	6022      	str	r2, [r4, #0]
    cec2:	e7b4      	b.n	ce2e <__smakebuf_r+0x1a>
    cec4:	f44f 6880 	mov.w	r8, #1024	; 0x400
    cec8:	462f      	mov	r7, r5
    ceca:	e7c9      	b.n	ce60 <__smakebuf_r+0x4c>
    cecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ced0:	4630      	mov	r0, r6
    ced2:	f000 f879 	bl	cfc8 <_isatty_r>
    ced6:	b910      	cbnz	r0, cede <__smakebuf_r+0xca>
    ced8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cedc:	e7cf      	b.n	ce7e <__smakebuf_r+0x6a>
    cede:	89a3      	ldrh	r3, [r4, #12]
    cee0:	f023 0303 	bic.w	r3, r3, #3
    cee4:	f043 0301 	orr.w	r3, r3, #1
    cee8:	b21b      	sxth	r3, r3
    ceea:	e7c8      	b.n	ce7e <__smakebuf_r+0x6a>

0000ceec <__swbuf_r>:
    ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ceee:	460d      	mov	r5, r1
    cef0:	4614      	mov	r4, r2
    cef2:	4606      	mov	r6, r0
    cef4:	b110      	cbz	r0, cefc <__swbuf_r+0x10>
    cef6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    cef8:	2b00      	cmp	r3, #0
    cefa:	d04c      	beq.n	cf96 <__swbuf_r+0xaa>
    cefc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    cf00:	69a3      	ldr	r3, [r4, #24]
    cf02:	60a3      	str	r3, [r4, #8]
    cf04:	0717      	lsls	r7, r2, #28
    cf06:	b290      	uxth	r0, r2
    cf08:	d51b      	bpl.n	cf42 <__swbuf_r+0x56>
    cf0a:	6923      	ldr	r3, [r4, #16]
    cf0c:	b1cb      	cbz	r3, cf42 <__swbuf_r+0x56>
    cf0e:	b2ed      	uxtb	r5, r5
    cf10:	0481      	lsls	r1, r0, #18
    cf12:	462f      	mov	r7, r5
    cf14:	d522      	bpl.n	cf5c <__swbuf_r+0x70>
    cf16:	6822      	ldr	r2, [r4, #0]
    cf18:	6961      	ldr	r1, [r4, #20]
    cf1a:	1ad3      	subs	r3, r2, r3
    cf1c:	4299      	cmp	r1, r3
    cf1e:	dd29      	ble.n	cf74 <__swbuf_r+0x88>
    cf20:	3301      	adds	r3, #1
    cf22:	68a1      	ldr	r1, [r4, #8]
    cf24:	3901      	subs	r1, #1
    cf26:	60a1      	str	r1, [r4, #8]
    cf28:	1c51      	adds	r1, r2, #1
    cf2a:	6021      	str	r1, [r4, #0]
    cf2c:	7015      	strb	r5, [r2, #0]
    cf2e:	6962      	ldr	r2, [r4, #20]
    cf30:	429a      	cmp	r2, r3
    cf32:	d027      	beq.n	cf84 <__swbuf_r+0x98>
    cf34:	89a3      	ldrh	r3, [r4, #12]
    cf36:	07db      	lsls	r3, r3, #31
    cf38:	d501      	bpl.n	cf3e <__swbuf_r+0x52>
    cf3a:	2d0a      	cmp	r5, #10
    cf3c:	d022      	beq.n	cf84 <__swbuf_r+0x98>
    cf3e:	4638      	mov	r0, r7
    cf40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf42:	4621      	mov	r1, r4
    cf44:	4630      	mov	r0, r6
    cf46:	f7ff fddf 	bl	cb08 <__swsetup_r>
    cf4a:	bb08      	cbnz	r0, cf90 <__swbuf_r+0xa4>
    cf4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    cf50:	6923      	ldr	r3, [r4, #16]
    cf52:	b290      	uxth	r0, r2
    cf54:	b2ed      	uxtb	r5, r5
    cf56:	0481      	lsls	r1, r0, #18
    cf58:	462f      	mov	r7, r5
    cf5a:	d4dc      	bmi.n	cf16 <__swbuf_r+0x2a>
    cf5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    cf60:	81a2      	strh	r2, [r4, #12]
    cf62:	6e62      	ldr	r2, [r4, #100]	; 0x64
    cf64:	6961      	ldr	r1, [r4, #20]
    cf66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    cf6a:	6662      	str	r2, [r4, #100]	; 0x64
    cf6c:	6822      	ldr	r2, [r4, #0]
    cf6e:	1ad3      	subs	r3, r2, r3
    cf70:	4299      	cmp	r1, r3
    cf72:	dcd5      	bgt.n	cf20 <__swbuf_r+0x34>
    cf74:	4621      	mov	r1, r4
    cf76:	4630      	mov	r0, r6
    cf78:	f7fd f9a2 	bl	a2c0 <_fflush_r>
    cf7c:	b940      	cbnz	r0, cf90 <__swbuf_r+0xa4>
    cf7e:	6822      	ldr	r2, [r4, #0]
    cf80:	2301      	movs	r3, #1
    cf82:	e7ce      	b.n	cf22 <__swbuf_r+0x36>
    cf84:	4621      	mov	r1, r4
    cf86:	4630      	mov	r0, r6
    cf88:	f7fd f99a 	bl	a2c0 <_fflush_r>
    cf8c:	2800      	cmp	r0, #0
    cf8e:	d0d6      	beq.n	cf3e <__swbuf_r+0x52>
    cf90:	f04f 37ff 	mov.w	r7, #4294967295
    cf94:	e7d3      	b.n	cf3e <__swbuf_r+0x52>
    cf96:	f7fa fa5b 	bl	7450 <__sinit>
    cf9a:	e7af      	b.n	cefc <__swbuf_r+0x10>

0000cf9c <_fstat_r>:
    cf9c:	b570      	push	{r4, r5, r6, lr}
    cf9e:	460c      	mov	r4, r1
    cfa0:	4d08      	ldr	r5, [pc, #32]	; (cfc4 <_fstat_r+0x28>)
    cfa2:	4603      	mov	r3, r0
    cfa4:	2600      	movs	r6, #0
    cfa6:	4620      	mov	r0, r4
    cfa8:	4611      	mov	r1, r2
    cfaa:	461c      	mov	r4, r3
    cfac:	602e      	str	r6, [r5, #0]
    cfae:	f7f7 ff3b 	bl	4e28 <_fstat>
    cfb2:	1c43      	adds	r3, r0, #1
    cfb4:	d000      	beq.n	cfb8 <_fstat_r+0x1c>
    cfb6:	bd70      	pop	{r4, r5, r6, pc}
    cfb8:	682b      	ldr	r3, [r5, #0]
    cfba:	2b00      	cmp	r3, #0
    cfbc:	d0fb      	beq.n	cfb6 <_fstat_r+0x1a>
    cfbe:	6023      	str	r3, [r4, #0]
    cfc0:	bd70      	pop	{r4, r5, r6, pc}
    cfc2:	bf00      	nop
    cfc4:	1fff653c 	.word	0x1fff653c

0000cfc8 <_isatty_r>:
    cfc8:	b538      	push	{r3, r4, r5, lr}
    cfca:	4d07      	ldr	r5, [pc, #28]	; (cfe8 <_isatty_r+0x20>)
    cfcc:	2200      	movs	r2, #0
    cfce:	4604      	mov	r4, r0
    cfd0:	4608      	mov	r0, r1
    cfd2:	602a      	str	r2, [r5, #0]
    cfd4:	f7f7 ff2e 	bl	4e34 <_isatty>
    cfd8:	1c43      	adds	r3, r0, #1
    cfda:	d000      	beq.n	cfde <_isatty_r+0x16>
    cfdc:	bd38      	pop	{r3, r4, r5, pc}
    cfde:	682b      	ldr	r3, [r5, #0]
    cfe0:	2b00      	cmp	r3, #0
    cfe2:	d0fb      	beq.n	cfdc <_isatty_r+0x14>
    cfe4:	6023      	str	r3, [r4, #0]
    cfe6:	bd38      	pop	{r3, r4, r5, pc}
    cfe8:	1fff653c 	.word	0x1fff653c

0000cfec <__aeabi_d2iz>:
    cfec:	ea4f 0241 	mov.w	r2, r1, lsl #1
    cff0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    cff4:	d215      	bcs.n	d022 <__aeabi_d2iz+0x36>
    cff6:	d511      	bpl.n	d01c <__aeabi_d2iz+0x30>
    cff8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    cffc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d000:	d912      	bls.n	d028 <__aeabi_d2iz+0x3c>
    d002:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d00a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d00e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d012:	fa23 f002 	lsr.w	r0, r3, r2
    d016:	bf18      	it	ne
    d018:	4240      	negne	r0, r0
    d01a:	4770      	bx	lr
    d01c:	f04f 0000 	mov.w	r0, #0
    d020:	4770      	bx	lr
    d022:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d026:	d105      	bne.n	d034 <__aeabi_d2iz+0x48>
    d028:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    d02c:	bf08      	it	eq
    d02e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d032:	4770      	bx	lr
    d034:	f04f 0000 	mov.w	r0, #0
    d038:	4770      	bx	lr
    d03a:	bf00      	nop
    d03c:	2e302528 	.word	0x2e302528
    d040:	20296636 	.word	0x20296636
    d044:	25207325 	.word	0x25207325
    d048:	20583830 	.word	0x20583830
    d04c:	5d64255b 	.word	0x5d64255b
    d050:	00000000 	.word	0x00000000
    d054:	32302520 	.word	0x32302520
    d058:	00000058 	.word	0x00000058
    d05c:	206e6163 	.word	0x206e6163
    d060:	ffffff00 	.word	0xffffff00
    d064:	656c6449 	.word	0x656c6449
    d068:	00000000 	.word	0x00000000
    d06c:	20746f4e 	.word	0x20746f4e
    d070:	636e7973 	.word	0x636e7973
    d074:	6e6f7268 	.word	0x6e6f7268
    d078:	64657a69 	.word	0x64657a69
    d07c:	206f7420 	.word	0x206f7420
    d080:	204e4143 	.word	0x204e4143
    d084:	00737562 	.word	0x00737562
    d088:	6e617254 	.word	0x6e617254
    d08c:	74696d73 	.word	0x74696d73
    d090:	676e6974 	.word	0x676e6974
    d094:	00000000 	.word	0x00000000
    d098:	65636552 	.word	0x65636552
    d09c:	6e697669 	.word	0x6e697669
    d0a0:	00000067 	.word	0x00000067
    d0a4:	6f727245 	.word	0x6f727245
    d0a8:	63412072 	.word	0x63412072
    d0ac:	65766974 	.word	0x65766974
    d0b0:	00000000 	.word	0x00000000
    d0b4:	20737542 	.word	0x20737542
    d0b8:	0066666f 	.word	0x0066666f
    d0bc:	4942202c 	.word	0x4942202c
    d0c0:	455f3154 	.word	0x455f3154
    d0c4:	00005252 	.word	0x00005252
    d0c8:	4942202c 	.word	0x4942202c
    d0cc:	455f3054 	.word	0x455f3054
    d0d0:	00005252 	.word	0x00005252
    d0d4:	4341202c 	.word	0x4341202c
    d0d8:	52455f4b 	.word	0x52455f4b
    d0dc:	00000052 	.word	0x00000052
    d0e0:	5243202c 	.word	0x5243202c
    d0e4:	52455f43 	.word	0x52455f43
    d0e8:	00000052 	.word	0x00000052
    d0ec:	5246202c 	.word	0x5246202c
    d0f0:	52455f4d 	.word	0x52455f4d
    d0f4:	00000052 	.word	0x00000052
    d0f8:	5453202c 	.word	0x5453202c
    d0fc:	52455f46 	.word	0x52455f46
    d100:	00000052 	.word	0x00000052
    d104:	5852202c 	.word	0x5852202c
    d108:	4e52575f 	.word	0x4e52575f
    d10c:	6425203a 	.word	0x6425203a
    d110:	00000000 	.word	0x00000000
    d114:	5854202c 	.word	0x5854202c
    d118:	4e52575f 	.word	0x4e52575f
    d11c:	6425203a 	.word	0x6425203a
    d120:	00000000 	.word	0x00000000
    d124:	4c46202c 	.word	0x4c46202c
    d128:	4f435f54 	.word	0x4f435f54
    d12c:	203a464e 	.word	0x203a464e
    d130:	000a7325 	.word	0x000a7325
    d134:	78656c46 	.word	0x78656c46
    d138:	204e4143 	.word	0x204e4143
    d13c:	74617453 	.word	0x74617453
    d140:	00203a65 	.word	0x00203a65
    d144:	6b6f6f4c 	.word	0x6b6f6f4c
    d148:	20676e69 	.word	0x20676e69
    d14c:	20726f66 	.word	0x20726f66
    d150:	7373654d 	.word	0x7373654d
    d154:	73656761 	.word	0x73656761
    d158:	206e6f20 	.word	0x206e6f20
    d15c:	306e6143 	.word	0x306e6143
    d160:	20746120 	.word	0x20746120
    d164:	00000000 	.word	0x00000000
    d168:	73706220 	.word	0x73706220
    d16c:	0000002e 	.word	0x0000002e
    d170:	63637553 	.word	0x63637553
    d174:	21737365 	.word	0x21737365
    d178:	756f4620 	.word	0x756f4620
    d17c:	6d20646e 	.word	0x6d20646e
    d180:	61737365 	.word	0x61737365
    d184:	6f206567 	.word	0x6f206567
    d188:	4143206e 	.word	0x4143206e
    d18c:	202e304e 	.word	0x202e304e
    d190:	6e697355 	.word	0x6e697355
    d194:	00002067 	.word	0x00002067
    d198:	4d206f4e 	.word	0x4d206f4e
    d19c:	61737365 	.word	0x61737365
    d1a0:	20736567 	.word	0x20736567
    d1a4:	6e756f46 	.word	0x6e756f46
    d1a8:	6e6f2064 	.word	0x6e6f2064
    d1ac:	4e414320 	.word	0x4e414320
    d1b0:	55202e30 	.word	0x55202e30
    d1b4:	676e6973 	.word	0x676e6973
    d1b8:	ffff0020 	.word	0xffff0020
    d1bc:	6b6f6f4c 	.word	0x6b6f6f4c
    d1c0:	20676e69 	.word	0x20676e69
    d1c4:	20726f66 	.word	0x20726f66
    d1c8:	7373654d 	.word	0x7373654d
    d1cc:	73656761 	.word	0x73656761
    d1d0:	206e6f20 	.word	0x206e6f20
    d1d4:	316e6143 	.word	0x316e6143
    d1d8:	20746120 	.word	0x20746120
    d1dc:	00000000 	.word	0x00000000
    d1e0:	63637553 	.word	0x63637553
    d1e4:	21737365 	.word	0x21737365
    d1e8:	756f4620 	.word	0x756f4620
    d1ec:	6d20646e 	.word	0x6d20646e
    d1f0:	61737365 	.word	0x61737365
    d1f4:	6f206567 	.word	0x6f206567
    d1f8:	4143206e 	.word	0x4143206e
    d1fc:	202e314e 	.word	0x202e314e
    d200:	6e697355 	.word	0x6e697355
    d204:	00002067 	.word	0x00002067
    d208:	4d206f4e 	.word	0x4d206f4e
    d20c:	61737365 	.word	0x61737365
    d210:	20736567 	.word	0x20736567
    d214:	6e756f46 	.word	0x6e756f46
    d218:	6e6f2064 	.word	0x6e6f2064
    d21c:	4e414320 	.word	0x4e414320
    d220:	55202e31 	.word	0x55202e31
    d224:	676e6973 	.word	0x676e6973
    d228:	ffff0020 	.word	0xffff0020
    d22c:	4f464946 	.word	0x4f464946
    d230:	616e4520 	.word	0x616e4520
    d234:	64656c62 	.word	0x64656c62
    d238:	3e2d2d20 	.word	0x3e2d2d20
    d23c:	00000020 	.word	0x00000020
    d240:	65746e49 	.word	0x65746e49
    d244:	70757272 	.word	0x70757272
    d248:	6e452074 	.word	0x6e452074
    d24c:	656c6261 	.word	0x656c6261
    d250:	00000064 	.word	0x00000064
    d254:	65746e49 	.word	0x65746e49
    d258:	70757272 	.word	0x70757272
    d25c:	69442074 	.word	0x69442074
    d260:	6c626173 	.word	0x6c626173
    d264:	00006465 	.word	0x00006465
    d268:	46494609 	.word	0x46494609
    d26c:	6946204f 	.word	0x6946204f
    d270:	7265746c 	.word	0x7265746c
    d274:	6e692073 	.word	0x6e692073
    d278:	65737520 	.word	0x65737520
    d27c:	0000203a 	.word	0x0000203a
    d280:	6d655209 	.word	0x6d655209
    d284:	696e6961 	.word	0x696e6961
    d288:	4d20676e 	.word	0x4d20676e
    d28c:	626c6961 	.word	0x626c6961
    d290:	7365786f 	.word	0x7365786f
    d294:	0000203a 	.word	0x0000203a
    d298:	424d0909 	.word	0x424d0909
    d29c:	00000000 	.word	0x00000000
    d2a0:	646f6320 	.word	0x646f6320
    d2a4:	52203a65 	.word	0x52203a65
    d2a8:	4e495f58 	.word	0x4e495f58
    d2ac:	49544341 	.word	0x49544341
    d2b0:	00004556 	.word	0x00004556
    d2b4:	646f6320 	.word	0x646f6320
    d2b8:	52203a65 	.word	0x52203a65
    d2bc:	4d455f58 	.word	0x4d455f58
    d2c0:	00595450 	.word	0x00595450
    d2c4:	78452809 	.word	0x78452809
    d2c8:	646e6574 	.word	0x646e6574
    d2cc:	46206465 	.word	0x46206465
    d2d0:	656d6172 	.word	0x656d6172
    d2d4:	00000029 	.word	0x00000029
    d2d8:	74532809 	.word	0x74532809
    d2dc:	61646e61 	.word	0x61646e61
    d2e0:	46206472 	.word	0x46206472
    d2e4:	656d6172 	.word	0x656d6172
    d2e8:	00000029 	.word	0x00000029
    d2ec:	646f6320 	.word	0x646f6320
    d2f0:	52203a65 	.word	0x52203a65
    d2f4:	55465f58 	.word	0x55465f58
    d2f8:	00004c4c 	.word	0x00004c4c
    d2fc:	646f6320 	.word	0x646f6320
    d300:	52203a65 	.word	0x52203a65
    d304:	564f5f58 	.word	0x564f5f58
    d308:	55525245 	.word	0x55525245
    d30c:	0000004e 	.word	0x0000004e
    d310:	646f6320 	.word	0x646f6320
    d314:	52203a65 	.word	0x52203a65
    d318:	41525f58 	.word	0x41525f58
    d31c:	4557534e 	.word	0x4557534e
    d320:	00000052 	.word	0x00000052
    d324:	646f6320 	.word	0x646f6320
    d328:	52203a65 	.word	0x52203a65
    d32c:	55425f58 	.word	0x55425f58
    d330:	00005953 	.word	0x00005953
    d334:	646f6320 	.word	0x646f6320
    d338:	54203a65 	.word	0x54203a65
    d33c:	4e495f58 	.word	0x4e495f58
    d340:	49544341 	.word	0x49544341
    d344:	00004556 	.word	0x00004556
    d348:	646f6320 	.word	0x646f6320
    d34c:	54203a65 	.word	0x54203a65
    d350:	42415f58 	.word	0x42415f58
    d354:	0054524f 	.word	0x0054524f
    d358:	646f6320 	.word	0x646f6320
    d35c:	54203a65 	.word	0x54203a65
    d360:	41445f58 	.word	0x41445f58
    d364:	28204154 	.word	0x28204154
    d368:	6e617254 	.word	0x6e617254
    d36c:	74696d73 	.word	0x74696d73
    d370:	676e6974 	.word	0x676e6974
    d374:	00000029 	.word	0x00000029
    d378:	74784528 	.word	0x74784528
    d37c:	65646e65 	.word	0x65646e65
    d380:	72462064 	.word	0x72462064
    d384:	29656d61 	.word	0x29656d61
    d388:	00000000 	.word	0x00000000
    d38c:	61745328 	.word	0x61745328
    d390:	7261646e 	.word	0x7261646e
    d394:	72462064 	.word	0x72462064
    d398:	29656d61 	.word	0x29656d61
    d39c:	00000000 	.word	0x00000000
    d3a0:	3a444928 	.word	0x3a444928
    d3a4:	00783020 	.word	0x00783020
    d3a8:	79615028 	.word	0x79615028
    d3ac:	64616f6c 	.word	0x64616f6c
    d3b0:	0000203a 	.word	0x0000203a
    d3b4:	646f6320 	.word	0x646f6320
    d3b8:	54203a65 	.word	0x54203a65
    d3bc:	41545f58 	.word	0x41545f58
    d3c0:	4557534e 	.word	0x4557534e
    d3c4:	00000052 	.word	0x00000052
    d3c8:	4f464946 	.word	0x4f464946
    d3cc:	73694420 	.word	0x73694420
    d3d0:	656c6261 	.word	0x656c6261
    d3d4:	4d090a64 	.word	0x4d090a64
    d3d8:	626c6961 	.word	0x626c6961
    d3dc:	7365786f 	.word	0x7365786f
    d3e0:	ff000a3a 	.word	0xff000a3a

0000d3e4 <vtable for FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>>:
	...
    d3ec:	0000418d 000004bd 00002b99 00000749     .A.......+..I...
    d3fc:	00002dd5 0000074d 00000751              .-..M...Q...

0000d408 <vtable for FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>>:
	...
    d410:	00003921 000005fd 00002979 0000073d     !9......y)..=...
    d420:	00002f1d 00000741 00000745 01010000     ./..A...E.......
    d430:	01010100 01010201 02010202 03020103     ................
    d440:	02040202 02020502 06020305 03070203     ................
    d450:	03040702 07030407 05070405 05060704     ................
    d460:	07060607 07070606 00070707 656c6449     ............Idle
	...
    d4b4:	08000000 00000000 00000000 00000000     ................

0000d4c4 <digital_pin_to_info_PGM>:
    d4c4:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    d4d4:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    d4e4:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    d4f4:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    d504:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    d514:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    d524:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    d534:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    d544:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    d554:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    d564:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    d574:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    d584:	43fe2068 4004d068 43fe0014 40049014     h .Ch..@...C...@
    d594:	43fe0038 40049038 43fe003c 4004903c     8..C8..@<..C<..@
    d5a4:	43fe0040 40049040 43fe0848 4004a048     @..C@..@H..CH..@
    d5b4:	43fe084c 4004a04c 43fe0828 4004a028     L..CL..@(..C(..@
    d5c4:	43fe082c 4004a02c 43fe2060 4004d060     ,..C,..@` .C`..@
    d5d4:	43fe2064 4004d064 43fe1020 4004b020     d .Cd..@ ..C ..@
    d5e4:	43fe1024 4004b024 43fe1028 4004b028     $..C$..@(..C(..@
    d5f4:	43fe102c 4004b02c 43fe0044 40049044     ,..C,..@D..CD..@
    d604:	43fe0070 40049070 43fe0074 40049074     p..Cp..@t..Ct..@
    d614:	43fe0068 40049068 43fe0850 4004a050     h..Ch..@P..CP..@
    d624:	43fe0858 4004a058 43fe085c 4004a05c     X..CX..@\..C\..@
    d634:	43fe0854 4004a054 43fe1820 4004c020     T..CT..@ ..C ..@
    d644:	43fe1824 4004c024 43fe0810 4004a010     $..C$..@...C...@
    d654:	43fe0814 4004a014 43fe1838 4004c038     ...C...@8..C8..@
    d664:	43fe1834 4004c034 43fe1830 4004c030     4..C4..@0..C0..@
    d674:	43fe183c 4004c03c 43fe182c 4004c02c     <..C<..@,..C,..@
    d684:	43fe2028 4004d028 43fe202c 4004d02c     ( .C(..@, .C,..@
    d694:	43fe2000 4004d000 43fe2004 4004d004     . .C...@. .C...@
    d6a4:	43fe2008 4004d008 43fe200c 4004d00c     . .C...@. .C...@
    d6b4:	43fe2010 4004d010 43fe2014 4004d014     . .C...@. .C...@

0000d6c4 <vtable for usb_serial_class>:
	...
    d6cc:	00005aed 00005ae5 00005ae1 00005add     .Z...Z...Z...Z..
    d6dc:	00005ad9 00005ad5 00005ad1 00005acd     .Z...Z...Z...Z..

0000d6ec <_serialEvent_default>:
    d6ec:	ffffff00                                ....

0000d6f0 <usb_descriptor_list>:
    d6f0:	00000100 1fff07cc 00000012 00000200     ................
    d700:	1fff0788 00000043 00000300 1fff07e0     ....C...........
    d710:	00000000 04090301 1fff07e4 00000000     ................
    d720:	04090302 1fff07fc 00000000 04090303     ................
    d730:	1fff0814 00000000 00000000 00000000     ................
    d740:	00000000                                ....

0000d744 <usb_endpoint_config_table>:
    d744:	15191500                                ....

0000d748 <_ctype_>:
    d748:	20202000 20202020 28282020 20282828     .         ((((( 
    d758:	20202020 20202020 20202020 20202020                     
    d768:	10108820 10101010 10101010 10101010      ...............
    d778:	04040410 04040404 10040404 10101010     ................
    d788:	41411010 41414141 01010101 01010101     ..AAAAAA........
    d798:	01010101 01010101 01010101 10101010     ................
    d7a8:	42421010 42424242 02020202 02020202     ..BBBBBB........
    d7b8:	02020202 02020202 02020202 10101010     ................
    d7c8:	00000020 00000000 00000000 00000000      ...............
	...
    d848:	ffffff00 435f434c 414c4c4f 00004554     ....LC_COLLATE..
    d858:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
    d868:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
    d878:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
    d888:	41535345 00534547 6c6c6142 7320636f     ESSAGES.Balloc s
    d898:	65636375 64656465 00000000 7461642f     ucceeded..../dat
    d8a8:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
    d8b8:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
    d8c8:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
    d8d8:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
    d8e8:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
    d8f8:	2e636572 ffff0063                       rec.c...

0000d900 <__mprec_bigtens>:
    d900:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    d910:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    d920:	7f73bf3c 75154fdd                       <.s..O.u

0000d928 <__mprec_tens>:
    d928:	00000000 3ff00000 00000000 40240000     .......?......$@
    d938:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    d948:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    d958:	00000000 412e8480 00000000 416312d0     .......A......cA
    d968:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    d978:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    d988:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    d998:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    d9a8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    d9b8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    d9c8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    d9d8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    d9e8:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
    d9f8:	0000007d 00464e49 00666e69 004e414e     }...INF.inf.NAN.
    da08:	006e616e 33323130 37363534 62613938     nan.0123456789ab
    da18:	66656463 00000000 33323130 37363534     cdef....01234567
    da28:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
    da38:	0000296c ffff0030 20202020 20202020     l)..0...        
    da48:	20202020 20202020 30303030 30303030             00000000
    da58:	30303030 30303030 7566202c 6974636e     00000000, functi
    da68:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
    da78:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
    da88:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
    da98:	25732564 ff000a73 69666e49 7974696e     d%s%s...Infinity
    daa8:	00000000 004e614e 7461642f 656a2f61     ....NaN./data/je
    dab8:	6e696b6e 6f772f73 70736b72 2f656361     nkins/workspace/
    dac8:	2d554e47 6c6f6f74 69616863 72612f6e     GNU-toolchain/ar
    dad8:	31312d6d 6372732f 77656e2f 2d62696c     m-11/src/newlib-
    dae8:	77677963 6e2f6e69 696c7765 696c2f62     cygwin/newlib/li
    daf8:	732f6362 696c6474 74642f62 632e616f     bc/stdlib/dtoa.c
    db08:	ffffff00 20202020 20202020 20202020     ....            
    db18:	20202020 30303030 30303030 30303030         000000000000
    db28:	30303030                                0000

0000db2c <_init>:
    db2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db2e:	bf00      	nop
    db30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    db32:	bc08      	pop	{r3}
    db34:	469e      	mov	lr, r3
    db36:	4770      	bx	lr

0000db38 <__init_array_start>:
    db38:	00007a5d 	.word	0x00007a5d

0000db3c <__frame_dummy_init_array_entry>:
    db3c:	00000435 000046bd                       5....F..

Disassembly of section .fini:

0000db44 <_fini>:
    db44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db46:	bf00      	nop
